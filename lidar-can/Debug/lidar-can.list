
lidar-can.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b88  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08005d10  08005d10  00015d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d40  08005d40  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08005d40  08005d40  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005d40  08005d40  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d40  08005d40  00015d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d44  08005d44  00015d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005d48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00000484  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000498  20000498  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 14 .debug_info   00013839  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000027e9  00000000  00000000  000338c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001220  00000000  00000000  000360b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e25  00000000  00000000  000372d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001e1b8  00000000  00000000  000380f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00015f7d  00000000  00000000  000562ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000b7952  00000000  00000000  0006c22a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004e34  00000000  00000000  00123b7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  001289b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005cf8 	.word	0x08005cf8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08005cf8 	.word	0x08005cf8

080001c8 <HAL_CAN_RxFifo0MsgPendingCallback>:
int universal_delay = 150;
uint16_t distance = 0;


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80001d0:	4b07      	ldr	r3, [pc, #28]	; (80001f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80001d2:	4a08      	ldr	r2, [pc, #32]	; (80001f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80001d4:	2100      	movs	r1, #0
 80001d6:	6878      	ldr	r0, [r7, #4]
 80001d8:	f001 fa59 	bl	800168e <HAL_CAN_GetRxMessage>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 80001dc:	2201      	movs	r2, #1
 80001de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001e2:	4805      	ldr	r0, [pc, #20]	; (80001f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80001e4:	f002 f84c 	bl	8002280 <HAL_GPIO_WritePin>
}
 80001e8:	bf00      	nop
 80001ea:	3708      	adds	r7, #8
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	20000484 	.word	0x20000484
 80001f4:	20000464 	.word	0x20000464
 80001f8:	48001000 	.word	0x48001000

080001fc <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 8000204:	4b07      	ldr	r3, [pc, #28]	; (8000224 <HAL_CAN_RxFifo1MsgPendingCallback+0x28>)
 8000206:	4a08      	ldr	r2, [pc, #32]	; (8000228 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c>)
 8000208:	2101      	movs	r1, #1
 800020a:	6878      	ldr	r0, [r7, #4]
 800020c:	f001 fa3f 	bl	800168e <HAL_CAN_GetRxMessage>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8000210:	2201      	movs	r2, #1
 8000212:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000216:	4805      	ldr	r0, [pc, #20]	; (800022c <HAL_CAN_RxFifo1MsgPendingCallback+0x30>)
 8000218:	f002 f832 	bl	8002280 <HAL_GPIO_WritePin>
}
 800021c:	bf00      	nop
 800021e:	3708      	adds	r7, #8
 8000220:	46bd      	mov	sp, r7
 8000222:	bd80      	pop	{r7, pc}
 8000224:	20000484 	.word	0x20000484
 8000228:	20000464 	.word	0x20000464
 800022c:	48001000 	.word	0x48001000

08000230 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000236:	f000 fec7 	bl	8000fc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023a:	f000 f847 	bl	80002cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800023e:	f000 fa15 	bl	800066c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000242:	f000 f8fd 	bl	8000440 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000246:	f000 f93b 	bl	80004c0 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 800024a:	f000 f9ed 	bl	8000628 <MX_USB_PCD_Init>
  MX_CAN_Init();
 800024e:	f000 f89f 	bl	8000390 <MX_CAN_Init>
  MX_TIM2_Init();
 8000252:	f000 f973 	bl	800053c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
		HAL_CAN_Start(&hcan);
 8000256:	4819      	ldr	r0, [pc, #100]	; (80002bc <main+0x8c>)
 8000258:	f001 f905 	bl	8001466 <HAL_CAN_Start>

	    HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800025c:	2102      	movs	r1, #2
 800025e:	4817      	ldr	r0, [pc, #92]	; (80002bc <main+0x8c>)
 8000260:	f001 fb37 	bl	80018d2 <HAL_CAN_ActivateNotification>
	    HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 8000264:	2110      	movs	r1, #16
 8000266:	4815      	ldr	r0, [pc, #84]	; (80002bc <main+0x8c>)
 8000268:	f001 fb33 	bl	80018d2 <HAL_CAN_ActivateNotification>

		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800026c:	2100      	movs	r1, #0
 800026e:	4814      	ldr	r0, [pc, #80]	; (80002c0 <main+0x90>)
 8000270:	f004 fd56 	bl	8004d20 <HAL_TIM_PWM_Start>

		configuration_set(4);
 8000274:	2004      	movs	r0, #4
 8000276:	f000 fa8d 	bl	8000794 <configuration_set>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  for (uint8_t i = lower_bound; i<upper_bound; ++i){
 800027a:	4b12      	ldr	r3, [pc, #72]	; (80002c4 <main+0x94>)
 800027c:	781b      	ldrb	r3, [r3, #0]
 800027e:	71fb      	strb	r3, [r7, #7]
 8000280:	e006      	b.n	8000290 <main+0x60>
		  one_iteration(i);
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	4618      	mov	r0, r3
 8000286:	f000 fc15 	bl	8000ab4 <one_iteration>
	  for (uint8_t i = lower_bound; i<upper_bound; ++i){
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	3301      	adds	r3, #1
 800028e:	71fb      	strb	r3, [r7, #7]
 8000290:	4b0d      	ldr	r3, [pc, #52]	; (80002c8 <main+0x98>)
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	79fa      	ldrb	r2, [r7, #7]
 8000296:	429a      	cmp	r2, r3
 8000298:	d3f3      	bcc.n	8000282 <main+0x52>
	  }
	  for (uint8_t i = upper_bound; i>lower_bound; i--){
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <main+0x98>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	71bb      	strb	r3, [r7, #6]
 80002a0:	e006      	b.n	80002b0 <main+0x80>
	  		  one_iteration(i);
 80002a2:	79bb      	ldrb	r3, [r7, #6]
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 fc05 	bl	8000ab4 <one_iteration>
	  for (uint8_t i = upper_bound; i>lower_bound; i--){
 80002aa:	79bb      	ldrb	r3, [r7, #6]
 80002ac:	3b01      	subs	r3, #1
 80002ae:	71bb      	strb	r3, [r7, #6]
 80002b0:	4b04      	ldr	r3, [pc, #16]	; (80002c4 <main+0x94>)
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	79ba      	ldrb	r2, [r7, #6]
 80002b6:	429a      	cmp	r2, r3
 80002b8:	d8f3      	bhi.n	80002a2 <main+0x72>
	  for (uint8_t i = lower_bound; i<upper_bound; ++i){
 80002ba:	e7de      	b.n	800027a <main+0x4a>
 80002bc:	20000034 	.word	0x20000034
 80002c0:	20000114 	.word	0x20000114
 80002c4:	20000003 	.word	0x20000003
 80002c8:	20000002 	.word	0x20000002

080002cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b09e      	sub	sp, #120	; 0x78
 80002d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80002d6:	2228      	movs	r2, #40	; 0x28
 80002d8:	2100      	movs	r1, #0
 80002da:	4618      	mov	r0, r3
 80002dc:	f005 fce0 	bl	8005ca0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]
 80002e8:	605a      	str	r2, [r3, #4]
 80002ea:	609a      	str	r2, [r3, #8]
 80002ec:	60da      	str	r2, [r3, #12]
 80002ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002f0:	463b      	mov	r3, r7
 80002f2:	223c      	movs	r2, #60	; 0x3c
 80002f4:	2100      	movs	r1, #0
 80002f6:	4618      	mov	r0, r3
 80002f8:	f005 fcd2 	bl	8005ca0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80002fc:	2303      	movs	r3, #3
 80002fe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000300:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000304:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000306:	2300      	movs	r3, #0
 8000308:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800030a:	2301      	movs	r3, #1
 800030c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800030e:	2310      	movs	r3, #16
 8000310:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000312:	2302      	movs	r3, #2
 8000314:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000316:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800031a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800031c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000320:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000322:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000326:	4618      	mov	r0, r3
 8000328:	f002 ffc2 	bl	80032b0 <HAL_RCC_OscConfig>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000332:	f000 fc1b 	bl	8000b6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000336:	230f      	movs	r3, #15
 8000338:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800033a:	2302      	movs	r3, #2
 800033c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800033e:	2300      	movs	r3, #0
 8000340:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000342:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000346:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000348:	2300      	movs	r3, #0
 800034a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800034c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000350:	2101      	movs	r1, #1
 8000352:	4618      	mov	r0, r3
 8000354:	f003 ffea 	bl	800432c <HAL_RCC_ClockConfig>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800035e:	f000 fc05 	bl	8000b6c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 8000362:	4b0a      	ldr	r3, [pc, #40]	; (800038c <SystemClock_Config+0xc0>)
 8000364:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000366:	2300      	movs	r3, #0
 8000368:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 800036a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800036e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000370:	463b      	mov	r3, r7
 8000372:	4618      	mov	r0, r3
 8000374:	f004 f9c0 	bl	80046f8 <HAL_RCCEx_PeriphCLKConfig>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800037e:	f000 fbf5 	bl	8000b6c <Error_Handler>
  }
}
 8000382:	bf00      	nop
 8000384:	3778      	adds	r7, #120	; 0x78
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	00020020 	.word	0x00020020

08000390 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b08a      	sub	sp, #40	; 0x28
 8000394:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000396:	4b28      	ldr	r3, [pc, #160]	; (8000438 <MX_CAN_Init+0xa8>)
 8000398:	4a28      	ldr	r2, [pc, #160]	; (800043c <MX_CAN_Init+0xac>)
 800039a:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 3;
 800039c:	4b26      	ldr	r3, [pc, #152]	; (8000438 <MX_CAN_Init+0xa8>)
 800039e:	2203      	movs	r2, #3
 80003a0:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80003a2:	4b25      	ldr	r3, [pc, #148]	; (8000438 <MX_CAN_Init+0xa8>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80003a8:	4b23      	ldr	r3, [pc, #140]	; (8000438 <MX_CAN_Init+0xa8>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 80003ae:	4b22      	ldr	r3, [pc, #136]	; (8000438 <MX_CAN_Init+0xa8>)
 80003b0:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80003b4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80003b6:	4b20      	ldr	r3, [pc, #128]	; (8000438 <MX_CAN_Init+0xa8>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80003bc:	4b1e      	ldr	r3, [pc, #120]	; (8000438 <MX_CAN_Init+0xa8>)
 80003be:	2200      	movs	r2, #0
 80003c0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80003c2:	4b1d      	ldr	r3, [pc, #116]	; (8000438 <MX_CAN_Init+0xa8>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80003c8:	4b1b      	ldr	r3, [pc, #108]	; (8000438 <MX_CAN_Init+0xa8>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80003ce:	4b1a      	ldr	r3, [pc, #104]	; (8000438 <MX_CAN_Init+0xa8>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80003d4:	4b18      	ldr	r3, [pc, #96]	; (8000438 <MX_CAN_Init+0xa8>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80003da:	4b17      	ldr	r3, [pc, #92]	; (8000438 <MX_CAN_Init+0xa8>)
 80003dc:	2200      	movs	r2, #0
 80003de:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80003e0:	4815      	ldr	r0, [pc, #84]	; (8000438 <MX_CAN_Init+0xa8>)
 80003e2:	f000 fe7b 	bl	80010dc <HAL_CAN_Init>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80003ec:	f000 fbbe 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  sFilterConfig.FilterBank = 0;
 80003f0:	2300      	movs	r3, #0
 80003f2:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80003f4:	2300      	movs	r3, #0
 80003f6:	61bb      	str	r3, [r7, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80003f8:	2301      	movs	r3, #1
 80003fa:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterIdHigh = 0x100 << 5;
 80003fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000400:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIdLow = 0x0000;
 8000402:	2300      	movs	r3, #0
 8000404:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterMaskIdHigh = 0x100 << 5;
 8000406:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800040a:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterMaskIdLow = 0x0000;
 800040c:	2300      	movs	r3, #0
 800040e:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000410:	2300      	movs	r3, #0
 8000412:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterActivation = ENABLE;
 8000414:	2301      	movs	r3, #1
 8000416:	623b      	str	r3, [r7, #32]
    sFilterConfig.SlaveStartFilterBank = 14;
 8000418:	230e      	movs	r3, #14
 800041a:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 800041c:	463b      	mov	r3, r7
 800041e:	4619      	mov	r1, r3
 8000420:	4805      	ldr	r0, [pc, #20]	; (8000438 <MX_CAN_Init+0xa8>)
 8000422:	f000 ff56 	bl	80012d2 <HAL_CAN_ConfigFilter>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <MX_CAN_Init+0xa0>
    {
      Error_Handler();
 800042c:	f000 fb9e 	bl	8000b6c <Error_Handler>
    }
  /* USER CODE END CAN_Init 2 */

}
 8000430:	bf00      	nop
 8000432:	3728      	adds	r7, #40	; 0x28
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}
 8000438:	20000034 	.word	0x20000034
 800043c:	40006400 	.word	0x40006400

08000440 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000444:	4b1b      	ldr	r3, [pc, #108]	; (80004b4 <MX_I2C1_Init+0x74>)
 8000446:	4a1c      	ldr	r2, [pc, #112]	; (80004b8 <MX_I2C1_Init+0x78>)
 8000448:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800044a:	4b1a      	ldr	r3, [pc, #104]	; (80004b4 <MX_I2C1_Init+0x74>)
 800044c:	4a1b      	ldr	r2, [pc, #108]	; (80004bc <MX_I2C1_Init+0x7c>)
 800044e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000450:	4b18      	ldr	r3, [pc, #96]	; (80004b4 <MX_I2C1_Init+0x74>)
 8000452:	2200      	movs	r2, #0
 8000454:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000456:	4b17      	ldr	r3, [pc, #92]	; (80004b4 <MX_I2C1_Init+0x74>)
 8000458:	2201      	movs	r2, #1
 800045a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800045c:	4b15      	ldr	r3, [pc, #84]	; (80004b4 <MX_I2C1_Init+0x74>)
 800045e:	2200      	movs	r2, #0
 8000460:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000462:	4b14      	ldr	r3, [pc, #80]	; (80004b4 <MX_I2C1_Init+0x74>)
 8000464:	2200      	movs	r2, #0
 8000466:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000468:	4b12      	ldr	r3, [pc, #72]	; (80004b4 <MX_I2C1_Init+0x74>)
 800046a:	2200      	movs	r2, #0
 800046c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800046e:	4b11      	ldr	r3, [pc, #68]	; (80004b4 <MX_I2C1_Init+0x74>)
 8000470:	2200      	movs	r2, #0
 8000472:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000474:	4b0f      	ldr	r3, [pc, #60]	; (80004b4 <MX_I2C1_Init+0x74>)
 8000476:	2200      	movs	r2, #0
 8000478:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800047a:	480e      	ldr	r0, [pc, #56]	; (80004b4 <MX_I2C1_Init+0x74>)
 800047c:	f001 ff3b 	bl	80022f6 <HAL_I2C_Init>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000486:	f000 fb71 	bl	8000b6c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800048a:	2100      	movs	r1, #0
 800048c:	4809      	ldr	r0, [pc, #36]	; (80004b4 <MX_I2C1_Init+0x74>)
 800048e:	f002 fda5 	bl	8002fdc <HAL_I2CEx_ConfigAnalogFilter>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d001      	beq.n	800049c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000498:	f000 fb68 	bl	8000b6c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800049c:	2100      	movs	r1, #0
 800049e:	4805      	ldr	r0, [pc, #20]	; (80004b4 <MX_I2C1_Init+0x74>)
 80004a0:	f002 fde7 	bl	8003072 <HAL_I2CEx_ConfigDigitalFilter>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80004aa:	f000 fb5f 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004ae:	bf00      	nop
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	2000005c 	.word	0x2000005c
 80004b8:	40005400 	.word	0x40005400
 80004bc:	2000090e 	.word	0x2000090e

080004c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80004c4:	4b1b      	ldr	r3, [pc, #108]	; (8000534 <MX_SPI1_Init+0x74>)
 80004c6:	4a1c      	ldr	r2, [pc, #112]	; (8000538 <MX_SPI1_Init+0x78>)
 80004c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80004ca:	4b1a      	ldr	r3, [pc, #104]	; (8000534 <MX_SPI1_Init+0x74>)
 80004cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80004d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80004d2:	4b18      	ldr	r3, [pc, #96]	; (8000534 <MX_SPI1_Init+0x74>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80004d8:	4b16      	ldr	r3, [pc, #88]	; (8000534 <MX_SPI1_Init+0x74>)
 80004da:	f44f 7240 	mov.w	r2, #768	; 0x300
 80004de:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004e0:	4b14      	ldr	r3, [pc, #80]	; (8000534 <MX_SPI1_Init+0x74>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004e6:	4b13      	ldr	r3, [pc, #76]	; (8000534 <MX_SPI1_Init+0x74>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80004ec:	4b11      	ldr	r3, [pc, #68]	; (8000534 <MX_SPI1_Init+0x74>)
 80004ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004f2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80004f4:	4b0f      	ldr	r3, [pc, #60]	; (8000534 <MX_SPI1_Init+0x74>)
 80004f6:	2208      	movs	r2, #8
 80004f8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004fa:	4b0e      	ldr	r3, [pc, #56]	; (8000534 <MX_SPI1_Init+0x74>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000500:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <MX_SPI1_Init+0x74>)
 8000502:	2200      	movs	r2, #0
 8000504:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000506:	4b0b      	ldr	r3, [pc, #44]	; (8000534 <MX_SPI1_Init+0x74>)
 8000508:	2200      	movs	r2, #0
 800050a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800050c:	4b09      	ldr	r3, [pc, #36]	; (8000534 <MX_SPI1_Init+0x74>)
 800050e:	2207      	movs	r2, #7
 8000510:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000512:	4b08      	ldr	r3, [pc, #32]	; (8000534 <MX_SPI1_Init+0x74>)
 8000514:	2200      	movs	r2, #0
 8000516:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000518:	4b06      	ldr	r3, [pc, #24]	; (8000534 <MX_SPI1_Init+0x74>)
 800051a:	2208      	movs	r2, #8
 800051c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800051e:	4805      	ldr	r0, [pc, #20]	; (8000534 <MX_SPI1_Init+0x74>)
 8000520:	f004 fa9a 	bl	8004a58 <HAL_SPI_Init>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800052a:	f000 fb1f 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800052e:	bf00      	nop
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	200000b0 	.word	0x200000b0
 8000538:	40013000 	.word	0x40013000

0800053c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b08e      	sub	sp, #56	; 0x38
 8000540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000542:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	605a      	str	r2, [r3, #4]
 800054c:	609a      	str	r2, [r3, #8]
 800054e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000550:	f107 031c 	add.w	r3, r7, #28
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800055c:	463b      	mov	r3, r7
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	609a      	str	r2, [r3, #8]
 8000566:	60da      	str	r2, [r3, #12]
 8000568:	611a      	str	r2, [r3, #16]
 800056a:	615a      	str	r2, [r3, #20]
 800056c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800056e:	4b2d      	ldr	r3, [pc, #180]	; (8000624 <MX_TIM2_Init+0xe8>)
 8000570:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000574:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4800-1;
 8000576:	4b2b      	ldr	r3, [pc, #172]	; (8000624 <MX_TIM2_Init+0xe8>)
 8000578:	f241 22bf 	movw	r2, #4799	; 0x12bf
 800057c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800057e:	4b29      	ldr	r3, [pc, #164]	; (8000624 <MX_TIM2_Init+0xe8>)
 8000580:	2200      	movs	r2, #0
 8000582:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200-1;
 8000584:	4b27      	ldr	r3, [pc, #156]	; (8000624 <MX_TIM2_Init+0xe8>)
 8000586:	22c7      	movs	r2, #199	; 0xc7
 8000588:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800058a:	4b26      	ldr	r3, [pc, #152]	; (8000624 <MX_TIM2_Init+0xe8>)
 800058c:	2200      	movs	r2, #0
 800058e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000590:	4b24      	ldr	r3, [pc, #144]	; (8000624 <MX_TIM2_Init+0xe8>)
 8000592:	2200      	movs	r2, #0
 8000594:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000596:	4823      	ldr	r0, [pc, #140]	; (8000624 <MX_TIM2_Init+0xe8>)
 8000598:	f004 fb09 	bl	8004bae <HAL_TIM_Base_Init>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80005a2:	f000 fae3 	bl	8000b6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005aa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005b0:	4619      	mov	r1, r3
 80005b2:	481c      	ldr	r0, [pc, #112]	; (8000624 <MX_TIM2_Init+0xe8>)
 80005b4:	f004 fdc8 	bl	8005148 <HAL_TIM_ConfigClockSource>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80005be:	f000 fad5 	bl	8000b6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80005c2:	4818      	ldr	r0, [pc, #96]	; (8000624 <MX_TIM2_Init+0xe8>)
 80005c4:	f004 fb4a 	bl	8004c5c <HAL_TIM_PWM_Init>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80005ce:	f000 facd 	bl	8000b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005d2:	2300      	movs	r3, #0
 80005d4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005d6:	2300      	movs	r3, #0
 80005d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005da:	f107 031c 	add.w	r3, r7, #28
 80005de:	4619      	mov	r1, r3
 80005e0:	4810      	ldr	r0, [pc, #64]	; (8000624 <MX_TIM2_Init+0xe8>)
 80005e2:	f005 faa1 	bl	8005b28 <HAL_TIMEx_MasterConfigSynchronization>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80005ec:	f000 fabe 	bl	8000b6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005f0:	2360      	movs	r3, #96	; 0x60
 80005f2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005f8:	2300      	movs	r3, #0
 80005fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005fc:	2300      	movs	r3, #0
 80005fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000600:	463b      	mov	r3, r7
 8000602:	2200      	movs	r2, #0
 8000604:	4619      	mov	r1, r3
 8000606:	4807      	ldr	r0, [pc, #28]	; (8000624 <MX_TIM2_Init+0xe8>)
 8000608:	f004 fc8a 	bl	8004f20 <HAL_TIM_PWM_ConfigChannel>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000612:	f000 faab 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000616:	4803      	ldr	r0, [pc, #12]	; (8000624 <MX_TIM2_Init+0xe8>)
 8000618:	f000 fbda 	bl	8000dd0 <HAL_TIM_MspPostInit>

}
 800061c:	bf00      	nop
 800061e:	3738      	adds	r7, #56	; 0x38
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000114 	.word	0x20000114

08000628 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800062c:	4b0d      	ldr	r3, [pc, #52]	; (8000664 <MX_USB_PCD_Init+0x3c>)
 800062e:	4a0e      	ldr	r2, [pc, #56]	; (8000668 <MX_USB_PCD_Init+0x40>)
 8000630:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000632:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <MX_USB_PCD_Init+0x3c>)
 8000634:	2208      	movs	r2, #8
 8000636:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000638:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <MX_USB_PCD_Init+0x3c>)
 800063a:	2202      	movs	r2, #2
 800063c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800063e:	4b09      	ldr	r3, [pc, #36]	; (8000664 <MX_USB_PCD_Init+0x3c>)
 8000640:	2202      	movs	r2, #2
 8000642:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000644:	4b07      	ldr	r3, [pc, #28]	; (8000664 <MX_USB_PCD_Init+0x3c>)
 8000646:	2200      	movs	r2, #0
 8000648:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800064a:	4b06      	ldr	r3, [pc, #24]	; (8000664 <MX_USB_PCD_Init+0x3c>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000650:	4804      	ldr	r0, [pc, #16]	; (8000664 <MX_USB_PCD_Init+0x3c>)
 8000652:	f002 fd5a 	bl	800310a <HAL_PCD_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 800065c:	f000 fa86 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000160 	.word	0x20000160
 8000668:	40005c00 	.word	0x40005c00

0800066c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b08c      	sub	sp, #48	; 0x30
 8000670:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]
 8000680:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000682:	4b42      	ldr	r3, [pc, #264]	; (800078c <MX_GPIO_Init+0x120>)
 8000684:	695b      	ldr	r3, [r3, #20]
 8000686:	4a41      	ldr	r2, [pc, #260]	; (800078c <MX_GPIO_Init+0x120>)
 8000688:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800068c:	6153      	str	r3, [r2, #20]
 800068e:	4b3f      	ldr	r3, [pc, #252]	; (800078c <MX_GPIO_Init+0x120>)
 8000690:	695b      	ldr	r3, [r3, #20]
 8000692:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000696:	61bb      	str	r3, [r7, #24]
 8000698:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800069a:	4b3c      	ldr	r3, [pc, #240]	; (800078c <MX_GPIO_Init+0x120>)
 800069c:	695b      	ldr	r3, [r3, #20]
 800069e:	4a3b      	ldr	r2, [pc, #236]	; (800078c <MX_GPIO_Init+0x120>)
 80006a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80006a4:	6153      	str	r3, [r2, #20]
 80006a6:	4b39      	ldr	r3, [pc, #228]	; (800078c <MX_GPIO_Init+0x120>)
 80006a8:	695b      	ldr	r3, [r3, #20]
 80006aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80006ae:	617b      	str	r3, [r7, #20]
 80006b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006b2:	4b36      	ldr	r3, [pc, #216]	; (800078c <MX_GPIO_Init+0x120>)
 80006b4:	695b      	ldr	r3, [r3, #20]
 80006b6:	4a35      	ldr	r2, [pc, #212]	; (800078c <MX_GPIO_Init+0x120>)
 80006b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006bc:	6153      	str	r3, [r2, #20]
 80006be:	4b33      	ldr	r3, [pc, #204]	; (800078c <MX_GPIO_Init+0x120>)
 80006c0:	695b      	ldr	r3, [r3, #20]
 80006c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006c6:	613b      	str	r3, [r7, #16]
 80006c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ca:	4b30      	ldr	r3, [pc, #192]	; (800078c <MX_GPIO_Init+0x120>)
 80006cc:	695b      	ldr	r3, [r3, #20]
 80006ce:	4a2f      	ldr	r2, [pc, #188]	; (800078c <MX_GPIO_Init+0x120>)
 80006d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006d4:	6153      	str	r3, [r2, #20]
 80006d6:	4b2d      	ldr	r3, [pc, #180]	; (800078c <MX_GPIO_Init+0x120>)
 80006d8:	695b      	ldr	r3, [r3, #20]
 80006da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006e2:	4b2a      	ldr	r3, [pc, #168]	; (800078c <MX_GPIO_Init+0x120>)
 80006e4:	695b      	ldr	r3, [r3, #20]
 80006e6:	4a29      	ldr	r2, [pc, #164]	; (800078c <MX_GPIO_Init+0x120>)
 80006e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006ec:	6153      	str	r3, [r2, #20]
 80006ee:	4b27      	ldr	r3, [pc, #156]	; (800078c <MX_GPIO_Init+0x120>)
 80006f0:	695b      	ldr	r3, [r3, #20]
 80006f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fa:	4b24      	ldr	r3, [pc, #144]	; (800078c <MX_GPIO_Init+0x120>)
 80006fc:	695b      	ldr	r3, [r3, #20]
 80006fe:	4a23      	ldr	r2, [pc, #140]	; (800078c <MX_GPIO_Init+0x120>)
 8000700:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000704:	6153      	str	r3, [r2, #20]
 8000706:	4b21      	ldr	r3, [pc, #132]	; (800078c <MX_GPIO_Init+0x120>)
 8000708:	695b      	ldr	r3, [r3, #20]
 800070a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000712:	2200      	movs	r2, #0
 8000714:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000718:	481d      	ldr	r0, [pc, #116]	; (8000790 <MX_GPIO_Init+0x124>)
 800071a:	f001 fdb1 	bl	8002280 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT2_Pin;
 800071e:	2336      	movs	r3, #54	; 0x36
 8000720:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000722:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000726:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800072c:	f107 031c 	add.w	r3, r7, #28
 8000730:	4619      	mov	r1, r3
 8000732:	4817      	ldr	r0, [pc, #92]	; (8000790 <MX_GPIO_Init+0x124>)
 8000734:	f001 fc2a 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000738:	f64f 7308 	movw	r3, #65288	; 0xff08
 800073c:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073e:	2301      	movs	r3, #1
 8000740:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000746:	2300      	movs	r3, #0
 8000748:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800074a:	f107 031c 	add.w	r3, r7, #28
 800074e:	4619      	mov	r1, r3
 8000750:	480f      	ldr	r0, [pc, #60]	; (8000790 <MX_GPIO_Init+0x124>)
 8000752:	f001 fc1b 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000756:	2301      	movs	r3, #1
 8000758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800075a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800075e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000764:	f107 031c 	add.w	r3, r7, #28
 8000768:	4619      	mov	r1, r3
 800076a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800076e:	f001 fc0d 	bl	8001f8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000772:	2200      	movs	r2, #0
 8000774:	2100      	movs	r1, #0
 8000776:	2006      	movs	r0, #6
 8000778:	f001 fbd1 	bl	8001f1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800077c:	2006      	movs	r0, #6
 800077e:	f001 fbea 	bl	8001f56 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000782:	bf00      	nop
 8000784:	3730      	adds	r7, #48	; 0x30
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40021000 	.word	0x40021000
 8000790:	48001000 	.word	0x48001000

08000794 <configuration_set>:

/* USER CODE BEGIN 4 */


void configuration_set(int configur)      // configuration setting for lidar. it provide different mode of detection
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af04      	add	r7, sp, #16
 800079a:	6078      	str	r0, [r7, #4]

	cmd[0] = 0x04;
 800079c:	4ba6      	ldr	r3, [pc, #664]	; (8000a38 <configuration_set+0x2a4>)
 800079e:	2204      	movs	r2, #4
 80007a0:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1,LIDAR_ADD ,0x00,1,cmd,1,0x100);
 80007a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007a6:	9302      	str	r3, [sp, #8]
 80007a8:	2301      	movs	r3, #1
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	4ba2      	ldr	r3, [pc, #648]	; (8000a38 <configuration_set+0x2a4>)
 80007ae:	9300      	str	r3, [sp, #0]
 80007b0:	2301      	movs	r3, #1
 80007b2:	2200      	movs	r2, #0
 80007b4:	21c4      	movs	r1, #196	; 0xc4
 80007b6:	48a1      	ldr	r0, [pc, #644]	; (8000a3c <configuration_set+0x2a8>)
 80007b8:	f002 f816 	bl	80027e8 <HAL_I2C_Mem_Write>
	switch(configur)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2b05      	cmp	r3, #5
 80007c0:	f200 8136 	bhi.w	8000a30 <configuration_set+0x29c>
 80007c4:	a201      	add	r2, pc, #4	; (adr r2, 80007cc <configuration_set+0x38>)
 80007c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007ca:	bf00      	nop
 80007cc:	080007e5 	.word	0x080007e5
 80007d0:	08000847 	.word	0x08000847
 80007d4:	080008a9 	.word	0x080008a9
 80007d8:	0800090b 	.word	0x0800090b
 80007dc:	0800096d 	.word	0x0800096d
 80007e0:	080009cf 	.word	0x080009cf
	{
	case 0://default mode , balance mode
		cmd[0]=0x80;
 80007e4:	4b94      	ldr	r3, [pc, #592]	; (8000a38 <configuration_set+0x2a4>)
 80007e6:	2280      	movs	r2, #128	; 0x80
 80007e8:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1,LIDAR_ADD ,0x02,1,cmd,1,0x1000);
 80007ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ee:	9302      	str	r3, [sp, #8]
 80007f0:	2301      	movs	r3, #1
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4b90      	ldr	r3, [pc, #576]	; (8000a38 <configuration_set+0x2a4>)
 80007f6:	9300      	str	r3, [sp, #0]
 80007f8:	2301      	movs	r3, #1
 80007fa:	2202      	movs	r2, #2
 80007fc:	21c4      	movs	r1, #196	; 0xc4
 80007fe:	488f      	ldr	r0, [pc, #572]	; (8000a3c <configuration_set+0x2a8>)
 8000800:	f001 fff2 	bl	80027e8 <HAL_I2C_Mem_Write>
		cmd[0]=0x04;
 8000804:	4b8c      	ldr	r3, [pc, #560]	; (8000a38 <configuration_set+0x2a4>)
 8000806:	2204      	movs	r2, #4
 8000808:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1,LIDAR_ADD ,0x04,1,cmd,1,0x1000);
 800080a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800080e:	9302      	str	r3, [sp, #8]
 8000810:	2301      	movs	r3, #1
 8000812:	9301      	str	r3, [sp, #4]
 8000814:	4b88      	ldr	r3, [pc, #544]	; (8000a38 <configuration_set+0x2a4>)
 8000816:	9300      	str	r3, [sp, #0]
 8000818:	2301      	movs	r3, #1
 800081a:	2204      	movs	r2, #4
 800081c:	21c4      	movs	r1, #196	; 0xc4
 800081e:	4887      	ldr	r0, [pc, #540]	; (8000a3c <configuration_set+0x2a8>)
 8000820:	f001 ffe2 	bl	80027e8 <HAL_I2C_Mem_Write>
		cmd[0]=0x00;
 8000824:	4b84      	ldr	r3, [pc, #528]	; (8000a38 <configuration_set+0x2a4>)
 8000826:	2200      	movs	r2, #0
 8000828:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1,LIDAR_ADD ,0x1c,1,cmd,1,0x1000);
 800082a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800082e:	9302      	str	r3, [sp, #8]
 8000830:	2301      	movs	r3, #1
 8000832:	9301      	str	r3, [sp, #4]
 8000834:	4b80      	ldr	r3, [pc, #512]	; (8000a38 <configuration_set+0x2a4>)
 8000836:	9300      	str	r3, [sp, #0]
 8000838:	2301      	movs	r3, #1
 800083a:	221c      	movs	r2, #28
 800083c:	21c4      	movs	r1, #196	; 0xc4
 800083e:	487f      	ldr	r0, [pc, #508]	; (8000a3c <configuration_set+0x2a8>)
 8000840:	f001 ffd2 	bl	80027e8 <HAL_I2C_Mem_Write>
		break;
 8000844:	e0f4      	b.n	8000a30 <configuration_set+0x29c>

	case 1://short range, high speed
		cmd[0]=0x1d;
 8000846:	4b7c      	ldr	r3, [pc, #496]	; (8000a38 <configuration_set+0x2a4>)
 8000848:	221d      	movs	r2, #29
 800084a:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1,LIDAR_ADD ,0x02,1,cmd,1,0x1000);
 800084c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000850:	9302      	str	r3, [sp, #8]
 8000852:	2301      	movs	r3, #1
 8000854:	9301      	str	r3, [sp, #4]
 8000856:	4b78      	ldr	r3, [pc, #480]	; (8000a38 <configuration_set+0x2a4>)
 8000858:	9300      	str	r3, [sp, #0]
 800085a:	2301      	movs	r3, #1
 800085c:	2202      	movs	r2, #2
 800085e:	21c4      	movs	r1, #196	; 0xc4
 8000860:	4876      	ldr	r0, [pc, #472]	; (8000a3c <configuration_set+0x2a8>)
 8000862:	f001 ffc1 	bl	80027e8 <HAL_I2C_Mem_Write>
		cmd[0]=0x08;
 8000866:	4b74      	ldr	r3, [pc, #464]	; (8000a38 <configuration_set+0x2a4>)
 8000868:	2208      	movs	r2, #8
 800086a:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1,LIDAR_ADD ,0x04,1,cmd,1,0x1000);
 800086c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000870:	9302      	str	r3, [sp, #8]
 8000872:	2301      	movs	r3, #1
 8000874:	9301      	str	r3, [sp, #4]
 8000876:	4b70      	ldr	r3, [pc, #448]	; (8000a38 <configuration_set+0x2a4>)
 8000878:	9300      	str	r3, [sp, #0]
 800087a:	2301      	movs	r3, #1
 800087c:	2204      	movs	r2, #4
 800087e:	21c4      	movs	r1, #196	; 0xc4
 8000880:	486e      	ldr	r0, [pc, #440]	; (8000a3c <configuration_set+0x2a8>)
 8000882:	f001 ffb1 	bl	80027e8 <HAL_I2C_Mem_Write>
		cmd[0]=0x00;
 8000886:	4b6c      	ldr	r3, [pc, #432]	; (8000a38 <configuration_set+0x2a4>)
 8000888:	2200      	movs	r2, #0
 800088a:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1,LIDAR_ADD ,0x1c,1,cmd,1,0x1000);
 800088c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000890:	9302      	str	r3, [sp, #8]
 8000892:	2301      	movs	r3, #1
 8000894:	9301      	str	r3, [sp, #4]
 8000896:	4b68      	ldr	r3, [pc, #416]	; (8000a38 <configuration_set+0x2a4>)
 8000898:	9300      	str	r3, [sp, #0]
 800089a:	2301      	movs	r3, #1
 800089c:	221c      	movs	r2, #28
 800089e:	21c4      	movs	r1, #196	; 0xc4
 80008a0:	4866      	ldr	r0, [pc, #408]	; (8000a3c <configuration_set+0x2a8>)
 80008a2:	f001 ffa1 	bl	80027e8 <HAL_I2C_Mem_Write>
		break;
 80008a6:	e0c3      	b.n	8000a30 <configuration_set+0x29c>

	case 2://default range, higher speed short range
		cmd[0]=0x80;
 80008a8:	4b63      	ldr	r3, [pc, #396]	; (8000a38 <configuration_set+0x2a4>)
 80008aa:	2280      	movs	r2, #128	; 0x80
 80008ac:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1,LIDAR_ADD ,0x02,1,cmd,1,0x1000);
 80008ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b2:	9302      	str	r3, [sp, #8]
 80008b4:	2301      	movs	r3, #1
 80008b6:	9301      	str	r3, [sp, #4]
 80008b8:	4b5f      	ldr	r3, [pc, #380]	; (8000a38 <configuration_set+0x2a4>)
 80008ba:	9300      	str	r3, [sp, #0]
 80008bc:	2301      	movs	r3, #1
 80008be:	2202      	movs	r2, #2
 80008c0:	21c4      	movs	r1, #196	; 0xc4
 80008c2:	485e      	ldr	r0, [pc, #376]	; (8000a3c <configuration_set+0x2a8>)
 80008c4:	f001 ff90 	bl	80027e8 <HAL_I2C_Mem_Write>
		cmd[0]=0x08;
 80008c8:	4b5b      	ldr	r3, [pc, #364]	; (8000a38 <configuration_set+0x2a4>)
 80008ca:	2208      	movs	r2, #8
 80008cc:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1,LIDAR_ADD ,0x04,1,cmd,1,0x1000);
 80008ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d2:	9302      	str	r3, [sp, #8]
 80008d4:	2301      	movs	r3, #1
 80008d6:	9301      	str	r3, [sp, #4]
 80008d8:	4b57      	ldr	r3, [pc, #348]	; (8000a38 <configuration_set+0x2a4>)
 80008da:	9300      	str	r3, [sp, #0]
 80008dc:	2301      	movs	r3, #1
 80008de:	2204      	movs	r2, #4
 80008e0:	21c4      	movs	r1, #196	; 0xc4
 80008e2:	4856      	ldr	r0, [pc, #344]	; (8000a3c <configuration_set+0x2a8>)
 80008e4:	f001 ff80 	bl	80027e8 <HAL_I2C_Mem_Write>
		cmd[0]=0x00;
 80008e8:	4b53      	ldr	r3, [pc, #332]	; (8000a38 <configuration_set+0x2a4>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1,LIDAR_ADD ,0x1c,1,cmd,1,0x1000);
 80008ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f2:	9302      	str	r3, [sp, #8]
 80008f4:	2301      	movs	r3, #1
 80008f6:	9301      	str	r3, [sp, #4]
 80008f8:	4b4f      	ldr	r3, [pc, #316]	; (8000a38 <configuration_set+0x2a4>)
 80008fa:	9300      	str	r3, [sp, #0]
 80008fc:	2301      	movs	r3, #1
 80008fe:	221c      	movs	r2, #28
 8000900:	21c4      	movs	r1, #196	; 0xc4
 8000902:	484e      	ldr	r0, [pc, #312]	; (8000a3c <configuration_set+0x2a8>)
 8000904:	f001 ff70 	bl	80027e8 <HAL_I2C_Mem_Write>
		break;
 8000908:	e092      	b.n	8000a30 <configuration_set+0x29c>


	case 3://maximum Range
		cmd[0]=0xff;
 800090a:	4b4b      	ldr	r3, [pc, #300]	; (8000a38 <configuration_set+0x2a4>)
 800090c:	22ff      	movs	r2, #255	; 0xff
 800090e:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1,LIDAR_ADD ,0x02,1,cmd,1,0x1000);
 8000910:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000914:	9302      	str	r3, [sp, #8]
 8000916:	2301      	movs	r3, #1
 8000918:	9301      	str	r3, [sp, #4]
 800091a:	4b47      	ldr	r3, [pc, #284]	; (8000a38 <configuration_set+0x2a4>)
 800091c:	9300      	str	r3, [sp, #0]
 800091e:	2301      	movs	r3, #1
 8000920:	2202      	movs	r2, #2
 8000922:	21c4      	movs	r1, #196	; 0xc4
 8000924:	4845      	ldr	r0, [pc, #276]	; (8000a3c <configuration_set+0x2a8>)
 8000926:	f001 ff5f 	bl	80027e8 <HAL_I2C_Mem_Write>
		cmd[0]=0x08;
 800092a:	4b43      	ldr	r3, [pc, #268]	; (8000a38 <configuration_set+0x2a4>)
 800092c:	2208      	movs	r2, #8
 800092e:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1,LIDAR_ADD ,0x04,1,cmd,1,0x1000);
 8000930:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000934:	9302      	str	r3, [sp, #8]
 8000936:	2301      	movs	r3, #1
 8000938:	9301      	str	r3, [sp, #4]
 800093a:	4b3f      	ldr	r3, [pc, #252]	; (8000a38 <configuration_set+0x2a4>)
 800093c:	9300      	str	r3, [sp, #0]
 800093e:	2301      	movs	r3, #1
 8000940:	2204      	movs	r2, #4
 8000942:	21c4      	movs	r1, #196	; 0xc4
 8000944:	483d      	ldr	r0, [pc, #244]	; (8000a3c <configuration_set+0x2a8>)
 8000946:	f001 ff4f 	bl	80027e8 <HAL_I2C_Mem_Write>
		cmd[0]=0x00;
 800094a:	4b3b      	ldr	r3, [pc, #236]	; (8000a38 <configuration_set+0x2a4>)
 800094c:	2200      	movs	r2, #0
 800094e:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1,LIDAR_ADD ,0x1c,1,cmd,1,0x1000);
 8000950:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000954:	9302      	str	r3, [sp, #8]
 8000956:	2301      	movs	r3, #1
 8000958:	9301      	str	r3, [sp, #4]
 800095a:	4b37      	ldr	r3, [pc, #220]	; (8000a38 <configuration_set+0x2a4>)
 800095c:	9300      	str	r3, [sp, #0]
 800095e:	2301      	movs	r3, #1
 8000960:	221c      	movs	r2, #28
 8000962:	21c4      	movs	r1, #196	; 0xc4
 8000964:	4835      	ldr	r0, [pc, #212]	; (8000a3c <configuration_set+0x2a8>)
 8000966:	f001 ff3f 	bl	80027e8 <HAL_I2C_Mem_Write>
		break;
 800096a:	e061      	b.n	8000a30 <configuration_set+0x29c>

	case 4://high sensitivity detection, high  measurement
		cmd[0]=0x80;
 800096c:	4b32      	ldr	r3, [pc, #200]	; (8000a38 <configuration_set+0x2a4>)
 800096e:	2280      	movs	r2, #128	; 0x80
 8000970:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1,LIDAR_ADD ,0x02,1,cmd,1,0x1000);
 8000972:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000976:	9302      	str	r3, [sp, #8]
 8000978:	2301      	movs	r3, #1
 800097a:	9301      	str	r3, [sp, #4]
 800097c:	4b2e      	ldr	r3, [pc, #184]	; (8000a38 <configuration_set+0x2a4>)
 800097e:	9300      	str	r3, [sp, #0]
 8000980:	2301      	movs	r3, #1
 8000982:	2202      	movs	r2, #2
 8000984:	21c4      	movs	r1, #196	; 0xc4
 8000986:	482d      	ldr	r0, [pc, #180]	; (8000a3c <configuration_set+0x2a8>)
 8000988:	f001 ff2e 	bl	80027e8 <HAL_I2C_Mem_Write>
		cmd[0]=0x08;
 800098c:	4b2a      	ldr	r3, [pc, #168]	; (8000a38 <configuration_set+0x2a4>)
 800098e:	2208      	movs	r2, #8
 8000990:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1,LIDAR_ADD ,0x04,1,cmd,1,0x1000);
 8000992:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000996:	9302      	str	r3, [sp, #8]
 8000998:	2301      	movs	r3, #1
 800099a:	9301      	str	r3, [sp, #4]
 800099c:	4b26      	ldr	r3, [pc, #152]	; (8000a38 <configuration_set+0x2a4>)
 800099e:	9300      	str	r3, [sp, #0]
 80009a0:	2301      	movs	r3, #1
 80009a2:	2204      	movs	r2, #4
 80009a4:	21c4      	movs	r1, #196	; 0xc4
 80009a6:	4825      	ldr	r0, [pc, #148]	; (8000a3c <configuration_set+0x2a8>)
 80009a8:	f001 ff1e 	bl	80027e8 <HAL_I2C_Mem_Write>
		cmd[0]=0x80;
 80009ac:	4b22      	ldr	r3, [pc, #136]	; (8000a38 <configuration_set+0x2a4>)
 80009ae:	2280      	movs	r2, #128	; 0x80
 80009b0:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1,LIDAR_ADD ,0x1c,1,cmd,1,0x1000);
 80009b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b6:	9302      	str	r3, [sp, #8]
 80009b8:	2301      	movs	r3, #1
 80009ba:	9301      	str	r3, [sp, #4]
 80009bc:	4b1e      	ldr	r3, [pc, #120]	; (8000a38 <configuration_set+0x2a4>)
 80009be:	9300      	str	r3, [sp, #0]
 80009c0:	2301      	movs	r3, #1
 80009c2:	221c      	movs	r2, #28
 80009c4:	21c4      	movs	r1, #196	; 0xc4
 80009c6:	481d      	ldr	r0, [pc, #116]	; (8000a3c <configuration_set+0x2a8>)
 80009c8:	f001 ff0e 	bl	80027e8 <HAL_I2C_Mem_Write>
		break;
 80009cc:	e030      	b.n	8000a30 <configuration_set+0x29c>

	case 5://low sensitivity detection , low  measurement
		cmd[0]=0x80;
 80009ce:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <configuration_set+0x2a4>)
 80009d0:	2280      	movs	r2, #128	; 0x80
 80009d2:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1,LIDAR_ADD ,0x02,1,cmd,1,0x1000);
 80009d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d8:	9302      	str	r3, [sp, #8]
 80009da:	2301      	movs	r3, #1
 80009dc:	9301      	str	r3, [sp, #4]
 80009de:	4b16      	ldr	r3, [pc, #88]	; (8000a38 <configuration_set+0x2a4>)
 80009e0:	9300      	str	r3, [sp, #0]
 80009e2:	2301      	movs	r3, #1
 80009e4:	2202      	movs	r2, #2
 80009e6:	21c4      	movs	r1, #196	; 0xc4
 80009e8:	4814      	ldr	r0, [pc, #80]	; (8000a3c <configuration_set+0x2a8>)
 80009ea:	f001 fefd 	bl	80027e8 <HAL_I2C_Mem_Write>
		cmd[0]=0x08;
 80009ee:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <configuration_set+0x2a4>)
 80009f0:	2208      	movs	r2, #8
 80009f2:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1,LIDAR_ADD ,0x04,1,cmd,1,0x1000);
 80009f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009f8:	9302      	str	r3, [sp, #8]
 80009fa:	2301      	movs	r3, #1
 80009fc:	9301      	str	r3, [sp, #4]
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <configuration_set+0x2a4>)
 8000a00:	9300      	str	r3, [sp, #0]
 8000a02:	2301      	movs	r3, #1
 8000a04:	2204      	movs	r2, #4
 8000a06:	21c4      	movs	r1, #196	; 0xc4
 8000a08:	480c      	ldr	r0, [pc, #48]	; (8000a3c <configuration_set+0x2a8>)
 8000a0a:	f001 feed 	bl	80027e8 <HAL_I2C_Mem_Write>
		cmd[0]=0xb0;
 8000a0e:	4b0a      	ldr	r3, [pc, #40]	; (8000a38 <configuration_set+0x2a4>)
 8000a10:	22b0      	movs	r2, #176	; 0xb0
 8000a12:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1,LIDAR_ADD ,0x1c,1,cmd,1,0x1000);
 8000a14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a18:	9302      	str	r3, [sp, #8]
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	9301      	str	r3, [sp, #4]
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <configuration_set+0x2a4>)
 8000a20:	9300      	str	r3, [sp, #0]
 8000a22:	2301      	movs	r3, #1
 8000a24:	221c      	movs	r2, #28
 8000a26:	21c4      	movs	r1, #196	; 0xc4
 8000a28:	4804      	ldr	r0, [pc, #16]	; (8000a3c <configuration_set+0x2a8>)
 8000a2a:	f001 fedd 	bl	80027e8 <HAL_I2C_Mem_Write>
		break;
 8000a2e:	bf00      	nop
	}
}
 8000a30:	bf00      	nop
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000030 	.word	0x20000030
 8000a3c:	2000005c 	.word	0x2000005c

08000a40 <Get_distance>:

uint16_t Get_distance()     // function to get distance
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af04      	add	r7, sp, #16
	cmd[0]=0x04;
 8000a46:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <Get_distance+0x68>)
 8000a48:	2204      	movs	r2, #4
 8000a4a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1,LIDAR_ADD ,0x00,1,cmd,1,100);
 8000a4c:	2364      	movs	r3, #100	; 0x64
 8000a4e:	9302      	str	r3, [sp, #8]
 8000a50:	2301      	movs	r3, #1
 8000a52:	9301      	str	r3, [sp, #4]
 8000a54:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <Get_distance+0x68>)
 8000a56:	9300      	str	r3, [sp, #0]
 8000a58:	2301      	movs	r3, #1
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	21c4      	movs	r1, #196	; 0xc4
 8000a5e:	4813      	ldr	r0, [pc, #76]	; (8000aac <Get_distance+0x6c>)
 8000a60:	f001 fec2 	bl	80027e8 <HAL_I2C_Mem_Write>
	cmd[0]=0x8f;
 8000a64:	4b10      	ldr	r3, [pc, #64]	; (8000aa8 <Get_distance+0x68>)
 8000a66:	228f      	movs	r2, #143	; 0x8f
 8000a68:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1,LIDAR_ADD,cmd,1,100);
 8000a6a:	2364      	movs	r3, #100	; 0x64
 8000a6c:	9300      	str	r3, [sp, #0]
 8000a6e:	2301      	movs	r3, #1
 8000a70:	4a0d      	ldr	r2, [pc, #52]	; (8000aa8 <Get_distance+0x68>)
 8000a72:	21c4      	movs	r1, #196	; 0xc4
 8000a74:	480d      	ldr	r0, [pc, #52]	; (8000aac <Get_distance+0x6c>)
 8000a76:	f001 fccd 	bl	8002414 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1,LIDAR_ADD,data,2,100);
 8000a7a:	2364      	movs	r3, #100	; 0x64
 8000a7c:	9300      	str	r3, [sp, #0]
 8000a7e:	2302      	movs	r3, #2
 8000a80:	4a0b      	ldr	r2, [pc, #44]	; (8000ab0 <Get_distance+0x70>)
 8000a82:	21c4      	movs	r1, #196	; 0xc4
 8000a84:	4809      	ldr	r0, [pc, #36]	; (8000aac <Get_distance+0x6c>)
 8000a86:	f001 fdb9 	bl	80025fc <HAL_I2C_Master_Receive>
	uint16_t m_distance = (data[0]<<8)|(data[1]);
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <Get_distance+0x70>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	021b      	lsls	r3, r3, #8
 8000a90:	b21a      	sxth	r2, r3
 8000a92:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <Get_distance+0x70>)
 8000a94:	785b      	ldrb	r3, [r3, #1]
 8000a96:	b21b      	sxth	r3, r3
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	b21b      	sxth	r3, r3
 8000a9c:	80fb      	strh	r3, [r7, #6]
	return m_distance ;
 8000a9e:	88fb      	ldrh	r3, [r7, #6]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000030 	.word	0x20000030
 8000aac:	2000005c 	.word	0x2000005c
 8000ab0:	20000000 	.word	0x20000000

08000ab4 <one_iteration>:


void one_iteration(uint8_t angle){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	71fb      	strb	r3, [r7, #7]
	htim2.Instance->CCR1 = angle;
 8000abe:	4b22      	ldr	r3, [pc, #136]	; (8000b48 <one_iteration+0x94>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	79fa      	ldrb	r2, [r7, #7]
 8000ac4:	635a      	str	r2, [r3, #52]	; 0x34
	distance = Get_distance();
 8000ac6:	f7ff ffbb 	bl	8000a40 <Get_distance>
 8000aca:	4603      	mov	r3, r0
 8000acc:	461a      	mov	r2, r3
 8000ace:	4b1f      	ldr	r3, [pc, #124]	; (8000b4c <one_iteration+0x98>)
 8000ad0:	801a      	strh	r2, [r3, #0]

	txHeader.DLC = 3;
 8000ad2:	4b1f      	ldr	r3, [pc, #124]	; (8000b50 <one_iteration+0x9c>)
 8000ad4:	2203      	movs	r2, #3
 8000ad6:	611a      	str	r2, [r3, #16]
	txHeader.IDE = CAN_ID_STD;
 8000ad8:	4b1d      	ldr	r3, [pc, #116]	; (8000b50 <one_iteration+0x9c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 8000ade:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <one_iteration+0x9c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	60da      	str	r2, [r3, #12]
	txHeader.StdId = 0x101;
 8000ae4:	4b1a      	ldr	r3, [pc, #104]	; (8000b50 <one_iteration+0x9c>)
 8000ae6:	f240 1201 	movw	r2, #257	; 0x101
 8000aea:	601a      	str	r2, [r3, #0]
	txHeader.TransmitGlobalTime = DISABLE;
 8000aec:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <one_iteration+0x9c>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	751a      	strb	r2, [r3, #20]
	TxData[0] = (uint8_t)(angle - lower_bound);
 8000af2:	4b18      	ldr	r3, [pc, #96]	; (8000b54 <one_iteration+0xa0>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	79fa      	ldrb	r2, [r7, #7]
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	4b16      	ldr	r3, [pc, #88]	; (8000b58 <one_iteration+0xa4>)
 8000afe:	701a      	strb	r2, [r3, #0]
	TxData[1] = (uint8_t)(distance>>8);
 8000b00:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <one_iteration+0x98>)
 8000b02:	881b      	ldrh	r3, [r3, #0]
 8000b04:	0a1b      	lsrs	r3, r3, #8
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <one_iteration+0xa4>)
 8000b0c:	705a      	strb	r2, [r3, #1]
	TxData[2] = (uint8_t)(distance & 0x00FF);
 8000b0e:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <one_iteration+0x98>)
 8000b10:	881b      	ldrh	r3, [r3, #0]
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <one_iteration+0xa4>)
 8000b16:	709a      	strb	r2, [r3, #2]
	if(HAL_CAN_AddTxMessage(&hcan, &txHeader, TxData, &mailbox) != HAL_OK){
 8000b18:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <one_iteration+0xa8>)
 8000b1a:	4a0f      	ldr	r2, [pc, #60]	; (8000b58 <one_iteration+0xa4>)
 8000b1c:	490c      	ldr	r1, [pc, #48]	; (8000b50 <one_iteration+0x9c>)
 8000b1e:	4810      	ldr	r0, [pc, #64]	; (8000b60 <one_iteration+0xac>)
 8000b20:	f000 fce5 	bl	80014ee <HAL_CAN_AddTxMessage>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d005      	beq.n	8000b36 <one_iteration+0x82>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b30:	480c      	ldr	r0, [pc, #48]	; (8000b64 <one_iteration+0xb0>)
 8000b32:	f001 fba5 	bl	8002280 <HAL_GPIO_WritePin>
	}

	HAL_Delay(universal_delay);
 8000b36:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <one_iteration+0xb4>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f000 faaa 	bl	8001094 <HAL_Delay>
}
 8000b40:	bf00      	nop
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20000114 	.word	0x20000114
 8000b4c:	20000490 	.word	0x20000490
 8000b50:	2000044c 	.word	0x2000044c
 8000b54:	20000003 	.word	0x20000003
 8000b58:	20000480 	.word	0x20000480
 8000b5c:	2000048c 	.word	0x2000048c
 8000b60:	20000034 	.word	0x20000034
 8000b64:	48001000 	.word	0x48001000
 8000b68:	20000004 	.word	0x20000004

08000b6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b70:	b672      	cpsid	i
}
 8000b72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <Error_Handler+0x8>
	...

08000b78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7e:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <HAL_MspInit+0x44>)
 8000b80:	699b      	ldr	r3, [r3, #24]
 8000b82:	4a0e      	ldr	r2, [pc, #56]	; (8000bbc <HAL_MspInit+0x44>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6193      	str	r3, [r2, #24]
 8000b8a:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <HAL_MspInit+0x44>)
 8000b8c:	699b      	ldr	r3, [r3, #24]
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b96:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <HAL_MspInit+0x44>)
 8000b98:	69db      	ldr	r3, [r3, #28]
 8000b9a:	4a08      	ldr	r2, [pc, #32]	; (8000bbc <HAL_MspInit+0x44>)
 8000b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba0:	61d3      	str	r3, [r2, #28]
 8000ba2:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <HAL_MspInit+0x44>)
 8000ba4:	69db      	ldr	r3, [r3, #28]
 8000ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000baa:	603b      	str	r3, [r7, #0]
 8000bac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bae:	2007      	movs	r0, #7
 8000bb0:	f001 f9aa 	bl	8001f08 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40021000 	.word	0x40021000

08000bc0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08a      	sub	sp, #40	; 0x28
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a27      	ldr	r2, [pc, #156]	; (8000c7c <HAL_CAN_MspInit+0xbc>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d147      	bne.n	8000c72 <HAL_CAN_MspInit+0xb2>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000be2:	4b27      	ldr	r3, [pc, #156]	; (8000c80 <HAL_CAN_MspInit+0xc0>)
 8000be4:	69db      	ldr	r3, [r3, #28]
 8000be6:	4a26      	ldr	r2, [pc, #152]	; (8000c80 <HAL_CAN_MspInit+0xc0>)
 8000be8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bec:	61d3      	str	r3, [r2, #28]
 8000bee:	4b24      	ldr	r3, [pc, #144]	; (8000c80 <HAL_CAN_MspInit+0xc0>)
 8000bf0:	69db      	ldr	r3, [r3, #28]
 8000bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bfa:	4b21      	ldr	r3, [pc, #132]	; (8000c80 <HAL_CAN_MspInit+0xc0>)
 8000bfc:	695b      	ldr	r3, [r3, #20]
 8000bfe:	4a20      	ldr	r2, [pc, #128]	; (8000c80 <HAL_CAN_MspInit+0xc0>)
 8000c00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000c04:	6153      	str	r3, [r2, #20]
 8000c06:	4b1e      	ldr	r3, [pc, #120]	; (8000c80 <HAL_CAN_MspInit+0xc0>)
 8000c08:	695b      	ldr	r3, [r3, #20]
 8000c0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PD0     ------> CAN_RX
    PD1     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c12:	2301      	movs	r3, #1
 8000c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c16:	2302      	movs	r3, #2
 8000c18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_CAN;
 8000c22:	2307      	movs	r3, #7
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4815      	ldr	r0, [pc, #84]	; (8000c84 <HAL_CAN_MspInit+0xc4>)
 8000c2e:	f001 f9ad 	bl	8001f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c32:	2302      	movs	r3, #2
 8000c34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	2302      	movs	r3, #2
 8000c38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_CAN;
 8000c42:	2307      	movs	r3, #7
 8000c44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	480d      	ldr	r0, [pc, #52]	; (8000c84 <HAL_CAN_MspInit+0xc4>)
 8000c4e:	f001 f99d 	bl	8001f8c <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2100      	movs	r1, #0
 8000c56:	2014      	movs	r0, #20
 8000c58:	f001 f961 	bl	8001f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8000c5c:	2014      	movs	r0, #20
 8000c5e:	f001 f97a 	bl	8001f56 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2100      	movs	r1, #0
 8000c66:	2015      	movs	r0, #21
 8000c68:	f001 f959 	bl	8001f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 8000c6c:	2015      	movs	r0, #21
 8000c6e:	f001 f972 	bl	8001f56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000c72:	bf00      	nop
 8000c74:	3728      	adds	r7, #40	; 0x28
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40006400 	.word	0x40006400
 8000c80:	40021000 	.word	0x40021000
 8000c84:	48000c00 	.word	0x48000c00

08000c88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08a      	sub	sp, #40	; 0x28
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a17      	ldr	r2, [pc, #92]	; (8000d04 <HAL_I2C_MspInit+0x7c>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d127      	bne.n	8000cfa <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000caa:	4b17      	ldr	r3, [pc, #92]	; (8000d08 <HAL_I2C_MspInit+0x80>)
 8000cac:	695b      	ldr	r3, [r3, #20]
 8000cae:	4a16      	ldr	r2, [pc, #88]	; (8000d08 <HAL_I2C_MspInit+0x80>)
 8000cb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cb4:	6153      	str	r3, [r2, #20]
 8000cb6:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <HAL_I2C_MspInit+0x80>)
 8000cb8:	695b      	ldr	r3, [r3, #20]
 8000cba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000cc2:	23c0      	movs	r3, #192	; 0xc0
 8000cc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cc6:	2312      	movs	r3, #18
 8000cc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cd2:	2304      	movs	r3, #4
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd6:	f107 0314 	add.w	r3, r7, #20
 8000cda:	4619      	mov	r1, r3
 8000cdc:	480b      	ldr	r0, [pc, #44]	; (8000d0c <HAL_I2C_MspInit+0x84>)
 8000cde:	f001 f955 	bl	8001f8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ce2:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <HAL_I2C_MspInit+0x80>)
 8000ce4:	69db      	ldr	r3, [r3, #28]
 8000ce6:	4a08      	ldr	r2, [pc, #32]	; (8000d08 <HAL_I2C_MspInit+0x80>)
 8000ce8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cec:	61d3      	str	r3, [r2, #28]
 8000cee:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <HAL_I2C_MspInit+0x80>)
 8000cf0:	69db      	ldr	r3, [r3, #28]
 8000cf2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cfa:	bf00      	nop
 8000cfc:	3728      	adds	r7, #40	; 0x28
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40005400 	.word	0x40005400
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	48000400 	.word	0x48000400

08000d10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08a      	sub	sp, #40	; 0x28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a17      	ldr	r2, [pc, #92]	; (8000d8c <HAL_SPI_MspInit+0x7c>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d128      	bne.n	8000d84 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d32:	4b17      	ldr	r3, [pc, #92]	; (8000d90 <HAL_SPI_MspInit+0x80>)
 8000d34:	699b      	ldr	r3, [r3, #24]
 8000d36:	4a16      	ldr	r2, [pc, #88]	; (8000d90 <HAL_SPI_MspInit+0x80>)
 8000d38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d3c:	6193      	str	r3, [r2, #24]
 8000d3e:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <HAL_SPI_MspInit+0x80>)
 8000d40:	699b      	ldr	r3, [r3, #24]
 8000d42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d46:	613b      	str	r3, [r7, #16]
 8000d48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4a:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <HAL_SPI_MspInit+0x80>)
 8000d4c:	695b      	ldr	r3, [r3, #20]
 8000d4e:	4a10      	ldr	r2, [pc, #64]	; (8000d90 <HAL_SPI_MspInit+0x80>)
 8000d50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d54:	6153      	str	r3, [r2, #20]
 8000d56:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <HAL_SPI_MspInit+0x80>)
 8000d58:	695b      	ldr	r3, [r3, #20]
 8000d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000d62:	23e0      	movs	r3, #224	; 0xe0
 8000d64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d66:	2302      	movs	r3, #2
 8000d68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d72:	2305      	movs	r3, #5
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d76:	f107 0314 	add.w	r3, r7, #20
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d80:	f001 f904 	bl	8001f8c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d84:	bf00      	nop
 8000d86:	3728      	adds	r7, #40	; 0x28
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40013000 	.word	0x40013000
 8000d90:	40021000 	.word	0x40021000

08000d94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000da4:	d10b      	bne.n	8000dbe <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000da6:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <HAL_TIM_Base_MspInit+0x38>)
 8000da8:	69db      	ldr	r3, [r3, #28]
 8000daa:	4a08      	ldr	r2, [pc, #32]	; (8000dcc <HAL_TIM_Base_MspInit+0x38>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	61d3      	str	r3, [r2, #28]
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_TIM_Base_MspInit+0x38>)
 8000db4:	69db      	ldr	r3, [r3, #28]
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000dbe:	bf00      	nop
 8000dc0:	3714      	adds	r7, #20
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b088      	sub	sp, #32
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 030c 	add.w	r3, r7, #12
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000df0:	d11d      	bne.n	8000e2e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df2:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <HAL_TIM_MspPostInit+0x68>)
 8000df4:	695b      	ldr	r3, [r3, #20]
 8000df6:	4a10      	ldr	r2, [pc, #64]	; (8000e38 <HAL_TIM_MspPostInit+0x68>)
 8000df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dfc:	6153      	str	r3, [r2, #20]
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <HAL_TIM_MspPostInit+0x68>)
 8000e00:	695b      	ldr	r3, [r3, #20]
 8000e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e06:	60bb      	str	r3, [r7, #8]
 8000e08:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e0e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e10:	2302      	movs	r3, #2
 8000e12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e20:	f107 030c 	add.w	r3, r7, #12
 8000e24:	4619      	mov	r1, r3
 8000e26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e2a:	f001 f8af 	bl	8001f8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000e2e:	bf00      	nop
 8000e30:	3720      	adds	r7, #32
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40021000 	.word	0x40021000

08000e3c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08a      	sub	sp, #40	; 0x28
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a18      	ldr	r2, [pc, #96]	; (8000ebc <HAL_PCD_MspInit+0x80>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d129      	bne.n	8000eb2 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5e:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <HAL_PCD_MspInit+0x84>)
 8000e60:	695b      	ldr	r3, [r3, #20]
 8000e62:	4a17      	ldr	r2, [pc, #92]	; (8000ec0 <HAL_PCD_MspInit+0x84>)
 8000e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e68:	6153      	str	r3, [r2, #20]
 8000e6a:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <HAL_PCD_MspInit+0x84>)
 8000e6c:	695b      	ldr	r3, [r3, #20]
 8000e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000e76:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e84:	2303      	movs	r3, #3
 8000e86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000e88:	230e      	movs	r3, #14
 8000e8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	4619      	mov	r1, r3
 8000e92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e96:	f001 f879 	bl	8001f8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000e9a:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <HAL_PCD_MspInit+0x84>)
 8000e9c:	69db      	ldr	r3, [r3, #28]
 8000e9e:	4a08      	ldr	r2, [pc, #32]	; (8000ec0 <HAL_PCD_MspInit+0x84>)
 8000ea0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ea4:	61d3      	str	r3, [r2, #28]
 8000ea6:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <HAL_PCD_MspInit+0x84>)
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000eb2:	bf00      	nop
 8000eb4:	3728      	adds	r7, #40	; 0x28
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40005c00 	.word	0x40005c00
 8000ec0:	40021000 	.word	0x40021000

08000ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <NMI_Handler+0x4>

08000eca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ece:	e7fe      	b.n	8000ece <HardFault_Handler+0x4>

08000ed0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <MemManage_Handler+0x4>

08000ed6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eda:	e7fe      	b.n	8000eda <BusFault_Handler+0x4>

08000edc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <UsageFault_Handler+0x4>

08000ee2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f10:	f000 f8a0 	bl	8001054 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000f1c:	2001      	movs	r0, #1
 8000f1e:	f001 f9c7 	bl	80022b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000f2c:	4802      	ldr	r0, [pc, #8]	; (8000f38 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8000f2e:	f000 fcf6 	bl	800191e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000034 	.word	0x20000034

08000f3c <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000f40:	4802      	ldr	r0, [pc, #8]	; (8000f4c <CAN_RX1_IRQHandler+0x10>)
 8000f42:	f000 fcec 	bl	800191e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000034 	.word	0x20000034

08000f50 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <SystemInit+0x20>)
 8000f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f5a:	4a05      	ldr	r2, [pc, #20]	; (8000f70 <SystemInit+0x20>)
 8000f5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fac <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f78:	f7ff ffea 	bl	8000f50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f7c:	480c      	ldr	r0, [pc, #48]	; (8000fb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f7e:	490d      	ldr	r1, [pc, #52]	; (8000fb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f80:	4a0d      	ldr	r2, [pc, #52]	; (8000fb8 <LoopForever+0xe>)
  movs r3, #0
 8000f82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f84:	e002      	b.n	8000f8c <LoopCopyDataInit>

08000f86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f8a:	3304      	adds	r3, #4

08000f8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f90:	d3f9      	bcc.n	8000f86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f92:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f94:	4c0a      	ldr	r4, [pc, #40]	; (8000fc0 <LoopForever+0x16>)
  movs r3, #0
 8000f96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f98:	e001      	b.n	8000f9e <LoopFillZerobss>

08000f9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f9c:	3204      	adds	r2, #4

08000f9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa0:	d3fb      	bcc.n	8000f9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fa2:	f004 fe85 	bl	8005cb0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fa6:	f7ff f943 	bl	8000230 <main>

08000faa <LoopForever>:

LoopForever:
    b LoopForever
 8000faa:	e7fe      	b.n	8000faa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000fac:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000fb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000fb8:	08005d48 	.word	0x08005d48
  ldr r2, =_sbss
 8000fbc:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000fc0:	20000498 	.word	0x20000498

08000fc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fc4:	e7fe      	b.n	8000fc4 <ADC1_2_IRQHandler>
	...

08000fc8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fcc:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <HAL_Init+0x28>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a07      	ldr	r2, [pc, #28]	; (8000ff0 <HAL_Init+0x28>)
 8000fd2:	f043 0310 	orr.w	r3, r3, #16
 8000fd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd8:	2003      	movs	r0, #3
 8000fda:	f000 ff95 	bl	8001f08 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fde:	2000      	movs	r0, #0
 8000fe0:	f000 f808 	bl	8000ff4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fe4:	f7ff fdc8 	bl	8000b78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40022000 	.word	0x40022000

08000ff4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ffc:	4b12      	ldr	r3, [pc, #72]	; (8001048 <HAL_InitTick+0x54>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	4b12      	ldr	r3, [pc, #72]	; (800104c <HAL_InitTick+0x58>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	4619      	mov	r1, r3
 8001006:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800100a:	fbb3 f3f1 	udiv	r3, r3, r1
 800100e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001012:	4618      	mov	r0, r3
 8001014:	f000 ffad 	bl	8001f72 <HAL_SYSTICK_Config>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e00e      	b.n	8001040 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2b0f      	cmp	r3, #15
 8001026:	d80a      	bhi.n	800103e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001028:	2200      	movs	r2, #0
 800102a:	6879      	ldr	r1, [r7, #4]
 800102c:	f04f 30ff 	mov.w	r0, #4294967295
 8001030:	f000 ff75 	bl	8001f1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001034:	4a06      	ldr	r2, [pc, #24]	; (8001050 <HAL_InitTick+0x5c>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800103a:	2300      	movs	r3, #0
 800103c:	e000      	b.n	8001040 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
}
 8001040:	4618      	mov	r0, r3
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20000008 	.word	0x20000008
 800104c:	20000010 	.word	0x20000010
 8001050:	2000000c 	.word	0x2000000c

08001054 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <HAL_IncTick+0x20>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	461a      	mov	r2, r3
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <HAL_IncTick+0x24>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4413      	add	r3, r2
 8001064:	4a04      	ldr	r2, [pc, #16]	; (8001078 <HAL_IncTick+0x24>)
 8001066:	6013      	str	r3, [r2, #0]
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	20000010 	.word	0x20000010
 8001078:	20000494 	.word	0x20000494

0800107c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001080:	4b03      	ldr	r3, [pc, #12]	; (8001090 <HAL_GetTick+0x14>)
 8001082:	681b      	ldr	r3, [r3, #0]
}
 8001084:	4618      	mov	r0, r3
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	20000494 	.word	0x20000494

08001094 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800109c:	f7ff ffee 	bl	800107c <HAL_GetTick>
 80010a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ac:	d005      	beq.n	80010ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ae:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <HAL_Delay+0x44>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	461a      	mov	r2, r3
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4413      	add	r3, r2
 80010b8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80010ba:	bf00      	nop
 80010bc:	f7ff ffde 	bl	800107c <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d8f7      	bhi.n	80010bc <HAL_Delay+0x28>
  {
  }
}
 80010cc:	bf00      	nop
 80010ce:	bf00      	nop
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000010 	.word	0x20000010

080010dc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d101      	bne.n	80010ee <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e0ed      	b.n	80012ca <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d102      	bne.n	8001100 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff fd60 	bl	8000bc0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f042 0201 	orr.w	r2, r2, #1
 800110e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001110:	f7ff ffb4 	bl	800107c <HAL_GetTick>
 8001114:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001116:	e012      	b.n	800113e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001118:	f7ff ffb0 	bl	800107c <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b0a      	cmp	r3, #10
 8001124:	d90b      	bls.n	800113e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2205      	movs	r2, #5
 8001136:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e0c5      	b.n	80012ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	2b00      	cmp	r3, #0
 800114a:	d0e5      	beq.n	8001118 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f022 0202 	bic.w	r2, r2, #2
 800115a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800115c:	f7ff ff8e 	bl	800107c <HAL_GetTick>
 8001160:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001162:	e012      	b.n	800118a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001164:	f7ff ff8a 	bl	800107c <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b0a      	cmp	r3, #10
 8001170:	d90b      	bls.n	800118a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001176:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2205      	movs	r2, #5
 8001182:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e09f      	b.n	80012ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 0302 	and.w	r3, r3, #2
 8001194:	2b00      	cmp	r3, #0
 8001196:	d1e5      	bne.n	8001164 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	7e1b      	ldrb	r3, [r3, #24]
 800119c:	2b01      	cmp	r3, #1
 800119e:	d108      	bne.n	80011b2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	e007      	b.n	80011c2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	7e5b      	ldrb	r3, [r3, #25]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d108      	bne.n	80011dc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	e007      	b.n	80011ec <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80011ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	7e9b      	ldrb	r3, [r3, #26]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d108      	bne.n	8001206 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f042 0220 	orr.w	r2, r2, #32
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	e007      	b.n	8001216 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f022 0220 	bic.w	r2, r2, #32
 8001214:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	7edb      	ldrb	r3, [r3, #27]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d108      	bne.n	8001230 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f022 0210 	bic.w	r2, r2, #16
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	e007      	b.n	8001240 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f042 0210 	orr.w	r2, r2, #16
 800123e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	7f1b      	ldrb	r3, [r3, #28]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d108      	bne.n	800125a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f042 0208 	orr.w	r2, r2, #8
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	e007      	b.n	800126a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f022 0208 	bic.w	r2, r2, #8
 8001268:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	7f5b      	ldrb	r3, [r3, #29]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d108      	bne.n	8001284 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f042 0204 	orr.w	r2, r2, #4
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	e007      	b.n	8001294 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f022 0204 	bic.w	r2, r2, #4
 8001292:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689a      	ldr	r2, [r3, #8]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	431a      	orrs	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	691b      	ldr	r3, [r3, #16]
 80012a2:	431a      	orrs	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	695b      	ldr	r3, [r3, #20]
 80012a8:	ea42 0103 	orr.w	r1, r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	1e5a      	subs	r2, r3, #1
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	430a      	orrs	r2, r1
 80012b8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2201      	movs	r2, #1
 80012c4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b087      	sub	sp, #28
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
 80012da:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012e8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80012ea:	7cfb      	ldrb	r3, [r7, #19]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d003      	beq.n	80012f8 <HAL_CAN_ConfigFilter+0x26>
 80012f0:	7cfb      	ldrb	r3, [r7, #19]
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	f040 80aa 	bne.w	800144c <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80012fe:	f043 0201 	orr.w	r2, r3, #1
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	695b      	ldr	r3, [r3, #20]
 800130c:	f003 031f 	and.w	r3, r3, #31
 8001310:	2201      	movs	r2, #1
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	43db      	mvns	r3, r3
 8001322:	401a      	ands	r2, r3
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d123      	bne.n	800137a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	43db      	mvns	r3, r3
 800133c:	401a      	ands	r2, r3
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001350:	683a      	ldr	r2, [r7, #0]
 8001352:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001354:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	3248      	adds	r2, #72	; 0x48
 800135a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800136e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001370:	6979      	ldr	r1, [r7, #20]
 8001372:	3348      	adds	r3, #72	; 0x48
 8001374:	00db      	lsls	r3, r3, #3
 8001376:	440b      	add	r3, r1
 8001378:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d122      	bne.n	80013c8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	431a      	orrs	r2, r3
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800139e:	683a      	ldr	r2, [r7, #0]
 80013a0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80013a2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	3248      	adds	r2, #72	; 0x48
 80013a8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013bc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013be:	6979      	ldr	r1, [r7, #20]
 80013c0:	3348      	adds	r3, #72	; 0x48
 80013c2:	00db      	lsls	r3, r3, #3
 80013c4:	440b      	add	r3, r1
 80013c6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d109      	bne.n	80013e4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	43db      	mvns	r3, r3
 80013da:	401a      	ands	r2, r3
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80013e2:	e007      	b.n	80013f4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	431a      	orrs	r2, r3
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	691b      	ldr	r3, [r3, #16]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d109      	bne.n	8001410 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	43db      	mvns	r3, r3
 8001406:	401a      	ands	r2, r3
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800140e:	e007      	b.n	8001420 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	431a      	orrs	r2, r3
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	6a1b      	ldr	r3, [r3, #32]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d107      	bne.n	8001438 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	431a      	orrs	r2, r3
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800143e:	f023 0201 	bic.w	r2, r3, #1
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001448:	2300      	movs	r3, #0
 800144a:	e006      	b.n	800145a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001450:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
  }
}
 800145a:	4618      	mov	r0, r3
 800145c:	371c      	adds	r7, #28
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b084      	sub	sp, #16
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b01      	cmp	r3, #1
 8001478:	d12e      	bne.n	80014d8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2202      	movs	r2, #2
 800147e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f022 0201 	bic.w	r2, r2, #1
 8001490:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001492:	f7ff fdf3 	bl	800107c <HAL_GetTick>
 8001496:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001498:	e012      	b.n	80014c0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800149a:	f7ff fdef 	bl	800107c <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b0a      	cmp	r3, #10
 80014a6:	d90b      	bls.n	80014c0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ac:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2205      	movs	r2, #5
 80014b8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e012      	b.n	80014e6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1e5      	bne.n	800149a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80014d4:	2300      	movs	r3, #0
 80014d6:	e006      	b.n	80014e6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014dc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
  }
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80014ee:	b480      	push	{r7}
 80014f0:	b089      	sub	sp, #36	; 0x24
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	60f8      	str	r0, [r7, #12]
 80014f6:	60b9      	str	r1, [r7, #8]
 80014f8:	607a      	str	r2, [r7, #4]
 80014fa:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001502:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800150c:	7ffb      	ldrb	r3, [r7, #31]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d003      	beq.n	800151a <HAL_CAN_AddTxMessage+0x2c>
 8001512:	7ffb      	ldrb	r3, [r7, #31]
 8001514:	2b02      	cmp	r3, #2
 8001516:	f040 80ad 	bne.w	8001674 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d10a      	bne.n	800153a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800152a:	2b00      	cmp	r3, #0
 800152c:	d105      	bne.n	800153a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001534:	2b00      	cmp	r3, #0
 8001536:	f000 8095 	beq.w	8001664 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	0e1b      	lsrs	r3, r3, #24
 800153e:	f003 0303 	and.w	r3, r3, #3
 8001542:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001544:	2201      	movs	r2, #1
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	409a      	lsls	r2, r3
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d10d      	bne.n	8001572 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001560:	68f9      	ldr	r1, [r7, #12]
 8001562:	6809      	ldr	r1, [r1, #0]
 8001564:	431a      	orrs	r2, r3
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	3318      	adds	r3, #24
 800156a:	011b      	lsls	r3, r3, #4
 800156c:	440b      	add	r3, r1
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	e00f      	b.n	8001592 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800157c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001582:	68f9      	ldr	r1, [r7, #12]
 8001584:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001586:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	3318      	adds	r3, #24
 800158c:	011b      	lsls	r3, r3, #4
 800158e:	440b      	add	r3, r1
 8001590:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	6819      	ldr	r1, [r3, #0]
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	691a      	ldr	r2, [r3, #16]
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	3318      	adds	r3, #24
 800159e:	011b      	lsls	r3, r3, #4
 80015a0:	440b      	add	r3, r1
 80015a2:	3304      	adds	r3, #4
 80015a4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	7d1b      	ldrb	r3, [r3, #20]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d111      	bne.n	80015d2 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	3318      	adds	r3, #24
 80015b6:	011b      	lsls	r3, r3, #4
 80015b8:	4413      	add	r3, r2
 80015ba:	3304      	adds	r3, #4
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	6811      	ldr	r1, [r2, #0]
 80015c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	3318      	adds	r3, #24
 80015ca:	011b      	lsls	r3, r3, #4
 80015cc:	440b      	add	r3, r1
 80015ce:	3304      	adds	r3, #4
 80015d0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	3307      	adds	r3, #7
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	061a      	lsls	r2, r3, #24
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	3306      	adds	r3, #6
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	041b      	lsls	r3, r3, #16
 80015e2:	431a      	orrs	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3305      	adds	r3, #5
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	021b      	lsls	r3, r3, #8
 80015ec:	4313      	orrs	r3, r2
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	3204      	adds	r2, #4
 80015f2:	7812      	ldrb	r2, [r2, #0]
 80015f4:	4610      	mov	r0, r2
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	6811      	ldr	r1, [r2, #0]
 80015fa:	ea43 0200 	orr.w	r2, r3, r0
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	011b      	lsls	r3, r3, #4
 8001602:	440b      	add	r3, r1
 8001604:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001608:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	3303      	adds	r3, #3
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	061a      	lsls	r2, r3, #24
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	3302      	adds	r3, #2
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	041b      	lsls	r3, r3, #16
 800161a:	431a      	orrs	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3301      	adds	r3, #1
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	021b      	lsls	r3, r3, #8
 8001624:	4313      	orrs	r3, r2
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	7812      	ldrb	r2, [r2, #0]
 800162a:	4610      	mov	r0, r2
 800162c:	68fa      	ldr	r2, [r7, #12]
 800162e:	6811      	ldr	r1, [r2, #0]
 8001630:	ea43 0200 	orr.w	r2, r3, r0
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	011b      	lsls	r3, r3, #4
 8001638:	440b      	add	r3, r1
 800163a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800163e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	3318      	adds	r3, #24
 8001648:	011b      	lsls	r3, r3, #4
 800164a:	4413      	add	r3, r2
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	6811      	ldr	r1, [r2, #0]
 8001652:	f043 0201 	orr.w	r2, r3, #1
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	3318      	adds	r3, #24
 800165a:	011b      	lsls	r3, r3, #4
 800165c:	440b      	add	r3, r1
 800165e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001660:	2300      	movs	r3, #0
 8001662:	e00e      	b.n	8001682 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001668:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e006      	b.n	8001682 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001678:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
  }
}
 8001682:	4618      	mov	r0, r3
 8001684:	3724      	adds	r7, #36	; 0x24
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800168e:	b480      	push	{r7}
 8001690:	b087      	sub	sp, #28
 8001692:	af00      	add	r7, sp, #0
 8001694:	60f8      	str	r0, [r7, #12]
 8001696:	60b9      	str	r1, [r7, #8]
 8001698:	607a      	str	r2, [r7, #4]
 800169a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016a2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80016a4:	7dfb      	ldrb	r3, [r7, #23]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d003      	beq.n	80016b2 <HAL_CAN_GetRxMessage+0x24>
 80016aa:	7dfb      	ldrb	r3, [r7, #23]
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	f040 8103 	bne.w	80018b8 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d10e      	bne.n	80016d6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	f003 0303 	and.w	r3, r3, #3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d116      	bne.n	80016f4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e0f7      	b.n	80018c6 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	691b      	ldr	r3, [r3, #16]
 80016dc:	f003 0303 	and.w	r3, r3, #3
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d107      	bne.n	80016f4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e0e8      	b.n	80018c6 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	331b      	adds	r3, #27
 80016fc:	011b      	lsls	r3, r3, #4
 80016fe:	4413      	add	r3, r2
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0204 	and.w	r2, r3, #4
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d10c      	bne.n	800172c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	331b      	adds	r3, #27
 800171a:	011b      	lsls	r3, r3, #4
 800171c:	4413      	add	r3, r2
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	0d5b      	lsrs	r3, r3, #21
 8001722:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	e00b      	b.n	8001744 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	331b      	adds	r3, #27
 8001734:	011b      	lsls	r3, r3, #4
 8001736:	4413      	add	r3, r2
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	08db      	lsrs	r3, r3, #3
 800173c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	331b      	adds	r3, #27
 800174c:	011b      	lsls	r3, r3, #4
 800174e:	4413      	add	r3, r2
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0202 	and.w	r2, r3, #2
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	331b      	adds	r3, #27
 8001762:	011b      	lsls	r3, r3, #4
 8001764:	4413      	add	r3, r2
 8001766:	3304      	adds	r3, #4
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0308 	and.w	r3, r3, #8
 800176e:	2b00      	cmp	r3, #0
 8001770:	d003      	beq.n	800177a <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2208      	movs	r2, #8
 8001776:	611a      	str	r2, [r3, #16]
 8001778:	e00b      	b.n	8001792 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	331b      	adds	r3, #27
 8001782:	011b      	lsls	r3, r3, #4
 8001784:	4413      	add	r3, r2
 8001786:	3304      	adds	r3, #4
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 020f 	and.w	r2, r3, #15
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	331b      	adds	r3, #27
 800179a:	011b      	lsls	r3, r3, #4
 800179c:	4413      	add	r3, r2
 800179e:	3304      	adds	r3, #4
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	0a1b      	lsrs	r3, r3, #8
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	331b      	adds	r3, #27
 80017b2:	011b      	lsls	r3, r3, #4
 80017b4:	4413      	add	r3, r2
 80017b6:	3304      	adds	r3, #4
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	0c1b      	lsrs	r3, r3, #16
 80017bc:	b29a      	uxth	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	011b      	lsls	r3, r3, #4
 80017ca:	4413      	add	r3, r2
 80017cc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	011b      	lsls	r3, r3, #4
 80017e0:	4413      	add	r3, r2
 80017e2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	0a1a      	lsrs	r2, r3, #8
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	3301      	adds	r3, #1
 80017ee:	b2d2      	uxtb	r2, r2
 80017f0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	011b      	lsls	r3, r3, #4
 80017fa:	4413      	add	r3, r2
 80017fc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	0c1a      	lsrs	r2, r3, #16
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	3302      	adds	r3, #2
 8001808:	b2d2      	uxtb	r2, r2
 800180a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	011b      	lsls	r3, r3, #4
 8001814:	4413      	add	r3, r2
 8001816:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	0e1a      	lsrs	r2, r3, #24
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	3303      	adds	r3, #3
 8001822:	b2d2      	uxtb	r2, r2
 8001824:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	011b      	lsls	r3, r3, #4
 800182e:	4413      	add	r3, r2
 8001830:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	3304      	adds	r3, #4
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	011b      	lsls	r3, r3, #4
 8001846:	4413      	add	r3, r2
 8001848:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	0a1a      	lsrs	r2, r3, #8
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	3305      	adds	r3, #5
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	011b      	lsls	r3, r3, #4
 8001860:	4413      	add	r3, r2
 8001862:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	0c1a      	lsrs	r2, r3, #16
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	3306      	adds	r3, #6
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	011b      	lsls	r3, r3, #4
 800187a:	4413      	add	r3, r2
 800187c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	0e1a      	lsrs	r2, r3, #24
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	3307      	adds	r3, #7
 8001888:	b2d2      	uxtb	r2, r2
 800188a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d108      	bne.n	80018a4 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	68da      	ldr	r2, [r3, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f042 0220 	orr.w	r2, r2, #32
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	e007      	b.n	80018b4 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	691a      	ldr	r2, [r3, #16]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f042 0220 	orr.w	r2, r2, #32
 80018b2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80018b4:	2300      	movs	r3, #0
 80018b6:	e006      	b.n	80018c6 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018bc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
  }
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	371c      	adds	r7, #28
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80018d2:	b480      	push	{r7}
 80018d4:	b085      	sub	sp, #20
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
 80018da:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018e2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80018e4:	7bfb      	ldrb	r3, [r7, #15]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d002      	beq.n	80018f0 <HAL_CAN_ActivateNotification+0x1e>
 80018ea:	7bfb      	ldrb	r3, [r7, #15]
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d109      	bne.n	8001904 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6959      	ldr	r1, [r3, #20]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	430a      	orrs	r2, r1
 80018fe:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001900:	2300      	movs	r3, #0
 8001902:	e006      	b.n	8001912 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001908:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
  }
}
 8001912:	4618      	mov	r0, r3
 8001914:	3714      	adds	r7, #20
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b08a      	sub	sp, #40	; 0x28
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001926:	2300      	movs	r3, #0
 8001928:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	695b      	ldr	r3, [r3, #20]
 8001930:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	691b      	ldr	r3, [r3, #16]
 8001950:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800195a:	6a3b      	ldr	r3, [r7, #32]
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	2b00      	cmp	r3, #0
 8001962:	d07c      	beq.n	8001a5e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	2b00      	cmp	r3, #0
 800196c:	d023      	beq.n	80019b6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2201      	movs	r2, #1
 8001974:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d003      	beq.n	8001988 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f000 f983 	bl	8001c8c <HAL_CAN_TxMailbox0CompleteCallback>
 8001986:	e016      	b.n	80019b6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	f003 0304 	and.w	r3, r3, #4
 800198e:	2b00      	cmp	r3, #0
 8001990:	d004      	beq.n	800199c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001994:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
 800199a:	e00c      	b.n	80019b6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	f003 0308 	and.w	r3, r3, #8
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d004      	beq.n	80019b0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
 80019ae:	e002      	b.n	80019b6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f000 f989 	bl	8001cc8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d024      	beq.n	8001a0a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019c8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d003      	beq.n	80019dc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f000 f963 	bl	8001ca0 <HAL_CAN_TxMailbox1CompleteCallback>
 80019da:	e016      	b.n	8001a0a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d004      	beq.n	80019f0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80019e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
 80019ee:	e00c      	b.n	8001a0a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d004      	beq.n	8001a04 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
 8001a02:	e002      	b.n	8001a0a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f000 f969 	bl	8001cdc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d024      	beq.n	8001a5e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a1c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d003      	beq.n	8001a30 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f000 f943 	bl	8001cb4 <HAL_CAN_TxMailbox2CompleteCallback>
 8001a2e:	e016      	b.n	8001a5e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d004      	beq.n	8001a44 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a40:	627b      	str	r3, [r7, #36]	; 0x24
 8001a42:	e00c      	b.n	8001a5e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d004      	beq.n	8001a58 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a54:	627b      	str	r3, [r7, #36]	; 0x24
 8001a56:	e002      	b.n	8001a5e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f000 f949 	bl	8001cf0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001a5e:	6a3b      	ldr	r3, [r7, #32]
 8001a60:	f003 0308 	and.w	r3, r3, #8
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d00c      	beq.n	8001a82 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	f003 0310 	and.w	r3, r3, #16
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d007      	beq.n	8001a82 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2210      	movs	r2, #16
 8001a80:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001a82:	6a3b      	ldr	r3, [r7, #32]
 8001a84:	f003 0304 	and.w	r3, r3, #4
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d00b      	beq.n	8001aa4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	f003 0308 	and.w	r3, r3, #8
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d006      	beq.n	8001aa4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2208      	movs	r2, #8
 8001a9c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 f930 	bl	8001d04 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001aa4:	6a3b      	ldr	r3, [r7, #32]
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d009      	beq.n	8001ac2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	f003 0303 	and.w	r3, r3, #3
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d002      	beq.n	8001ac2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f7fe fb83 	bl	80001c8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001ac2:	6a3b      	ldr	r3, [r7, #32]
 8001ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d00c      	beq.n	8001ae6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	f003 0310 	and.w	r3, r3, #16
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d007      	beq.n	8001ae6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2210      	movs	r2, #16
 8001ae4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001ae6:	6a3b      	ldr	r3, [r7, #32]
 8001ae8:	f003 0320 	and.w	r3, r3, #32
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d00b      	beq.n	8001b08 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	f003 0308 	and.w	r3, r3, #8
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d006      	beq.n	8001b08 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2208      	movs	r2, #8
 8001b00:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 f908 	bl	8001d18 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001b08:	6a3b      	ldr	r3, [r7, #32]
 8001b0a:	f003 0310 	and.w	r3, r3, #16
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d009      	beq.n	8001b26 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	f003 0303 	and.w	r3, r3, #3
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d002      	beq.n	8001b26 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f7fe fb6b 	bl	80001fc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001b26:	6a3b      	ldr	r3, [r7, #32]
 8001b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d00b      	beq.n	8001b48 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	f003 0310 	and.w	r3, r3, #16
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d006      	beq.n	8001b48 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2210      	movs	r2, #16
 8001b40:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f000 f8f2 	bl	8001d2c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001b48:	6a3b      	ldr	r3, [r7, #32]
 8001b4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d00b      	beq.n	8001b6a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	f003 0308 	and.w	r3, r3, #8
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d006      	beq.n	8001b6a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2208      	movs	r2, #8
 8001b62:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f000 f8eb 	bl	8001d40 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001b6a:	6a3b      	ldr	r3, [r7, #32]
 8001b6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d07b      	beq.n	8001c6c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	f003 0304 	and.w	r3, r3, #4
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d072      	beq.n	8001c64 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b7e:	6a3b      	ldr	r3, [r7, #32]
 8001b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d008      	beq.n	8001b9a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b9a:	6a3b      	ldr	r3, [r7, #32]
 8001b9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d008      	beq.n	8001bb6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb0:	f043 0302 	orr.w	r3, r3, #2
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001bb6:	6a3b      	ldr	r3, [r7, #32]
 8001bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d008      	beq.n	8001bd2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bcc:	f043 0304 	orr.w	r3, r3, #4
 8001bd0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001bd2:	6a3b      	ldr	r3, [r7, #32]
 8001bd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d043      	beq.n	8001c64 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d03e      	beq.n	8001c64 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001bec:	2b60      	cmp	r3, #96	; 0x60
 8001bee:	d02b      	beq.n	8001c48 <HAL_CAN_IRQHandler+0x32a>
 8001bf0:	2b60      	cmp	r3, #96	; 0x60
 8001bf2:	d82e      	bhi.n	8001c52 <HAL_CAN_IRQHandler+0x334>
 8001bf4:	2b50      	cmp	r3, #80	; 0x50
 8001bf6:	d022      	beq.n	8001c3e <HAL_CAN_IRQHandler+0x320>
 8001bf8:	2b50      	cmp	r3, #80	; 0x50
 8001bfa:	d82a      	bhi.n	8001c52 <HAL_CAN_IRQHandler+0x334>
 8001bfc:	2b40      	cmp	r3, #64	; 0x40
 8001bfe:	d019      	beq.n	8001c34 <HAL_CAN_IRQHandler+0x316>
 8001c00:	2b40      	cmp	r3, #64	; 0x40
 8001c02:	d826      	bhi.n	8001c52 <HAL_CAN_IRQHandler+0x334>
 8001c04:	2b30      	cmp	r3, #48	; 0x30
 8001c06:	d010      	beq.n	8001c2a <HAL_CAN_IRQHandler+0x30c>
 8001c08:	2b30      	cmp	r3, #48	; 0x30
 8001c0a:	d822      	bhi.n	8001c52 <HAL_CAN_IRQHandler+0x334>
 8001c0c:	2b10      	cmp	r3, #16
 8001c0e:	d002      	beq.n	8001c16 <HAL_CAN_IRQHandler+0x2f8>
 8001c10:	2b20      	cmp	r3, #32
 8001c12:	d005      	beq.n	8001c20 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001c14:	e01d      	b.n	8001c52 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c18:	f043 0308 	orr.w	r3, r3, #8
 8001c1c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c1e:	e019      	b.n	8001c54 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c22:	f043 0310 	orr.w	r3, r3, #16
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c28:	e014      	b.n	8001c54 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2c:	f043 0320 	orr.w	r3, r3, #32
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c32:	e00f      	b.n	8001c54 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c3a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c3c:	e00a      	b.n	8001c54 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c46:	e005      	b.n	8001c54 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c50:	e000      	b.n	8001c54 <HAL_CAN_IRQHandler+0x336>
            break;
 8001c52:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	699a      	ldr	r2, [r3, #24]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001c62:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2204      	movs	r2, #4
 8001c6a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d008      	beq.n	8001c84 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c78:	431a      	orrs	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f868 	bl	8001d54 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001c84:	bf00      	nop
 8001c86:	3728      	adds	r7, #40	; 0x28
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d78:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <__NVIC_SetPriorityGrouping+0x44>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d7e:	68ba      	ldr	r2, [r7, #8]
 8001d80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d84:	4013      	ands	r3, r2
 8001d86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d9a:	4a04      	ldr	r2, [pc, #16]	; (8001dac <__NVIC_SetPriorityGrouping+0x44>)
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	60d3      	str	r3, [r2, #12]
}
 8001da0:	bf00      	nop
 8001da2:	3714      	adds	r7, #20
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	e000ed00 	.word	0xe000ed00

08001db0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001db4:	4b04      	ldr	r3, [pc, #16]	; (8001dc8 <__NVIC_GetPriorityGrouping+0x18>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	0a1b      	lsrs	r3, r3, #8
 8001dba:	f003 0307 	and.w	r3, r3, #7
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	e000ed00 	.word	0xe000ed00

08001dcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	db0b      	blt.n	8001df6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dde:	79fb      	ldrb	r3, [r7, #7]
 8001de0:	f003 021f 	and.w	r2, r3, #31
 8001de4:	4907      	ldr	r1, [pc, #28]	; (8001e04 <__NVIC_EnableIRQ+0x38>)
 8001de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dea:	095b      	lsrs	r3, r3, #5
 8001dec:	2001      	movs	r0, #1
 8001dee:	fa00 f202 	lsl.w	r2, r0, r2
 8001df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001df6:	bf00      	nop
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	e000e100 	.word	0xe000e100

08001e08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	6039      	str	r1, [r7, #0]
 8001e12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	db0a      	blt.n	8001e32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	490c      	ldr	r1, [pc, #48]	; (8001e54 <__NVIC_SetPriority+0x4c>)
 8001e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e26:	0112      	lsls	r2, r2, #4
 8001e28:	b2d2      	uxtb	r2, r2
 8001e2a:	440b      	add	r3, r1
 8001e2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e30:	e00a      	b.n	8001e48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	b2da      	uxtb	r2, r3
 8001e36:	4908      	ldr	r1, [pc, #32]	; (8001e58 <__NVIC_SetPriority+0x50>)
 8001e38:	79fb      	ldrb	r3, [r7, #7]
 8001e3a:	f003 030f 	and.w	r3, r3, #15
 8001e3e:	3b04      	subs	r3, #4
 8001e40:	0112      	lsls	r2, r2, #4
 8001e42:	b2d2      	uxtb	r2, r2
 8001e44:	440b      	add	r3, r1
 8001e46:	761a      	strb	r2, [r3, #24]
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	e000e100 	.word	0xe000e100
 8001e58:	e000ed00 	.word	0xe000ed00

08001e5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b089      	sub	sp, #36	; 0x24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	f1c3 0307 	rsb	r3, r3, #7
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	bf28      	it	cs
 8001e7a:	2304      	movcs	r3, #4
 8001e7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	3304      	adds	r3, #4
 8001e82:	2b06      	cmp	r3, #6
 8001e84:	d902      	bls.n	8001e8c <NVIC_EncodePriority+0x30>
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	3b03      	subs	r3, #3
 8001e8a:	e000      	b.n	8001e8e <NVIC_EncodePriority+0x32>
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e90:	f04f 32ff 	mov.w	r2, #4294967295
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43da      	mvns	r2, r3
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	401a      	ands	r2, r3
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ea4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8001eae:	43d9      	mvns	r1, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb4:	4313      	orrs	r3, r2
         );
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3724      	adds	r7, #36	; 0x24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
	...

08001ec4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ed4:	d301      	bcc.n	8001eda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e00f      	b.n	8001efa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eda:	4a0a      	ldr	r2, [pc, #40]	; (8001f04 <SysTick_Config+0x40>)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ee2:	210f      	movs	r1, #15
 8001ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee8:	f7ff ff8e 	bl	8001e08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eec:	4b05      	ldr	r3, [pc, #20]	; (8001f04 <SysTick_Config+0x40>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ef2:	4b04      	ldr	r3, [pc, #16]	; (8001f04 <SysTick_Config+0x40>)
 8001ef4:	2207      	movs	r2, #7
 8001ef6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	e000e010 	.word	0xe000e010

08001f08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f7ff ff29 	bl	8001d68 <__NVIC_SetPriorityGrouping>
}
 8001f16:	bf00      	nop
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b086      	sub	sp, #24
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	4603      	mov	r3, r0
 8001f26:	60b9      	str	r1, [r7, #8]
 8001f28:	607a      	str	r2, [r7, #4]
 8001f2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f30:	f7ff ff3e 	bl	8001db0 <__NVIC_GetPriorityGrouping>
 8001f34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	68b9      	ldr	r1, [r7, #8]
 8001f3a:	6978      	ldr	r0, [r7, #20]
 8001f3c:	f7ff ff8e 	bl	8001e5c <NVIC_EncodePriority>
 8001f40:	4602      	mov	r2, r0
 8001f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f46:	4611      	mov	r1, r2
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff ff5d 	bl	8001e08 <__NVIC_SetPriority>
}
 8001f4e:	bf00      	nop
 8001f50:	3718      	adds	r7, #24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b082      	sub	sp, #8
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff ff31 	bl	8001dcc <__NVIC_EnableIRQ>
}
 8001f6a:	bf00      	nop
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b082      	sub	sp, #8
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7ff ffa2 	bl	8001ec4 <SysTick_Config>
 8001f80:	4603      	mov	r3, r0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
	...

08001f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b087      	sub	sp, #28
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f9a:	e154      	b.n	8002246 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa8:	4013      	ands	r3, r2
 8001faa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 8146 	beq.w	8002240 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 0303 	and.w	r3, r3, #3
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d005      	beq.n	8001fcc <HAL_GPIO_Init+0x40>
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f003 0303 	and.w	r3, r3, #3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d130      	bne.n	800202e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	2203      	movs	r2, #3
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	68da      	ldr	r2, [r3, #12]
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002002:	2201      	movs	r2, #1
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43db      	mvns	r3, r3
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	4013      	ands	r3, r2
 8002010:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	091b      	lsrs	r3, r3, #4
 8002018:	f003 0201 	and.w	r2, r3, #1
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	4313      	orrs	r3, r2
 8002026:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	2b03      	cmp	r3, #3
 8002038:	d017      	beq.n	800206a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	2203      	movs	r2, #3
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	43db      	mvns	r3, r3
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	4013      	ands	r3, r2
 8002050:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	689a      	ldr	r2, [r3, #8]
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	4313      	orrs	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d123      	bne.n	80020be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	08da      	lsrs	r2, r3, #3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3208      	adds	r2, #8
 800207e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002082:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	220f      	movs	r2, #15
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43db      	mvns	r3, r3
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	4013      	ands	r3, r2
 8002098:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	691a      	ldr	r2, [r3, #16]
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	f003 0307 	and.w	r3, r3, #7
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	08da      	lsrs	r2, r3, #3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3208      	adds	r2, #8
 80020b8:	6939      	ldr	r1, [r7, #16]
 80020ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	2203      	movs	r2, #3
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43db      	mvns	r3, r3
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	4013      	ands	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f003 0203 	and.w	r2, r3, #3
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f000 80a0 	beq.w	8002240 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002100:	4b58      	ldr	r3, [pc, #352]	; (8002264 <HAL_GPIO_Init+0x2d8>)
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	4a57      	ldr	r2, [pc, #348]	; (8002264 <HAL_GPIO_Init+0x2d8>)
 8002106:	f043 0301 	orr.w	r3, r3, #1
 800210a:	6193      	str	r3, [r2, #24]
 800210c:	4b55      	ldr	r3, [pc, #340]	; (8002264 <HAL_GPIO_Init+0x2d8>)
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	60bb      	str	r3, [r7, #8]
 8002116:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002118:	4a53      	ldr	r2, [pc, #332]	; (8002268 <HAL_GPIO_Init+0x2dc>)
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	089b      	lsrs	r3, r3, #2
 800211e:	3302      	adds	r3, #2
 8002120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002124:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	f003 0303 	and.w	r3, r3, #3
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	220f      	movs	r2, #15
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	43db      	mvns	r3, r3
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	4013      	ands	r3, r2
 800213a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002142:	d019      	beq.n	8002178 <HAL_GPIO_Init+0x1ec>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a49      	ldr	r2, [pc, #292]	; (800226c <HAL_GPIO_Init+0x2e0>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d013      	beq.n	8002174 <HAL_GPIO_Init+0x1e8>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a48      	ldr	r2, [pc, #288]	; (8002270 <HAL_GPIO_Init+0x2e4>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d00d      	beq.n	8002170 <HAL_GPIO_Init+0x1e4>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a47      	ldr	r2, [pc, #284]	; (8002274 <HAL_GPIO_Init+0x2e8>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d007      	beq.n	800216c <HAL_GPIO_Init+0x1e0>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a46      	ldr	r2, [pc, #280]	; (8002278 <HAL_GPIO_Init+0x2ec>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d101      	bne.n	8002168 <HAL_GPIO_Init+0x1dc>
 8002164:	2304      	movs	r3, #4
 8002166:	e008      	b.n	800217a <HAL_GPIO_Init+0x1ee>
 8002168:	2305      	movs	r3, #5
 800216a:	e006      	b.n	800217a <HAL_GPIO_Init+0x1ee>
 800216c:	2303      	movs	r3, #3
 800216e:	e004      	b.n	800217a <HAL_GPIO_Init+0x1ee>
 8002170:	2302      	movs	r3, #2
 8002172:	e002      	b.n	800217a <HAL_GPIO_Init+0x1ee>
 8002174:	2301      	movs	r3, #1
 8002176:	e000      	b.n	800217a <HAL_GPIO_Init+0x1ee>
 8002178:	2300      	movs	r3, #0
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	f002 0203 	and.w	r2, r2, #3
 8002180:	0092      	lsls	r2, r2, #2
 8002182:	4093      	lsls	r3, r2
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	4313      	orrs	r3, r2
 8002188:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800218a:	4937      	ldr	r1, [pc, #220]	; (8002268 <HAL_GPIO_Init+0x2dc>)
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	089b      	lsrs	r3, r3, #2
 8002190:	3302      	adds	r3, #2
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002198:	4b38      	ldr	r3, [pc, #224]	; (800227c <HAL_GPIO_Init+0x2f0>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	43db      	mvns	r3, r3
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	4013      	ands	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d003      	beq.n	80021bc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80021bc:	4a2f      	ldr	r2, [pc, #188]	; (800227c <HAL_GPIO_Init+0x2f0>)
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021c2:	4b2e      	ldr	r3, [pc, #184]	; (800227c <HAL_GPIO_Init+0x2f0>)
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	43db      	mvns	r3, r3
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	4013      	ands	r3, r2
 80021d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80021e6:	4a25      	ldr	r2, [pc, #148]	; (800227c <HAL_GPIO_Init+0x2f0>)
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021ec:	4b23      	ldr	r3, [pc, #140]	; (800227c <HAL_GPIO_Init+0x2f0>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	43db      	mvns	r3, r3
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	4013      	ands	r3, r2
 80021fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d003      	beq.n	8002210 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	4313      	orrs	r3, r2
 800220e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002210:	4a1a      	ldr	r2, [pc, #104]	; (800227c <HAL_GPIO_Init+0x2f0>)
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002216:	4b19      	ldr	r3, [pc, #100]	; (800227c <HAL_GPIO_Init+0x2f0>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	43db      	mvns	r3, r3
 8002220:	693a      	ldr	r2, [r7, #16]
 8002222:	4013      	ands	r3, r2
 8002224:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d003      	beq.n	800223a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	4313      	orrs	r3, r2
 8002238:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800223a:	4a10      	ldr	r2, [pc, #64]	; (800227c <HAL_GPIO_Init+0x2f0>)
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	3301      	adds	r3, #1
 8002244:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	fa22 f303 	lsr.w	r3, r2, r3
 8002250:	2b00      	cmp	r3, #0
 8002252:	f47f aea3 	bne.w	8001f9c <HAL_GPIO_Init+0x10>
  }
}
 8002256:	bf00      	nop
 8002258:	bf00      	nop
 800225a:	371c      	adds	r7, #28
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	40021000 	.word	0x40021000
 8002268:	40010000 	.word	0x40010000
 800226c:	48000400 	.word	0x48000400
 8002270:	48000800 	.word	0x48000800
 8002274:	48000c00 	.word	0x48000c00
 8002278:	48001000 	.word	0x48001000
 800227c:	40010400 	.word	0x40010400

08002280 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	460b      	mov	r3, r1
 800228a:	807b      	strh	r3, [r7, #2]
 800228c:	4613      	mov	r3, r2
 800228e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002290:	787b      	ldrb	r3, [r7, #1]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002296:	887a      	ldrh	r2, [r7, #2]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800229c:	e002      	b.n	80022a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800229e:	887a      	ldrh	r2, [r7, #2]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80022ba:	4b08      	ldr	r3, [pc, #32]	; (80022dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022bc:	695a      	ldr	r2, [r3, #20]
 80022be:	88fb      	ldrh	r3, [r7, #6]
 80022c0:	4013      	ands	r3, r2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d006      	beq.n	80022d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022c6:	4a05      	ldr	r2, [pc, #20]	; (80022dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022c8:	88fb      	ldrh	r3, [r7, #6]
 80022ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022cc:	88fb      	ldrh	r3, [r7, #6]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f000 f806 	bl	80022e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80022d4:	bf00      	nop
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40010400 	.word	0x40010400

080022e0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4603      	mov	r3, r0
 80022e8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e081      	b.n	800240c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b00      	cmp	r3, #0
 8002312:	d106      	bne.n	8002322 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f7fe fcb3 	bl	8000c88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2224      	movs	r2, #36	; 0x24
 8002326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f022 0201 	bic.w	r2, r2, #1
 8002338:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685a      	ldr	r2, [r3, #4]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002346:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	689a      	ldr	r2, [r3, #8]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002356:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d107      	bne.n	8002370 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800236c:	609a      	str	r2, [r3, #8]
 800236e:	e006      	b.n	800237e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800237c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	2b02      	cmp	r3, #2
 8002384:	d104      	bne.n	8002390 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800238e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	6812      	ldr	r2, [r2, #0]
 800239a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800239e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023a2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68da      	ldr	r2, [r3, #12]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023b2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	691a      	ldr	r2, [r3, #16]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	695b      	ldr	r3, [r3, #20]
 80023bc:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	430a      	orrs	r2, r1
 80023cc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69d9      	ldr	r1, [r3, #28]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a1a      	ldr	r2, [r3, #32]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	430a      	orrs	r2, r1
 80023dc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f042 0201 	orr.w	r2, r2, #1
 80023ec:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2220      	movs	r2, #32
 80023f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b088      	sub	sp, #32
 8002418:	af02      	add	r7, sp, #8
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	607a      	str	r2, [r7, #4]
 800241e:	461a      	mov	r2, r3
 8002420:	460b      	mov	r3, r1
 8002422:	817b      	strh	r3, [r7, #10]
 8002424:	4613      	mov	r3, r2
 8002426:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b20      	cmp	r3, #32
 8002432:	f040 80da 	bne.w	80025ea <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800243c:	2b01      	cmp	r3, #1
 800243e:	d101      	bne.n	8002444 <HAL_I2C_Master_Transmit+0x30>
 8002440:	2302      	movs	r3, #2
 8002442:	e0d3      	b.n	80025ec <HAL_I2C_Master_Transmit+0x1d8>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800244c:	f7fe fe16 	bl	800107c <HAL_GetTick>
 8002450:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	2319      	movs	r3, #25
 8002458:	2201      	movs	r2, #1
 800245a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f000 fb4e 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e0be      	b.n	80025ec <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2221      	movs	r2, #33	; 0x21
 8002472:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2210      	movs	r2, #16
 800247a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	893a      	ldrh	r2, [r7, #8]
 800248e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800249a:	b29b      	uxth	r3, r3
 800249c:	2bff      	cmp	r3, #255	; 0xff
 800249e:	d90e      	bls.n	80024be <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	22ff      	movs	r2, #255	; 0xff
 80024a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	8979      	ldrh	r1, [r7, #10]
 80024ae:	4b51      	ldr	r3, [pc, #324]	; (80025f4 <HAL_I2C_Master_Transmit+0x1e0>)
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f000 fd5e 	bl	8002f78 <I2C_TransferConfig>
 80024bc:	e06c      	b.n	8002598 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	8979      	ldrh	r1, [r7, #10]
 80024d0:	4b48      	ldr	r3, [pc, #288]	; (80025f4 <HAL_I2C_Master_Transmit+0x1e0>)
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f000 fd4d 	bl	8002f78 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80024de:	e05b      	b.n	8002598 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	6a39      	ldr	r1, [r7, #32]
 80024e4:	68f8      	ldr	r0, [r7, #12]
 80024e6:	f000 fb5a 	bl	8002b9e <I2C_WaitOnTXISFlagUntilTimeout>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e07b      	b.n	80025ec <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f8:	781a      	ldrb	r2, [r3, #0]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002504:	1c5a      	adds	r2, r3, #1
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800250e:	b29b      	uxth	r3, r3
 8002510:	3b01      	subs	r3, #1
 8002512:	b29a      	uxth	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800251c:	3b01      	subs	r3, #1
 800251e:	b29a      	uxth	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002528:	b29b      	uxth	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d034      	beq.n	8002598 <HAL_I2C_Master_Transmit+0x184>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002532:	2b00      	cmp	r3, #0
 8002534:	d130      	bne.n	8002598 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	9300      	str	r3, [sp, #0]
 800253a:	6a3b      	ldr	r3, [r7, #32]
 800253c:	2200      	movs	r2, #0
 800253e:	2180      	movs	r1, #128	; 0x80
 8002540:	68f8      	ldr	r0, [r7, #12]
 8002542:	f000 fadd 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e04d      	b.n	80025ec <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002554:	b29b      	uxth	r3, r3
 8002556:	2bff      	cmp	r3, #255	; 0xff
 8002558:	d90e      	bls.n	8002578 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	22ff      	movs	r2, #255	; 0xff
 800255e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002564:	b2da      	uxtb	r2, r3
 8002566:	8979      	ldrh	r1, [r7, #10]
 8002568:	2300      	movs	r3, #0
 800256a:	9300      	str	r3, [sp, #0]
 800256c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002570:	68f8      	ldr	r0, [r7, #12]
 8002572:	f000 fd01 	bl	8002f78 <I2C_TransferConfig>
 8002576:	e00f      	b.n	8002598 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800257c:	b29a      	uxth	r2, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002586:	b2da      	uxtb	r2, r3
 8002588:	8979      	ldrh	r1, [r7, #10]
 800258a:	2300      	movs	r3, #0
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f000 fcf0 	bl	8002f78 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800259c:	b29b      	uxth	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d19e      	bne.n	80024e0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025a2:	697a      	ldr	r2, [r7, #20]
 80025a4:	6a39      	ldr	r1, [r7, #32]
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f000 fb40 	bl	8002c2c <I2C_WaitOnSTOPFlagUntilTimeout>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e01a      	b.n	80025ec <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2220      	movs	r2, #32
 80025bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	6859      	ldr	r1, [r3, #4]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <HAL_I2C_Master_Transmit+0x1e4>)
 80025ca:	400b      	ands	r3, r1
 80025cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2220      	movs	r2, #32
 80025d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025e6:	2300      	movs	r3, #0
 80025e8:	e000      	b.n	80025ec <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80025ea:	2302      	movs	r3, #2
  }
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3718      	adds	r7, #24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	80002000 	.word	0x80002000
 80025f8:	fe00e800 	.word	0xfe00e800

080025fc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b088      	sub	sp, #32
 8002600:	af02      	add	r7, sp, #8
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	607a      	str	r2, [r7, #4]
 8002606:	461a      	mov	r2, r3
 8002608:	460b      	mov	r3, r1
 800260a:	817b      	strh	r3, [r7, #10]
 800260c:	4613      	mov	r3, r2
 800260e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2b20      	cmp	r3, #32
 800261a:	f040 80db 	bne.w	80027d4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002624:	2b01      	cmp	r3, #1
 8002626:	d101      	bne.n	800262c <HAL_I2C_Master_Receive+0x30>
 8002628:	2302      	movs	r3, #2
 800262a:	e0d4      	b.n	80027d6 <HAL_I2C_Master_Receive+0x1da>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002634:	f7fe fd22 	bl	800107c <HAL_GetTick>
 8002638:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	9300      	str	r3, [sp, #0]
 800263e:	2319      	movs	r3, #25
 8002640:	2201      	movs	r2, #1
 8002642:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	f000 fa5a 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e0bf      	b.n	80027d6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2222      	movs	r2, #34	; 0x22
 800265a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2210      	movs	r2, #16
 8002662:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	893a      	ldrh	r2, [r7, #8]
 8002676:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002682:	b29b      	uxth	r3, r3
 8002684:	2bff      	cmp	r3, #255	; 0xff
 8002686:	d90e      	bls.n	80026a6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	22ff      	movs	r2, #255	; 0xff
 800268c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002692:	b2da      	uxtb	r2, r3
 8002694:	8979      	ldrh	r1, [r7, #10]
 8002696:	4b52      	ldr	r3, [pc, #328]	; (80027e0 <HAL_I2C_Master_Receive+0x1e4>)
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f000 fc6a 	bl	8002f78 <I2C_TransferConfig>
 80026a4:	e06d      	b.n	8002782 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b4:	b2da      	uxtb	r2, r3
 80026b6:	8979      	ldrh	r1, [r7, #10]
 80026b8:	4b49      	ldr	r3, [pc, #292]	; (80027e0 <HAL_I2C_Master_Receive+0x1e4>)
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f000 fc59 	bl	8002f78 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80026c6:	e05c      	b.n	8002782 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026c8:	697a      	ldr	r2, [r7, #20]
 80026ca:	6a39      	ldr	r1, [r7, #32]
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f000 faf1 	bl	8002cb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e07c      	b.n	80027d6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e6:	b2d2      	uxtb	r2, r2
 80026e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ee:	1c5a      	adds	r2, r3, #1
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f8:	3b01      	subs	r3, #1
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002704:	b29b      	uxth	r3, r3
 8002706:	3b01      	subs	r3, #1
 8002708:	b29a      	uxth	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002712:	b29b      	uxth	r3, r3
 8002714:	2b00      	cmp	r3, #0
 8002716:	d034      	beq.n	8002782 <HAL_I2C_Master_Receive+0x186>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271c:	2b00      	cmp	r3, #0
 800271e:	d130      	bne.n	8002782 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	6a3b      	ldr	r3, [r7, #32]
 8002726:	2200      	movs	r2, #0
 8002728:	2180      	movs	r1, #128	; 0x80
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f000 f9e8 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e04d      	b.n	80027d6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273e:	b29b      	uxth	r3, r3
 8002740:	2bff      	cmp	r3, #255	; 0xff
 8002742:	d90e      	bls.n	8002762 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	22ff      	movs	r2, #255	; 0xff
 8002748:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274e:	b2da      	uxtb	r2, r3
 8002750:	8979      	ldrh	r1, [r7, #10]
 8002752:	2300      	movs	r3, #0
 8002754:	9300      	str	r3, [sp, #0]
 8002756:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f000 fc0c 	bl	8002f78 <I2C_TransferConfig>
 8002760:	e00f      	b.n	8002782 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002766:	b29a      	uxth	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002770:	b2da      	uxtb	r2, r3
 8002772:	8979      	ldrh	r1, [r7, #10]
 8002774:	2300      	movs	r3, #0
 8002776:	9300      	str	r3, [sp, #0]
 8002778:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f000 fbfb 	bl	8002f78 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002786:	b29b      	uxth	r3, r3
 8002788:	2b00      	cmp	r3, #0
 800278a:	d19d      	bne.n	80026c8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800278c:	697a      	ldr	r2, [r7, #20]
 800278e:	6a39      	ldr	r1, [r7, #32]
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f000 fa4b 	bl	8002c2c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e01a      	b.n	80027d6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2220      	movs	r2, #32
 80027a6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6859      	ldr	r1, [r3, #4]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	4b0c      	ldr	r3, [pc, #48]	; (80027e4 <HAL_I2C_Master_Receive+0x1e8>)
 80027b4:	400b      	ands	r3, r1
 80027b6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2220      	movs	r2, #32
 80027bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027d0:	2300      	movs	r3, #0
 80027d2:	e000      	b.n	80027d6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80027d4:	2302      	movs	r3, #2
  }
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3718      	adds	r7, #24
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	80002400 	.word	0x80002400
 80027e4:	fe00e800 	.word	0xfe00e800

080027e8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b088      	sub	sp, #32
 80027ec:	af02      	add	r7, sp, #8
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	4608      	mov	r0, r1
 80027f2:	4611      	mov	r1, r2
 80027f4:	461a      	mov	r2, r3
 80027f6:	4603      	mov	r3, r0
 80027f8:	817b      	strh	r3, [r7, #10]
 80027fa:	460b      	mov	r3, r1
 80027fc:	813b      	strh	r3, [r7, #8]
 80027fe:	4613      	mov	r3, r2
 8002800:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b20      	cmp	r3, #32
 800280c:	f040 80f9 	bne.w	8002a02 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002810:	6a3b      	ldr	r3, [r7, #32]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d002      	beq.n	800281c <HAL_I2C_Mem_Write+0x34>
 8002816:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002818:	2b00      	cmp	r3, #0
 800281a:	d105      	bne.n	8002828 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002822:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e0ed      	b.n	8002a04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800282e:	2b01      	cmp	r3, #1
 8002830:	d101      	bne.n	8002836 <HAL_I2C_Mem_Write+0x4e>
 8002832:	2302      	movs	r3, #2
 8002834:	e0e6      	b.n	8002a04 <HAL_I2C_Mem_Write+0x21c>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800283e:	f7fe fc1d 	bl	800107c <HAL_GetTick>
 8002842:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	9300      	str	r3, [sp, #0]
 8002848:	2319      	movs	r3, #25
 800284a:	2201      	movs	r2, #1
 800284c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	f000 f955 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e0d1      	b.n	8002a04 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2221      	movs	r2, #33	; 0x21
 8002864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2240      	movs	r2, #64	; 0x40
 800286c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2200      	movs	r2, #0
 8002874:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6a3a      	ldr	r2, [r7, #32]
 800287a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002880:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002888:	88f8      	ldrh	r0, [r7, #6]
 800288a:	893a      	ldrh	r2, [r7, #8]
 800288c:	8979      	ldrh	r1, [r7, #10]
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	9301      	str	r3, [sp, #4]
 8002892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002894:	9300      	str	r3, [sp, #0]
 8002896:	4603      	mov	r3, r0
 8002898:	68f8      	ldr	r0, [r7, #12]
 800289a:	f000 f8b9 	bl	8002a10 <I2C_RequestMemoryWrite>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d005      	beq.n	80028b0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e0a9      	b.n	8002a04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	2bff      	cmp	r3, #255	; 0xff
 80028b8:	d90e      	bls.n	80028d8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	22ff      	movs	r2, #255	; 0xff
 80028be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	8979      	ldrh	r1, [r7, #10]
 80028c8:	2300      	movs	r3, #0
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f000 fb51 	bl	8002f78 <I2C_TransferConfig>
 80028d6:	e00f      	b.n	80028f8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028dc:	b29a      	uxth	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	8979      	ldrh	r1, [r7, #10]
 80028ea:	2300      	movs	r3, #0
 80028ec:	9300      	str	r3, [sp, #0]
 80028ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f000 fb40 	bl	8002f78 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f000 f94e 	bl	8002b9e <I2C_WaitOnTXISFlagUntilTimeout>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e07b      	b.n	8002a04 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002910:	781a      	ldrb	r2, [r3, #0]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291c:	1c5a      	adds	r2, r3, #1
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002926:	b29b      	uxth	r3, r3
 8002928:	3b01      	subs	r3, #1
 800292a:	b29a      	uxth	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002934:	3b01      	subs	r3, #1
 8002936:	b29a      	uxth	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002940:	b29b      	uxth	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d034      	beq.n	80029b0 <HAL_I2C_Mem_Write+0x1c8>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800294a:	2b00      	cmp	r3, #0
 800294c:	d130      	bne.n	80029b0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002954:	2200      	movs	r2, #0
 8002956:	2180      	movs	r1, #128	; 0x80
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f000 f8d1 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e04d      	b.n	8002a04 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800296c:	b29b      	uxth	r3, r3
 800296e:	2bff      	cmp	r3, #255	; 0xff
 8002970:	d90e      	bls.n	8002990 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	22ff      	movs	r2, #255	; 0xff
 8002976:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800297c:	b2da      	uxtb	r2, r3
 800297e:	8979      	ldrh	r1, [r7, #10]
 8002980:	2300      	movs	r3, #0
 8002982:	9300      	str	r3, [sp, #0]
 8002984:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f000 faf5 	bl	8002f78 <I2C_TransferConfig>
 800298e:	e00f      	b.n	80029b0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002994:	b29a      	uxth	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800299e:	b2da      	uxtb	r2, r3
 80029a0:	8979      	ldrh	r1, [r7, #10]
 80029a2:	2300      	movs	r3, #0
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f000 fae4 	bl	8002f78 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d19e      	bne.n	80028f8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f000 f934 	bl	8002c2c <I2C_WaitOnSTOPFlagUntilTimeout>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e01a      	b.n	8002a04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2220      	movs	r2, #32
 80029d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	6859      	ldr	r1, [r3, #4]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	4b0a      	ldr	r3, [pc, #40]	; (8002a0c <HAL_I2C_Mem_Write+0x224>)
 80029e2:	400b      	ands	r3, r1
 80029e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2220      	movs	r2, #32
 80029ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029fe:	2300      	movs	r3, #0
 8002a00:	e000      	b.n	8002a04 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002a02:	2302      	movs	r3, #2
  }
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3718      	adds	r7, #24
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	fe00e800 	.word	0xfe00e800

08002a10 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af02      	add	r7, sp, #8
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	4608      	mov	r0, r1
 8002a1a:	4611      	mov	r1, r2
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	4603      	mov	r3, r0
 8002a20:	817b      	strh	r3, [r7, #10]
 8002a22:	460b      	mov	r3, r1
 8002a24:	813b      	strh	r3, [r7, #8]
 8002a26:	4613      	mov	r3, r2
 8002a28:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002a2a:	88fb      	ldrh	r3, [r7, #6]
 8002a2c:	b2da      	uxtb	r2, r3
 8002a2e:	8979      	ldrh	r1, [r7, #10]
 8002a30:	4b20      	ldr	r3, [pc, #128]	; (8002ab4 <I2C_RequestMemoryWrite+0xa4>)
 8002a32:	9300      	str	r3, [sp, #0]
 8002a34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f000 fa9d 	bl	8002f78 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a3e:	69fa      	ldr	r2, [r7, #28]
 8002a40:	69b9      	ldr	r1, [r7, #24]
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	f000 f8ab 	bl	8002b9e <I2C_WaitOnTXISFlagUntilTimeout>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e02c      	b.n	8002aac <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a52:	88fb      	ldrh	r3, [r7, #6]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d105      	bne.n	8002a64 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a58:	893b      	ldrh	r3, [r7, #8]
 8002a5a:	b2da      	uxtb	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	629a      	str	r2, [r3, #40]	; 0x28
 8002a62:	e015      	b.n	8002a90 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002a64:	893b      	ldrh	r3, [r7, #8]
 8002a66:	0a1b      	lsrs	r3, r3, #8
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	b2da      	uxtb	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a72:	69fa      	ldr	r2, [r7, #28]
 8002a74:	69b9      	ldr	r1, [r7, #24]
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 f891 	bl	8002b9e <I2C_WaitOnTXISFlagUntilTimeout>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e012      	b.n	8002aac <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a86:	893b      	ldrh	r3, [r7, #8]
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	9300      	str	r3, [sp, #0]
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	2200      	movs	r2, #0
 8002a98:	2180      	movs	r1, #128	; 0x80
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	f000 f830 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e000      	b.n	8002aac <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	80002000 	.word	0x80002000

08002ab8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d103      	bne.n	8002ad6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d007      	beq.n	8002af4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	699a      	ldr	r2, [r3, #24]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f042 0201 	orr.w	r2, r2, #1
 8002af2:	619a      	str	r2, [r3, #24]
  }
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	603b      	str	r3, [r7, #0]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b10:	e031      	b.n	8002b76 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b18:	d02d      	beq.n	8002b76 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b1a:	f7fe faaf 	bl	800107c <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d302      	bcc.n	8002b30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d122      	bne.n	8002b76 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	699a      	ldr	r2, [r3, #24]
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	bf0c      	ite	eq
 8002b40:	2301      	moveq	r3, #1
 8002b42:	2300      	movne	r3, #0
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	461a      	mov	r2, r3
 8002b48:	79fb      	ldrb	r3, [r7, #7]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d113      	bne.n	8002b76 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b52:	f043 0220 	orr.w	r2, r3, #32
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2220      	movs	r2, #32
 8002b5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e00f      	b.n	8002b96 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	699a      	ldr	r2, [r3, #24]
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	68ba      	ldr	r2, [r7, #8]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	bf0c      	ite	eq
 8002b86:	2301      	moveq	r3, #1
 8002b88:	2300      	movne	r3, #0
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	79fb      	ldrb	r3, [r7, #7]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d0be      	beq.n	8002b12 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b084      	sub	sp, #16
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	60f8      	str	r0, [r7, #12]
 8002ba6:	60b9      	str	r1, [r7, #8]
 8002ba8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002baa:	e033      	b.n	8002c14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	68b9      	ldr	r1, [r7, #8]
 8002bb0:	68f8      	ldr	r0, [r7, #12]
 8002bb2:	f000 f901 	bl	8002db8 <I2C_IsErrorOccurred>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e031      	b.n	8002c24 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc6:	d025      	beq.n	8002c14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bc8:	f7fe fa58 	bl	800107c <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	68ba      	ldr	r2, [r7, #8]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d302      	bcc.n	8002bde <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d11a      	bne.n	8002c14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d013      	beq.n	8002c14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf0:	f043 0220 	orr.w	r2, r3, #32
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2220      	movs	r2, #32
 8002bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e007      	b.n	8002c24 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d1c4      	bne.n	8002bac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c38:	e02f      	b.n	8002c9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	68b9      	ldr	r1, [r7, #8]
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 f8ba 	bl	8002db8 <I2C_IsErrorOccurred>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e02d      	b.n	8002caa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c4e:	f7fe fa15 	bl	800107c <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	68ba      	ldr	r2, [r7, #8]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d302      	bcc.n	8002c64 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d11a      	bne.n	8002c9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	f003 0320 	and.w	r3, r3, #32
 8002c6e:	2b20      	cmp	r3, #32
 8002c70:	d013      	beq.n	8002c9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c76:	f043 0220 	orr.w	r2, r3, #32
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2220      	movs	r2, #32
 8002c82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e007      	b.n	8002caa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	f003 0320 	and.w	r3, r3, #32
 8002ca4:	2b20      	cmp	r3, #32
 8002ca6:	d1c8      	bne.n	8002c3a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
	...

08002cb4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002cc0:	e06b      	b.n	8002d9a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	68b9      	ldr	r1, [r7, #8]
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f000 f876 	bl	8002db8 <I2C_IsErrorOccurred>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e069      	b.n	8002daa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	f003 0320 	and.w	r3, r3, #32
 8002ce0:	2b20      	cmp	r3, #32
 8002ce2:	d138      	bne.n	8002d56 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	f003 0304 	and.w	r3, r3, #4
 8002cee:	2b04      	cmp	r3, #4
 8002cf0:	d105      	bne.n	8002cfe <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	e055      	b.n	8002daa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	f003 0310 	and.w	r3, r3, #16
 8002d08:	2b10      	cmp	r3, #16
 8002d0a:	d107      	bne.n	8002d1c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2210      	movs	r2, #16
 8002d12:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2204      	movs	r2, #4
 8002d18:	645a      	str	r2, [r3, #68]	; 0x44
 8002d1a:	e002      	b.n	8002d22 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2220      	movs	r2, #32
 8002d28:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6859      	ldr	r1, [r3, #4]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	4b1f      	ldr	r3, [pc, #124]	; (8002db4 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8002d36:	400b      	ands	r3, r1
 8002d38:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e029      	b.n	8002daa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d56:	f7fe f991 	bl	800107c <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	68ba      	ldr	r2, [r7, #8]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d302      	bcc.n	8002d6c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d116      	bne.n	8002d9a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	f003 0304 	and.w	r3, r3, #4
 8002d76:	2b04      	cmp	r3, #4
 8002d78:	d00f      	beq.n	8002d9a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7e:	f043 0220 	orr.w	r2, r3, #32
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2220      	movs	r2, #32
 8002d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e007      	b.n	8002daa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	f003 0304 	and.w	r3, r3, #4
 8002da4:	2b04      	cmp	r3, #4
 8002da6:	d18c      	bne.n	8002cc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	fe00e800 	.word	0xfe00e800

08002db8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b08a      	sub	sp, #40	; 0x28
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	f003 0310 	and.w	r3, r3, #16
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d068      	beq.n	8002eb6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2210      	movs	r2, #16
 8002dea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002dec:	e049      	b.n	8002e82 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df4:	d045      	beq.n	8002e82 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002df6:	f7fe f941 	bl	800107c <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d302      	bcc.n	8002e0c <I2C_IsErrorOccurred+0x54>
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d13a      	bne.n	8002e82 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e16:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e1e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e2e:	d121      	bne.n	8002e74 <I2C_IsErrorOccurred+0xbc>
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e36:	d01d      	beq.n	8002e74 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002e38:	7cfb      	ldrb	r3, [r7, #19]
 8002e3a:	2b20      	cmp	r3, #32
 8002e3c:	d01a      	beq.n	8002e74 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e4c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002e4e:	f7fe f915 	bl	800107c <HAL_GetTick>
 8002e52:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e54:	e00e      	b.n	8002e74 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002e56:	f7fe f911 	bl	800107c <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b19      	cmp	r3, #25
 8002e62:	d907      	bls.n	8002e74 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002e64:	6a3b      	ldr	r3, [r7, #32]
 8002e66:	f043 0320 	orr.w	r3, r3, #32
 8002e6a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002e72:	e006      	b.n	8002e82 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	f003 0320 	and.w	r3, r3, #32
 8002e7e:	2b20      	cmp	r3, #32
 8002e80:	d1e9      	bne.n	8002e56 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	f003 0320 	and.w	r3, r3, #32
 8002e8c:	2b20      	cmp	r3, #32
 8002e8e:	d003      	beq.n	8002e98 <I2C_IsErrorOccurred+0xe0>
 8002e90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d0aa      	beq.n	8002dee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002e98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d103      	bne.n	8002ea8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2220      	movs	r2, #32
 8002ea6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002ea8:	6a3b      	ldr	r3, [r7, #32]
 8002eaa:	f043 0304 	orr.w	r3, r3, #4
 8002eae:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00b      	beq.n	8002ee0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002ec8:	6a3b      	ldr	r3, [r7, #32]
 8002eca:	f043 0301 	orr.w	r3, r3, #1
 8002ece:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ed8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00b      	beq.n	8002f02 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002eea:	6a3b      	ldr	r3, [r7, #32]
 8002eec:	f043 0308 	orr.w	r3, r3, #8
 8002ef0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002efa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00b      	beq.n	8002f24 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002f0c:	6a3b      	ldr	r3, [r7, #32]
 8002f0e:	f043 0302 	orr.w	r3, r3, #2
 8002f12:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f1c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002f24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d01c      	beq.n	8002f66 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f7ff fdc3 	bl	8002ab8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	6859      	ldr	r1, [r3, #4]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	4b0d      	ldr	r3, [pc, #52]	; (8002f74 <I2C_IsErrorOccurred+0x1bc>)
 8002f3e:	400b      	ands	r3, r1
 8002f40:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f46:	6a3b      	ldr	r3, [r7, #32]
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2220      	movs	r2, #32
 8002f52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002f66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3728      	adds	r7, #40	; 0x28
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	fe00e800 	.word	0xfe00e800

08002f78 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b087      	sub	sp, #28
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	607b      	str	r3, [r7, #4]
 8002f82:	460b      	mov	r3, r1
 8002f84:	817b      	strh	r3, [r7, #10]
 8002f86:	4613      	mov	r3, r2
 8002f88:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f8a:	897b      	ldrh	r3, [r7, #10]
 8002f8c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f90:	7a7b      	ldrb	r3, [r7, #9]
 8002f92:	041b      	lsls	r3, r3, #16
 8002f94:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f98:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f9e:	6a3b      	ldr	r3, [r7, #32]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002fa6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	6a3b      	ldr	r3, [r7, #32]
 8002fb0:	0d5b      	lsrs	r3, r3, #21
 8002fb2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002fb6:	4b08      	ldr	r3, [pc, #32]	; (8002fd8 <I2C_TransferConfig+0x60>)
 8002fb8:	430b      	orrs	r3, r1
 8002fba:	43db      	mvns	r3, r3
 8002fbc:	ea02 0103 	and.w	r1, r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002fca:	bf00      	nop
 8002fcc:	371c      	adds	r7, #28
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	03ff63ff 	.word	0x03ff63ff

08002fdc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b20      	cmp	r3, #32
 8002ff0:	d138      	bne.n	8003064 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d101      	bne.n	8003000 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	e032      	b.n	8003066 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2224      	movs	r2, #36	; 0x24
 800300c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 0201 	bic.w	r2, r2, #1
 800301e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800302e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6819      	ldr	r1, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	430a      	orrs	r2, r1
 800303e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f042 0201 	orr.w	r2, r2, #1
 800304e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2220      	movs	r2, #32
 8003054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003060:	2300      	movs	r3, #0
 8003062:	e000      	b.n	8003066 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003064:	2302      	movs	r3, #2
  }
}
 8003066:	4618      	mov	r0, r3
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003072:	b480      	push	{r7}
 8003074:	b085      	sub	sp, #20
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
 800307a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003082:	b2db      	uxtb	r3, r3
 8003084:	2b20      	cmp	r3, #32
 8003086:	d139      	bne.n	80030fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800308e:	2b01      	cmp	r3, #1
 8003090:	d101      	bne.n	8003096 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003092:	2302      	movs	r3, #2
 8003094:	e033      	b.n	80030fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2224      	movs	r2, #36	; 0x24
 80030a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 0201 	bic.w	r2, r2, #1
 80030b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80030c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	021b      	lsls	r3, r3, #8
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f042 0201 	orr.w	r2, r2, #1
 80030e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2220      	movs	r2, #32
 80030ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030f8:	2300      	movs	r3, #0
 80030fa:	e000      	b.n	80030fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80030fc:	2302      	movs	r3, #2
  }
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3714      	adds	r7, #20
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr

0800310a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800310a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800310c:	b08b      	sub	sp, #44	; 0x2c
 800310e:	af06      	add	r7, sp, #24
 8003110:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e0c4      	b.n	80032a6 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b00      	cmp	r3, #0
 8003126:	d106      	bne.n	8003136 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f7fd fe83 	bl	8000e3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2203      	movs	r2, #3
 800313a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f002 fd70 	bl	8005c28 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003148:	2300      	movs	r3, #0
 800314a:	73fb      	strb	r3, [r7, #15]
 800314c:	e040      	b.n	80031d0 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800314e:	7bfb      	ldrb	r3, [r7, #15]
 8003150:	6879      	ldr	r1, [r7, #4]
 8003152:	1c5a      	adds	r2, r3, #1
 8003154:	4613      	mov	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4413      	add	r3, r2
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	440b      	add	r3, r1
 800315e:	3301      	adds	r3, #1
 8003160:	2201      	movs	r2, #1
 8003162:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003164:	7bfb      	ldrb	r3, [r7, #15]
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	1c5a      	adds	r2, r3, #1
 800316a:	4613      	mov	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4413      	add	r3, r2
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	440b      	add	r3, r1
 8003174:	7bfa      	ldrb	r2, [r7, #15]
 8003176:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003178:	7bfb      	ldrb	r3, [r7, #15]
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	1c5a      	adds	r2, r3, #1
 800317e:	4613      	mov	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	440b      	add	r3, r1
 8003188:	3303      	adds	r3, #3
 800318a:	2200      	movs	r2, #0
 800318c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800318e:	7bfa      	ldrb	r2, [r7, #15]
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	4613      	mov	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	4413      	add	r3, r2
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	440b      	add	r3, r1
 800319c:	3338      	adds	r3, #56	; 0x38
 800319e:	2200      	movs	r2, #0
 80031a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80031a2:	7bfa      	ldrb	r2, [r7, #15]
 80031a4:	6879      	ldr	r1, [r7, #4]
 80031a6:	4613      	mov	r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4413      	add	r3, r2
 80031ac:	00db      	lsls	r3, r3, #3
 80031ae:	440b      	add	r3, r1
 80031b0:	333c      	adds	r3, #60	; 0x3c
 80031b2:	2200      	movs	r2, #0
 80031b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80031b6:	7bfa      	ldrb	r2, [r7, #15]
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	4613      	mov	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	4413      	add	r3, r2
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	440b      	add	r3, r1
 80031c4:	3340      	adds	r3, #64	; 0x40
 80031c6:	2200      	movs	r2, #0
 80031c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031ca:	7bfb      	ldrb	r3, [r7, #15]
 80031cc:	3301      	adds	r3, #1
 80031ce:	73fb      	strb	r3, [r7, #15]
 80031d0:	7bfa      	ldrb	r2, [r7, #15]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d3b9      	bcc.n	800314e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031da:	2300      	movs	r3, #0
 80031dc:	73fb      	strb	r3, [r7, #15]
 80031de:	e044      	b.n	800326a <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031e0:	7bfa      	ldrb	r2, [r7, #15]
 80031e2:	6879      	ldr	r1, [r7, #4]
 80031e4:	4613      	mov	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4413      	add	r3, r2
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	440b      	add	r3, r1
 80031ee:	f203 1369 	addw	r3, r3, #361	; 0x169
 80031f2:	2200      	movs	r2, #0
 80031f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80031f6:	7bfa      	ldrb	r2, [r7, #15]
 80031f8:	6879      	ldr	r1, [r7, #4]
 80031fa:	4613      	mov	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4413      	add	r3, r2
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	440b      	add	r3, r1
 8003204:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003208:	7bfa      	ldrb	r2, [r7, #15]
 800320a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800320c:	7bfa      	ldrb	r2, [r7, #15]
 800320e:	6879      	ldr	r1, [r7, #4]
 8003210:	4613      	mov	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	4413      	add	r3, r2
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	440b      	add	r3, r1
 800321a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800321e:	2200      	movs	r2, #0
 8003220:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003222:	7bfa      	ldrb	r2, [r7, #15]
 8003224:	6879      	ldr	r1, [r7, #4]
 8003226:	4613      	mov	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4413      	add	r3, r2
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	440b      	add	r3, r1
 8003230:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003238:	7bfa      	ldrb	r2, [r7, #15]
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	4613      	mov	r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	4413      	add	r3, r2
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	440b      	add	r3, r1
 8003246:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800324a:	2200      	movs	r2, #0
 800324c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800324e:	7bfa      	ldrb	r2, [r7, #15]
 8003250:	6879      	ldr	r1, [r7, #4]
 8003252:	4613      	mov	r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	4413      	add	r3, r2
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	440b      	add	r3, r1
 800325c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003264:	7bfb      	ldrb	r3, [r7, #15]
 8003266:	3301      	adds	r3, #1
 8003268:	73fb      	strb	r3, [r7, #15]
 800326a:	7bfa      	ldrb	r2, [r7, #15]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	429a      	cmp	r2, r3
 8003272:	d3b5      	bcc.n	80031e0 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	603b      	str	r3, [r7, #0]
 800327a:	687e      	ldr	r6, [r7, #4]
 800327c:	466d      	mov	r5, sp
 800327e:	f106 0410 	add.w	r4, r6, #16
 8003282:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003284:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003286:	6823      	ldr	r3, [r4, #0]
 8003288:	602b      	str	r3, [r5, #0]
 800328a:	1d33      	adds	r3, r6, #4
 800328c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800328e:	6838      	ldr	r0, [r7, #0]
 8003290:	f002 fce5 	bl	8005c5e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3714      	adds	r7, #20
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080032b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032c0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d102      	bne.n	80032d6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	f001 b823 	b.w	800431c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f000 817d 	beq.w	80035e6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80032ec:	4bbc      	ldr	r3, [pc, #752]	; (80035e0 <HAL_RCC_OscConfig+0x330>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f003 030c 	and.w	r3, r3, #12
 80032f4:	2b04      	cmp	r3, #4
 80032f6:	d00c      	beq.n	8003312 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032f8:	4bb9      	ldr	r3, [pc, #740]	; (80035e0 <HAL_RCC_OscConfig+0x330>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f003 030c 	and.w	r3, r3, #12
 8003300:	2b08      	cmp	r3, #8
 8003302:	d15c      	bne.n	80033be <HAL_RCC_OscConfig+0x10e>
 8003304:	4bb6      	ldr	r3, [pc, #728]	; (80035e0 <HAL_RCC_OscConfig+0x330>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800330c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003310:	d155      	bne.n	80033be <HAL_RCC_OscConfig+0x10e>
 8003312:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003316:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800331e:	fa93 f3a3 	rbit	r3, r3
 8003322:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003326:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800332a:	fab3 f383 	clz	r3, r3
 800332e:	b2db      	uxtb	r3, r3
 8003330:	095b      	lsrs	r3, r3, #5
 8003332:	b2db      	uxtb	r3, r3
 8003334:	f043 0301 	orr.w	r3, r3, #1
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b01      	cmp	r3, #1
 800333c:	d102      	bne.n	8003344 <HAL_RCC_OscConfig+0x94>
 800333e:	4ba8      	ldr	r3, [pc, #672]	; (80035e0 <HAL_RCC_OscConfig+0x330>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	e015      	b.n	8003370 <HAL_RCC_OscConfig+0xc0>
 8003344:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003348:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003350:	fa93 f3a3 	rbit	r3, r3
 8003354:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003358:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800335c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003360:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003364:	fa93 f3a3 	rbit	r3, r3
 8003368:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800336c:	4b9c      	ldr	r3, [pc, #624]	; (80035e0 <HAL_RCC_OscConfig+0x330>)
 800336e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003370:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003374:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003378:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800337c:	fa92 f2a2 	rbit	r2, r2
 8003380:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003384:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003388:	fab2 f282 	clz	r2, r2
 800338c:	b2d2      	uxtb	r2, r2
 800338e:	f042 0220 	orr.w	r2, r2, #32
 8003392:	b2d2      	uxtb	r2, r2
 8003394:	f002 021f 	and.w	r2, r2, #31
 8003398:	2101      	movs	r1, #1
 800339a:	fa01 f202 	lsl.w	r2, r1, r2
 800339e:	4013      	ands	r3, r2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 811f 	beq.w	80035e4 <HAL_RCC_OscConfig+0x334>
 80033a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f040 8116 	bne.w	80035e4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	f000 bfaf 	b.w	800431c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ce:	d106      	bne.n	80033de <HAL_RCC_OscConfig+0x12e>
 80033d0:	4b83      	ldr	r3, [pc, #524]	; (80035e0 <HAL_RCC_OscConfig+0x330>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a82      	ldr	r2, [pc, #520]	; (80035e0 <HAL_RCC_OscConfig+0x330>)
 80033d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033da:	6013      	str	r3, [r2, #0]
 80033dc:	e036      	b.n	800344c <HAL_RCC_OscConfig+0x19c>
 80033de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10c      	bne.n	8003408 <HAL_RCC_OscConfig+0x158>
 80033ee:	4b7c      	ldr	r3, [pc, #496]	; (80035e0 <HAL_RCC_OscConfig+0x330>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a7b      	ldr	r2, [pc, #492]	; (80035e0 <HAL_RCC_OscConfig+0x330>)
 80033f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033f8:	6013      	str	r3, [r2, #0]
 80033fa:	4b79      	ldr	r3, [pc, #484]	; (80035e0 <HAL_RCC_OscConfig+0x330>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a78      	ldr	r2, [pc, #480]	; (80035e0 <HAL_RCC_OscConfig+0x330>)
 8003400:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003404:	6013      	str	r3, [r2, #0]
 8003406:	e021      	b.n	800344c <HAL_RCC_OscConfig+0x19c>
 8003408:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800340c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003418:	d10c      	bne.n	8003434 <HAL_RCC_OscConfig+0x184>
 800341a:	4b71      	ldr	r3, [pc, #452]	; (80035e0 <HAL_RCC_OscConfig+0x330>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a70      	ldr	r2, [pc, #448]	; (80035e0 <HAL_RCC_OscConfig+0x330>)
 8003420:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003424:	6013      	str	r3, [r2, #0]
 8003426:	4b6e      	ldr	r3, [pc, #440]	; (80035e0 <HAL_RCC_OscConfig+0x330>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a6d      	ldr	r2, [pc, #436]	; (80035e0 <HAL_RCC_OscConfig+0x330>)
 800342c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003430:	6013      	str	r3, [r2, #0]
 8003432:	e00b      	b.n	800344c <HAL_RCC_OscConfig+0x19c>
 8003434:	4b6a      	ldr	r3, [pc, #424]	; (80035e0 <HAL_RCC_OscConfig+0x330>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a69      	ldr	r2, [pc, #420]	; (80035e0 <HAL_RCC_OscConfig+0x330>)
 800343a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800343e:	6013      	str	r3, [r2, #0]
 8003440:	4b67      	ldr	r3, [pc, #412]	; (80035e0 <HAL_RCC_OscConfig+0x330>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a66      	ldr	r2, [pc, #408]	; (80035e0 <HAL_RCC_OscConfig+0x330>)
 8003446:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800344a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800344c:	4b64      	ldr	r3, [pc, #400]	; (80035e0 <HAL_RCC_OscConfig+0x330>)
 800344e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003450:	f023 020f 	bic.w	r2, r3, #15
 8003454:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003458:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	495f      	ldr	r1, [pc, #380]	; (80035e0 <HAL_RCC_OscConfig+0x330>)
 8003462:	4313      	orrs	r3, r2
 8003464:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003466:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800346a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d059      	beq.n	800352a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003476:	f7fd fe01 	bl	800107c <HAL_GetTick>
 800347a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800347e:	e00a      	b.n	8003496 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003480:	f7fd fdfc 	bl	800107c <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	2b64      	cmp	r3, #100	; 0x64
 800348e:	d902      	bls.n	8003496 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	f000 bf43 	b.w	800431c <HAL_RCC_OscConfig+0x106c>
 8003496:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800349a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80034a2:	fa93 f3a3 	rbit	r3, r3
 80034a6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80034aa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ae:	fab3 f383 	clz	r3, r3
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	095b      	lsrs	r3, r3, #5
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	f043 0301 	orr.w	r3, r3, #1
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d102      	bne.n	80034c8 <HAL_RCC_OscConfig+0x218>
 80034c2:	4b47      	ldr	r3, [pc, #284]	; (80035e0 <HAL_RCC_OscConfig+0x330>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	e015      	b.n	80034f4 <HAL_RCC_OscConfig+0x244>
 80034c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034cc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80034d4:	fa93 f3a3 	rbit	r3, r3
 80034d8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80034dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034e0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80034e4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80034e8:	fa93 f3a3 	rbit	r3, r3
 80034ec:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80034f0:	4b3b      	ldr	r3, [pc, #236]	; (80035e0 <HAL_RCC_OscConfig+0x330>)
 80034f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034f8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80034fc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003500:	fa92 f2a2 	rbit	r2, r2
 8003504:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003508:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800350c:	fab2 f282 	clz	r2, r2
 8003510:	b2d2      	uxtb	r2, r2
 8003512:	f042 0220 	orr.w	r2, r2, #32
 8003516:	b2d2      	uxtb	r2, r2
 8003518:	f002 021f 	and.w	r2, r2, #31
 800351c:	2101      	movs	r1, #1
 800351e:	fa01 f202 	lsl.w	r2, r1, r2
 8003522:	4013      	ands	r3, r2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d0ab      	beq.n	8003480 <HAL_RCC_OscConfig+0x1d0>
 8003528:	e05d      	b.n	80035e6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800352a:	f7fd fda7 	bl	800107c <HAL_GetTick>
 800352e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003532:	e00a      	b.n	800354a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003534:	f7fd fda2 	bl	800107c <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b64      	cmp	r3, #100	; 0x64
 8003542:	d902      	bls.n	800354a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	f000 bee9 	b.w	800431c <HAL_RCC_OscConfig+0x106c>
 800354a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800354e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003552:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003556:	fa93 f3a3 	rbit	r3, r3
 800355a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800355e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003562:	fab3 f383 	clz	r3, r3
 8003566:	b2db      	uxtb	r3, r3
 8003568:	095b      	lsrs	r3, r3, #5
 800356a:	b2db      	uxtb	r3, r3
 800356c:	f043 0301 	orr.w	r3, r3, #1
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b01      	cmp	r3, #1
 8003574:	d102      	bne.n	800357c <HAL_RCC_OscConfig+0x2cc>
 8003576:	4b1a      	ldr	r3, [pc, #104]	; (80035e0 <HAL_RCC_OscConfig+0x330>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	e015      	b.n	80035a8 <HAL_RCC_OscConfig+0x2f8>
 800357c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003580:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003584:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003588:	fa93 f3a3 	rbit	r3, r3
 800358c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003590:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003594:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003598:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800359c:	fa93 f3a3 	rbit	r3, r3
 80035a0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80035a4:	4b0e      	ldr	r3, [pc, #56]	; (80035e0 <HAL_RCC_OscConfig+0x330>)
 80035a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80035ac:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80035b0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80035b4:	fa92 f2a2 	rbit	r2, r2
 80035b8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80035bc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80035c0:	fab2 f282 	clz	r2, r2
 80035c4:	b2d2      	uxtb	r2, r2
 80035c6:	f042 0220 	orr.w	r2, r2, #32
 80035ca:	b2d2      	uxtb	r2, r2
 80035cc:	f002 021f 	and.w	r2, r2, #31
 80035d0:	2101      	movs	r1, #1
 80035d2:	fa01 f202 	lsl.w	r2, r1, r2
 80035d6:	4013      	ands	r3, r2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1ab      	bne.n	8003534 <HAL_RCC_OscConfig+0x284>
 80035dc:	e003      	b.n	80035e6 <HAL_RCC_OscConfig+0x336>
 80035de:	bf00      	nop
 80035e0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f000 817d 	beq.w	80038f6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80035fc:	4ba6      	ldr	r3, [pc, #664]	; (8003898 <HAL_RCC_OscConfig+0x5e8>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f003 030c 	and.w	r3, r3, #12
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00b      	beq.n	8003620 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003608:	4ba3      	ldr	r3, [pc, #652]	; (8003898 <HAL_RCC_OscConfig+0x5e8>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f003 030c 	and.w	r3, r3, #12
 8003610:	2b08      	cmp	r3, #8
 8003612:	d172      	bne.n	80036fa <HAL_RCC_OscConfig+0x44a>
 8003614:	4ba0      	ldr	r3, [pc, #640]	; (8003898 <HAL_RCC_OscConfig+0x5e8>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d16c      	bne.n	80036fa <HAL_RCC_OscConfig+0x44a>
 8003620:	2302      	movs	r3, #2
 8003622:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003626:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800362a:	fa93 f3a3 	rbit	r3, r3
 800362e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003632:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003636:	fab3 f383 	clz	r3, r3
 800363a:	b2db      	uxtb	r3, r3
 800363c:	095b      	lsrs	r3, r3, #5
 800363e:	b2db      	uxtb	r3, r3
 8003640:	f043 0301 	orr.w	r3, r3, #1
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b01      	cmp	r3, #1
 8003648:	d102      	bne.n	8003650 <HAL_RCC_OscConfig+0x3a0>
 800364a:	4b93      	ldr	r3, [pc, #588]	; (8003898 <HAL_RCC_OscConfig+0x5e8>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	e013      	b.n	8003678 <HAL_RCC_OscConfig+0x3c8>
 8003650:	2302      	movs	r3, #2
 8003652:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003656:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800365a:	fa93 f3a3 	rbit	r3, r3
 800365e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003662:	2302      	movs	r3, #2
 8003664:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003668:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800366c:	fa93 f3a3 	rbit	r3, r3
 8003670:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003674:	4b88      	ldr	r3, [pc, #544]	; (8003898 <HAL_RCC_OscConfig+0x5e8>)
 8003676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003678:	2202      	movs	r2, #2
 800367a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800367e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003682:	fa92 f2a2 	rbit	r2, r2
 8003686:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800368a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800368e:	fab2 f282 	clz	r2, r2
 8003692:	b2d2      	uxtb	r2, r2
 8003694:	f042 0220 	orr.w	r2, r2, #32
 8003698:	b2d2      	uxtb	r2, r2
 800369a:	f002 021f 	and.w	r2, r2, #31
 800369e:	2101      	movs	r1, #1
 80036a0:	fa01 f202 	lsl.w	r2, r1, r2
 80036a4:	4013      	ands	r3, r2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00a      	beq.n	80036c0 <HAL_RCC_OscConfig+0x410>
 80036aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d002      	beq.n	80036c0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	f000 be2e 	b.w	800431c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c0:	4b75      	ldr	r3, [pc, #468]	; (8003898 <HAL_RCC_OscConfig+0x5e8>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	21f8      	movs	r1, #248	; 0xf8
 80036d6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036da:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80036de:	fa91 f1a1 	rbit	r1, r1
 80036e2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80036e6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80036ea:	fab1 f181 	clz	r1, r1
 80036ee:	b2c9      	uxtb	r1, r1
 80036f0:	408b      	lsls	r3, r1
 80036f2:	4969      	ldr	r1, [pc, #420]	; (8003898 <HAL_RCC_OscConfig+0x5e8>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036f8:	e0fd      	b.n	80038f6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	2b00      	cmp	r3, #0
 8003708:	f000 8088 	beq.w	800381c <HAL_RCC_OscConfig+0x56c>
 800370c:	2301      	movs	r3, #1
 800370e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003712:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003716:	fa93 f3a3 	rbit	r3, r3
 800371a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800371e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003722:	fab3 f383 	clz	r3, r3
 8003726:	b2db      	uxtb	r3, r3
 8003728:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800372c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	461a      	mov	r2, r3
 8003734:	2301      	movs	r3, #1
 8003736:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003738:	f7fd fca0 	bl	800107c <HAL_GetTick>
 800373c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003740:	e00a      	b.n	8003758 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003742:	f7fd fc9b 	bl	800107c <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d902      	bls.n	8003758 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	f000 bde2 	b.w	800431c <HAL_RCC_OscConfig+0x106c>
 8003758:	2302      	movs	r3, #2
 800375a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003762:	fa93 f3a3 	rbit	r3, r3
 8003766:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800376a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800376e:	fab3 f383 	clz	r3, r3
 8003772:	b2db      	uxtb	r3, r3
 8003774:	095b      	lsrs	r3, r3, #5
 8003776:	b2db      	uxtb	r3, r3
 8003778:	f043 0301 	orr.w	r3, r3, #1
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b01      	cmp	r3, #1
 8003780:	d102      	bne.n	8003788 <HAL_RCC_OscConfig+0x4d8>
 8003782:	4b45      	ldr	r3, [pc, #276]	; (8003898 <HAL_RCC_OscConfig+0x5e8>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	e013      	b.n	80037b0 <HAL_RCC_OscConfig+0x500>
 8003788:	2302      	movs	r3, #2
 800378a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800378e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003792:	fa93 f3a3 	rbit	r3, r3
 8003796:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800379a:	2302      	movs	r3, #2
 800379c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80037a0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80037a4:	fa93 f3a3 	rbit	r3, r3
 80037a8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80037ac:	4b3a      	ldr	r3, [pc, #232]	; (8003898 <HAL_RCC_OscConfig+0x5e8>)
 80037ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b0:	2202      	movs	r2, #2
 80037b2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80037b6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80037ba:	fa92 f2a2 	rbit	r2, r2
 80037be:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80037c2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80037c6:	fab2 f282 	clz	r2, r2
 80037ca:	b2d2      	uxtb	r2, r2
 80037cc:	f042 0220 	orr.w	r2, r2, #32
 80037d0:	b2d2      	uxtb	r2, r2
 80037d2:	f002 021f 	and.w	r2, r2, #31
 80037d6:	2101      	movs	r1, #1
 80037d8:	fa01 f202 	lsl.w	r2, r1, r2
 80037dc:	4013      	ands	r3, r2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d0af      	beq.n	8003742 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037e2:	4b2d      	ldr	r3, [pc, #180]	; (8003898 <HAL_RCC_OscConfig+0x5e8>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	21f8      	movs	r1, #248	; 0xf8
 80037f8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003800:	fa91 f1a1 	rbit	r1, r1
 8003804:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003808:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800380c:	fab1 f181 	clz	r1, r1
 8003810:	b2c9      	uxtb	r1, r1
 8003812:	408b      	lsls	r3, r1
 8003814:	4920      	ldr	r1, [pc, #128]	; (8003898 <HAL_RCC_OscConfig+0x5e8>)
 8003816:	4313      	orrs	r3, r2
 8003818:	600b      	str	r3, [r1, #0]
 800381a:	e06c      	b.n	80038f6 <HAL_RCC_OscConfig+0x646>
 800381c:	2301      	movs	r3, #1
 800381e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003822:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003826:	fa93 f3a3 	rbit	r3, r3
 800382a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800382e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003832:	fab3 f383 	clz	r3, r3
 8003836:	b2db      	uxtb	r3, r3
 8003838:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800383c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	461a      	mov	r2, r3
 8003844:	2300      	movs	r3, #0
 8003846:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003848:	f7fd fc18 	bl	800107c <HAL_GetTick>
 800384c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003850:	e00a      	b.n	8003868 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003852:	f7fd fc13 	bl	800107c <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d902      	bls.n	8003868 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	f000 bd5a 	b.w	800431c <HAL_RCC_OscConfig+0x106c>
 8003868:	2302      	movs	r3, #2
 800386a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003872:	fa93 f3a3 	rbit	r3, r3
 8003876:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800387a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800387e:	fab3 f383 	clz	r3, r3
 8003882:	b2db      	uxtb	r3, r3
 8003884:	095b      	lsrs	r3, r3, #5
 8003886:	b2db      	uxtb	r3, r3
 8003888:	f043 0301 	orr.w	r3, r3, #1
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b01      	cmp	r3, #1
 8003890:	d104      	bne.n	800389c <HAL_RCC_OscConfig+0x5ec>
 8003892:	4b01      	ldr	r3, [pc, #4]	; (8003898 <HAL_RCC_OscConfig+0x5e8>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	e015      	b.n	80038c4 <HAL_RCC_OscConfig+0x614>
 8003898:	40021000 	.word	0x40021000
 800389c:	2302      	movs	r3, #2
 800389e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80038a6:	fa93 f3a3 	rbit	r3, r3
 80038aa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80038ae:	2302      	movs	r3, #2
 80038b0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80038b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80038b8:	fa93 f3a3 	rbit	r3, r3
 80038bc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80038c0:	4bc8      	ldr	r3, [pc, #800]	; (8003be4 <HAL_RCC_OscConfig+0x934>)
 80038c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c4:	2202      	movs	r2, #2
 80038c6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80038ca:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80038ce:	fa92 f2a2 	rbit	r2, r2
 80038d2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80038d6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80038da:	fab2 f282 	clz	r2, r2
 80038de:	b2d2      	uxtb	r2, r2
 80038e0:	f042 0220 	orr.w	r2, r2, #32
 80038e4:	b2d2      	uxtb	r2, r2
 80038e6:	f002 021f 	and.w	r2, r2, #31
 80038ea:	2101      	movs	r1, #1
 80038ec:	fa01 f202 	lsl.w	r2, r1, r2
 80038f0:	4013      	ands	r3, r2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1ad      	bne.n	8003852 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0308 	and.w	r3, r3, #8
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 8110 	beq.w	8003b2c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800390c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003910:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d079      	beq.n	8003a10 <HAL_RCC_OscConfig+0x760>
 800391c:	2301      	movs	r3, #1
 800391e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003922:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003926:	fa93 f3a3 	rbit	r3, r3
 800392a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800392e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003932:	fab3 f383 	clz	r3, r3
 8003936:	b2db      	uxtb	r3, r3
 8003938:	461a      	mov	r2, r3
 800393a:	4bab      	ldr	r3, [pc, #684]	; (8003be8 <HAL_RCC_OscConfig+0x938>)
 800393c:	4413      	add	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	461a      	mov	r2, r3
 8003942:	2301      	movs	r3, #1
 8003944:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003946:	f7fd fb99 	bl	800107c <HAL_GetTick>
 800394a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800394e:	e00a      	b.n	8003966 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003950:	f7fd fb94 	bl	800107c <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	2b02      	cmp	r3, #2
 800395e:	d902      	bls.n	8003966 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	f000 bcdb 	b.w	800431c <HAL_RCC_OscConfig+0x106c>
 8003966:	2302      	movs	r3, #2
 8003968:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003970:	fa93 f3a3 	rbit	r3, r3
 8003974:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003978:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800397c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003980:	2202      	movs	r2, #2
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003988:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	fa93 f2a3 	rbit	r2, r3
 8003992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003996:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800399a:	601a      	str	r2, [r3, #0]
 800399c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80039a4:	2202      	movs	r2, #2
 80039a6:	601a      	str	r2, [r3, #0]
 80039a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	fa93 f2a3 	rbit	r2, r3
 80039b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80039be:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039c0:	4b88      	ldr	r3, [pc, #544]	; (8003be4 <HAL_RCC_OscConfig+0x934>)
 80039c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039c8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80039cc:	2102      	movs	r1, #2
 80039ce:	6019      	str	r1, [r3, #0]
 80039d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039d4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	fa93 f1a3 	rbit	r1, r3
 80039de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039e2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80039e6:	6019      	str	r1, [r3, #0]
  return result;
 80039e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ec:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	fab3 f383 	clz	r3, r3
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	f003 031f 	and.w	r3, r3, #31
 8003a02:	2101      	movs	r1, #1
 8003a04:	fa01 f303 	lsl.w	r3, r1, r3
 8003a08:	4013      	ands	r3, r2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d0a0      	beq.n	8003950 <HAL_RCC_OscConfig+0x6a0>
 8003a0e:	e08d      	b.n	8003b2c <HAL_RCC_OscConfig+0x87c>
 8003a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a14:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003a18:	2201      	movs	r2, #1
 8003a1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a20:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	fa93 f2a3 	rbit	r2, r3
 8003a2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a2e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003a32:	601a      	str	r2, [r3, #0]
  return result;
 8003a34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a38:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003a3c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a3e:	fab3 f383 	clz	r3, r3
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	461a      	mov	r2, r3
 8003a46:	4b68      	ldr	r3, [pc, #416]	; (8003be8 <HAL_RCC_OscConfig+0x938>)
 8003a48:	4413      	add	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	2300      	movs	r3, #0
 8003a50:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a52:	f7fd fb13 	bl	800107c <HAL_GetTick>
 8003a56:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a5a:	e00a      	b.n	8003a72 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a5c:	f7fd fb0e 	bl	800107c <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d902      	bls.n	8003a72 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	f000 bc55 	b.w	800431c <HAL_RCC_OscConfig+0x106c>
 8003a72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a76:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a82:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	fa93 f2a3 	rbit	r2, r3
 8003a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a90:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003a94:	601a      	str	r2, [r3, #0]
 8003a96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a9a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	601a      	str	r2, [r3, #0]
 8003aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aa6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	fa93 f2a3 	rbit	r2, r3
 8003ab0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ab4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003ab8:	601a      	str	r2, [r3, #0]
 8003aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003abe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	601a      	str	r2, [r3, #0]
 8003ac6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	fa93 f2a3 	rbit	r2, r3
 8003ad4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ad8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003adc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ade:	4b41      	ldr	r3, [pc, #260]	; (8003be4 <HAL_RCC_OscConfig+0x934>)
 8003ae0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ae6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003aea:	2102      	movs	r1, #2
 8003aec:	6019      	str	r1, [r3, #0]
 8003aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003af2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	fa93 f1a3 	rbit	r1, r3
 8003afc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b00:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003b04:	6019      	str	r1, [r3, #0]
  return result;
 8003b06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b0a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	fab3 f383 	clz	r3, r3
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	f003 031f 	and.w	r3, r3, #31
 8003b20:	2101      	movs	r1, #1
 8003b22:	fa01 f303 	lsl.w	r3, r1, r3
 8003b26:	4013      	ands	r3, r2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d197      	bne.n	8003a5c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b30:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0304 	and.w	r3, r3, #4
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f000 81a1 	beq.w	8003e84 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b42:	2300      	movs	r3, #0
 8003b44:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b48:	4b26      	ldr	r3, [pc, #152]	; (8003be4 <HAL_RCC_OscConfig+0x934>)
 8003b4a:	69db      	ldr	r3, [r3, #28]
 8003b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d116      	bne.n	8003b82 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b54:	4b23      	ldr	r3, [pc, #140]	; (8003be4 <HAL_RCC_OscConfig+0x934>)
 8003b56:	69db      	ldr	r3, [r3, #28]
 8003b58:	4a22      	ldr	r2, [pc, #136]	; (8003be4 <HAL_RCC_OscConfig+0x934>)
 8003b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b5e:	61d3      	str	r3, [r2, #28]
 8003b60:	4b20      	ldr	r3, [pc, #128]	; (8003be4 <HAL_RCC_OscConfig+0x934>)
 8003b62:	69db      	ldr	r3, [r3, #28]
 8003b64:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b6c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003b70:	601a      	str	r2, [r3, #0]
 8003b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b76:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003b7a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b82:	4b1a      	ldr	r3, [pc, #104]	; (8003bec <HAL_RCC_OscConfig+0x93c>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d11a      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b8e:	4b17      	ldr	r3, [pc, #92]	; (8003bec <HAL_RCC_OscConfig+0x93c>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a16      	ldr	r2, [pc, #88]	; (8003bec <HAL_RCC_OscConfig+0x93c>)
 8003b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b98:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b9a:	f7fd fa6f 	bl	800107c <HAL_GetTick>
 8003b9e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba2:	e009      	b.n	8003bb8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ba4:	f7fd fa6a 	bl	800107c <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b64      	cmp	r3, #100	; 0x64
 8003bb2:	d901      	bls.n	8003bb8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e3b1      	b.n	800431c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb8:	4b0c      	ldr	r3, [pc, #48]	; (8003bec <HAL_RCC_OscConfig+0x93c>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d0ef      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bc8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d10d      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x940>
 8003bd4:	4b03      	ldr	r3, [pc, #12]	; (8003be4 <HAL_RCC_OscConfig+0x934>)
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	4a02      	ldr	r2, [pc, #8]	; (8003be4 <HAL_RCC_OscConfig+0x934>)
 8003bda:	f043 0301 	orr.w	r3, r3, #1
 8003bde:	6213      	str	r3, [r2, #32]
 8003be0:	e03c      	b.n	8003c5c <HAL_RCC_OscConfig+0x9ac>
 8003be2:	bf00      	nop
 8003be4:	40021000 	.word	0x40021000
 8003be8:	10908120 	.word	0x10908120
 8003bec:	40007000 	.word	0x40007000
 8003bf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bf4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10c      	bne.n	8003c1a <HAL_RCC_OscConfig+0x96a>
 8003c00:	4bc1      	ldr	r3, [pc, #772]	; (8003f08 <HAL_RCC_OscConfig+0xc58>)
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	4ac0      	ldr	r2, [pc, #768]	; (8003f08 <HAL_RCC_OscConfig+0xc58>)
 8003c06:	f023 0301 	bic.w	r3, r3, #1
 8003c0a:	6213      	str	r3, [r2, #32]
 8003c0c:	4bbe      	ldr	r3, [pc, #760]	; (8003f08 <HAL_RCC_OscConfig+0xc58>)
 8003c0e:	6a1b      	ldr	r3, [r3, #32]
 8003c10:	4abd      	ldr	r2, [pc, #756]	; (8003f08 <HAL_RCC_OscConfig+0xc58>)
 8003c12:	f023 0304 	bic.w	r3, r3, #4
 8003c16:	6213      	str	r3, [r2, #32]
 8003c18:	e020      	b.n	8003c5c <HAL_RCC_OscConfig+0x9ac>
 8003c1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	2b05      	cmp	r3, #5
 8003c28:	d10c      	bne.n	8003c44 <HAL_RCC_OscConfig+0x994>
 8003c2a:	4bb7      	ldr	r3, [pc, #732]	; (8003f08 <HAL_RCC_OscConfig+0xc58>)
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	4ab6      	ldr	r2, [pc, #728]	; (8003f08 <HAL_RCC_OscConfig+0xc58>)
 8003c30:	f043 0304 	orr.w	r3, r3, #4
 8003c34:	6213      	str	r3, [r2, #32]
 8003c36:	4bb4      	ldr	r3, [pc, #720]	; (8003f08 <HAL_RCC_OscConfig+0xc58>)
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	4ab3      	ldr	r2, [pc, #716]	; (8003f08 <HAL_RCC_OscConfig+0xc58>)
 8003c3c:	f043 0301 	orr.w	r3, r3, #1
 8003c40:	6213      	str	r3, [r2, #32]
 8003c42:	e00b      	b.n	8003c5c <HAL_RCC_OscConfig+0x9ac>
 8003c44:	4bb0      	ldr	r3, [pc, #704]	; (8003f08 <HAL_RCC_OscConfig+0xc58>)
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	4aaf      	ldr	r2, [pc, #700]	; (8003f08 <HAL_RCC_OscConfig+0xc58>)
 8003c4a:	f023 0301 	bic.w	r3, r3, #1
 8003c4e:	6213      	str	r3, [r2, #32]
 8003c50:	4bad      	ldr	r3, [pc, #692]	; (8003f08 <HAL_RCC_OscConfig+0xc58>)
 8003c52:	6a1b      	ldr	r3, [r3, #32]
 8003c54:	4aac      	ldr	r2, [pc, #688]	; (8003f08 <HAL_RCC_OscConfig+0xc58>)
 8003c56:	f023 0304 	bic.w	r3, r3, #4
 8003c5a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f000 8081 	beq.w	8003d70 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c6e:	f7fd fa05 	bl	800107c <HAL_GetTick>
 8003c72:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c76:	e00b      	b.n	8003c90 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c78:	f7fd fa00 	bl	800107c <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d901      	bls.n	8003c90 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e345      	b.n	800431c <HAL_RCC_OscConfig+0x106c>
 8003c90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c94:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003c98:	2202      	movs	r2, #2
 8003c9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ca0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	fa93 f2a3 	rbit	r2, r3
 8003caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cae:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003cb2:	601a      	str	r2, [r3, #0]
 8003cb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cb8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003cbc:	2202      	movs	r2, #2
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cc4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	fa93 f2a3 	rbit	r2, r3
 8003cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cd2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003cd6:	601a      	str	r2, [r3, #0]
  return result;
 8003cd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cdc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003ce0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce2:	fab3 f383 	clz	r3, r3
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	095b      	lsrs	r3, r3, #5
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	f043 0302 	orr.w	r3, r3, #2
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d102      	bne.n	8003cfc <HAL_RCC_OscConfig+0xa4c>
 8003cf6:	4b84      	ldr	r3, [pc, #528]	; (8003f08 <HAL_RCC_OscConfig+0xc58>)
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	e013      	b.n	8003d24 <HAL_RCC_OscConfig+0xa74>
 8003cfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d00:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003d04:	2202      	movs	r2, #2
 8003d06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d0c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	fa93 f2a3 	rbit	r2, r3
 8003d16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d1a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	4b79      	ldr	r3, [pc, #484]	; (8003f08 <HAL_RCC_OscConfig+0xc58>)
 8003d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d28:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003d2c:	2102      	movs	r1, #2
 8003d2e:	6011      	str	r1, [r2, #0]
 8003d30:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d34:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003d38:	6812      	ldr	r2, [r2, #0]
 8003d3a:	fa92 f1a2 	rbit	r1, r2
 8003d3e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d42:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003d46:	6011      	str	r1, [r2, #0]
  return result;
 8003d48:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d4c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003d50:	6812      	ldr	r2, [r2, #0]
 8003d52:	fab2 f282 	clz	r2, r2
 8003d56:	b2d2      	uxtb	r2, r2
 8003d58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d5c:	b2d2      	uxtb	r2, r2
 8003d5e:	f002 021f 	and.w	r2, r2, #31
 8003d62:	2101      	movs	r1, #1
 8003d64:	fa01 f202 	lsl.w	r2, r1, r2
 8003d68:	4013      	ands	r3, r2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d084      	beq.n	8003c78 <HAL_RCC_OscConfig+0x9c8>
 8003d6e:	e07f      	b.n	8003e70 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d70:	f7fd f984 	bl	800107c <HAL_GetTick>
 8003d74:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d78:	e00b      	b.n	8003d92 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d7a:	f7fd f97f 	bl	800107c <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e2c4      	b.n	800431c <HAL_RCC_OscConfig+0x106c>
 8003d92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d96:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003da2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	fa93 f2a3 	rbit	r2, r3
 8003dac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003db0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003db4:	601a      	str	r2, [r3, #0]
 8003db6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dba:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003dbe:	2202      	movs	r2, #2
 8003dc0:	601a      	str	r2, [r3, #0]
 8003dc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dc6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	fa93 f2a3 	rbit	r2, r3
 8003dd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dd4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003dd8:	601a      	str	r2, [r3, #0]
  return result;
 8003dda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dde:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003de2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003de4:	fab3 f383 	clz	r3, r3
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	095b      	lsrs	r3, r3, #5
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	f043 0302 	orr.w	r3, r3, #2
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d102      	bne.n	8003dfe <HAL_RCC_OscConfig+0xb4e>
 8003df8:	4b43      	ldr	r3, [pc, #268]	; (8003f08 <HAL_RCC_OscConfig+0xc58>)
 8003dfa:	6a1b      	ldr	r3, [r3, #32]
 8003dfc:	e013      	b.n	8003e26 <HAL_RCC_OscConfig+0xb76>
 8003dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e02:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003e06:	2202      	movs	r2, #2
 8003e08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e0e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	fa93 f2a3 	rbit	r2, r3
 8003e18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e1c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003e20:	601a      	str	r2, [r3, #0]
 8003e22:	4b39      	ldr	r3, [pc, #228]	; (8003f08 <HAL_RCC_OscConfig+0xc58>)
 8003e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e2a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003e2e:	2102      	movs	r1, #2
 8003e30:	6011      	str	r1, [r2, #0]
 8003e32:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e36:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003e3a:	6812      	ldr	r2, [r2, #0]
 8003e3c:	fa92 f1a2 	rbit	r1, r2
 8003e40:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e44:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003e48:	6011      	str	r1, [r2, #0]
  return result;
 8003e4a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e4e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003e52:	6812      	ldr	r2, [r2, #0]
 8003e54:	fab2 f282 	clz	r2, r2
 8003e58:	b2d2      	uxtb	r2, r2
 8003e5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e5e:	b2d2      	uxtb	r2, r2
 8003e60:	f002 021f 	and.w	r2, r2, #31
 8003e64:	2101      	movs	r1, #1
 8003e66:	fa01 f202 	lsl.w	r2, r1, r2
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d184      	bne.n	8003d7a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e70:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d105      	bne.n	8003e84 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e78:	4b23      	ldr	r3, [pc, #140]	; (8003f08 <HAL_RCC_OscConfig+0xc58>)
 8003e7a:	69db      	ldr	r3, [r3, #28]
 8003e7c:	4a22      	ldr	r2, [pc, #136]	; (8003f08 <HAL_RCC_OscConfig+0xc58>)
 8003e7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e82:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	69db      	ldr	r3, [r3, #28]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f000 8242 	beq.w	800431a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e96:	4b1c      	ldr	r3, [pc, #112]	; (8003f08 <HAL_RCC_OscConfig+0xc58>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f003 030c 	and.w	r3, r3, #12
 8003e9e:	2b08      	cmp	r3, #8
 8003ea0:	f000 8213 	beq.w	80042ca <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ea4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ea8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	69db      	ldr	r3, [r3, #28]
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	f040 8162 	bne.w	800417a <HAL_RCC_OscConfig+0xeca>
 8003eb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eba:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003ebe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ec2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ec8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	fa93 f2a3 	rbit	r2, r3
 8003ed2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ed6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003eda:	601a      	str	r2, [r3, #0]
  return result;
 8003edc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ee0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003ee4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ee6:	fab3 f383 	clz	r3, r3
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ef0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	2300      	movs	r3, #0
 8003efa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003efc:	f7fd f8be 	bl	800107c <HAL_GetTick>
 8003f00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f04:	e00c      	b.n	8003f20 <HAL_RCC_OscConfig+0xc70>
 8003f06:	bf00      	nop
 8003f08:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f0c:	f7fd f8b6 	bl	800107c <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e1fd      	b.n	800431c <HAL_RCC_OscConfig+0x106c>
 8003f20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f24:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003f28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f32:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	fa93 f2a3 	rbit	r2, r3
 8003f3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f40:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003f44:	601a      	str	r2, [r3, #0]
  return result;
 8003f46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f4a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003f4e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f50:	fab3 f383 	clz	r3, r3
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	095b      	lsrs	r3, r3, #5
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	f043 0301 	orr.w	r3, r3, #1
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d102      	bne.n	8003f6a <HAL_RCC_OscConfig+0xcba>
 8003f64:	4bb0      	ldr	r3, [pc, #704]	; (8004228 <HAL_RCC_OscConfig+0xf78>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	e027      	b.n	8003fba <HAL_RCC_OscConfig+0xd0a>
 8003f6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f6e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003f72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f7c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	fa93 f2a3 	rbit	r2, r3
 8003f86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f8a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f94:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003f98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f9c:	601a      	str	r2, [r3, #0]
 8003f9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fa2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	fa93 f2a3 	rbit	r2, r3
 8003fac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fb0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	4b9c      	ldr	r3, [pc, #624]	; (8004228 <HAL_RCC_OscConfig+0xf78>)
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003fbe:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003fc2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003fc6:	6011      	str	r1, [r2, #0]
 8003fc8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003fcc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003fd0:	6812      	ldr	r2, [r2, #0]
 8003fd2:	fa92 f1a2 	rbit	r1, r2
 8003fd6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003fda:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003fde:	6011      	str	r1, [r2, #0]
  return result;
 8003fe0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003fe4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003fe8:	6812      	ldr	r2, [r2, #0]
 8003fea:	fab2 f282 	clz	r2, r2
 8003fee:	b2d2      	uxtb	r2, r2
 8003ff0:	f042 0220 	orr.w	r2, r2, #32
 8003ff4:	b2d2      	uxtb	r2, r2
 8003ff6:	f002 021f 	and.w	r2, r2, #31
 8003ffa:	2101      	movs	r1, #1
 8003ffc:	fa01 f202 	lsl.w	r2, r1, r2
 8004000:	4013      	ands	r3, r2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d182      	bne.n	8003f0c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004006:	4b88      	ldr	r3, [pc, #544]	; (8004228 <HAL_RCC_OscConfig+0xf78>)
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800400e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004012:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800401a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800401e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	430b      	orrs	r3, r1
 8004028:	497f      	ldr	r1, [pc, #508]	; (8004228 <HAL_RCC_OscConfig+0xf78>)
 800402a:	4313      	orrs	r3, r2
 800402c:	604b      	str	r3, [r1, #4]
 800402e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004032:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004036:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800403a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800403c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004040:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	fa93 f2a3 	rbit	r2, r3
 800404a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800404e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004052:	601a      	str	r2, [r3, #0]
  return result;
 8004054:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004058:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800405c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800405e:	fab3 f383 	clz	r3, r3
 8004062:	b2db      	uxtb	r3, r3
 8004064:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004068:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	461a      	mov	r2, r3
 8004070:	2301      	movs	r3, #1
 8004072:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004074:	f7fd f802 	bl	800107c <HAL_GetTick>
 8004078:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800407c:	e009      	b.n	8004092 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800407e:	f7fc fffd 	bl	800107c <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e144      	b.n	800431c <HAL_RCC_OscConfig+0x106c>
 8004092:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004096:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800409a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800409e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040a4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	fa93 f2a3 	rbit	r2, r3
 80040ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040b2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80040b6:	601a      	str	r2, [r3, #0]
  return result;
 80040b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040bc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80040c0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040c2:	fab3 f383 	clz	r3, r3
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	095b      	lsrs	r3, r3, #5
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	f043 0301 	orr.w	r3, r3, #1
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d102      	bne.n	80040dc <HAL_RCC_OscConfig+0xe2c>
 80040d6:	4b54      	ldr	r3, [pc, #336]	; (8004228 <HAL_RCC_OscConfig+0xf78>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	e027      	b.n	800412c <HAL_RCC_OscConfig+0xe7c>
 80040dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040e0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80040e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ee:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	fa93 f2a3 	rbit	r2, r3
 80040f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040fc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004100:	601a      	str	r2, [r3, #0]
 8004102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004106:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800410a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800410e:	601a      	str	r2, [r3, #0]
 8004110:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004114:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	fa93 f2a3 	rbit	r2, r3
 800411e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004122:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	4b3f      	ldr	r3, [pc, #252]	; (8004228 <HAL_RCC_OscConfig+0xf78>)
 800412a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004130:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004134:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004138:	6011      	str	r1, [r2, #0]
 800413a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800413e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004142:	6812      	ldr	r2, [r2, #0]
 8004144:	fa92 f1a2 	rbit	r1, r2
 8004148:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800414c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004150:	6011      	str	r1, [r2, #0]
  return result;
 8004152:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004156:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800415a:	6812      	ldr	r2, [r2, #0]
 800415c:	fab2 f282 	clz	r2, r2
 8004160:	b2d2      	uxtb	r2, r2
 8004162:	f042 0220 	orr.w	r2, r2, #32
 8004166:	b2d2      	uxtb	r2, r2
 8004168:	f002 021f 	and.w	r2, r2, #31
 800416c:	2101      	movs	r1, #1
 800416e:	fa01 f202 	lsl.w	r2, r1, r2
 8004172:	4013      	ands	r3, r2
 8004174:	2b00      	cmp	r3, #0
 8004176:	d082      	beq.n	800407e <HAL_RCC_OscConfig+0xdce>
 8004178:	e0cf      	b.n	800431a <HAL_RCC_OscConfig+0x106a>
 800417a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800417e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004182:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004186:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004188:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800418c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	fa93 f2a3 	rbit	r2, r3
 8004196:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800419a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800419e:	601a      	str	r2, [r3, #0]
  return result;
 80041a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041a4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80041a8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041aa:	fab3 f383 	clz	r3, r3
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80041b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	461a      	mov	r2, r3
 80041bc:	2300      	movs	r3, #0
 80041be:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c0:	f7fc ff5c 	bl	800107c <HAL_GetTick>
 80041c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041c8:	e009      	b.n	80041de <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041ca:	f7fc ff57 	bl	800107c <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e09e      	b.n	800431c <HAL_RCC_OscConfig+0x106c>
 80041de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041e2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80041e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041f0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	fa93 f2a3 	rbit	r2, r3
 80041fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041fe:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004202:	601a      	str	r2, [r3, #0]
  return result;
 8004204:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004208:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800420c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800420e:	fab3 f383 	clz	r3, r3
 8004212:	b2db      	uxtb	r3, r3
 8004214:	095b      	lsrs	r3, r3, #5
 8004216:	b2db      	uxtb	r3, r3
 8004218:	f043 0301 	orr.w	r3, r3, #1
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b01      	cmp	r3, #1
 8004220:	d104      	bne.n	800422c <HAL_RCC_OscConfig+0xf7c>
 8004222:	4b01      	ldr	r3, [pc, #4]	; (8004228 <HAL_RCC_OscConfig+0xf78>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	e029      	b.n	800427c <HAL_RCC_OscConfig+0xfcc>
 8004228:	40021000 	.word	0x40021000
 800422c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004230:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004234:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004238:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800423a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800423e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	fa93 f2a3 	rbit	r2, r3
 8004248:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800424c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004250:	601a      	str	r2, [r3, #0]
 8004252:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004256:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800425a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800425e:	601a      	str	r2, [r3, #0]
 8004260:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004264:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	fa93 f2a3 	rbit	r2, r3
 800426e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004272:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004276:	601a      	str	r2, [r3, #0]
 8004278:	4b2b      	ldr	r3, [pc, #172]	; (8004328 <HAL_RCC_OscConfig+0x1078>)
 800427a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004280:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004284:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004288:	6011      	str	r1, [r2, #0]
 800428a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800428e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004292:	6812      	ldr	r2, [r2, #0]
 8004294:	fa92 f1a2 	rbit	r1, r2
 8004298:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800429c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80042a0:	6011      	str	r1, [r2, #0]
  return result;
 80042a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80042a6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80042aa:	6812      	ldr	r2, [r2, #0]
 80042ac:	fab2 f282 	clz	r2, r2
 80042b0:	b2d2      	uxtb	r2, r2
 80042b2:	f042 0220 	orr.w	r2, r2, #32
 80042b6:	b2d2      	uxtb	r2, r2
 80042b8:	f002 021f 	and.w	r2, r2, #31
 80042bc:	2101      	movs	r1, #1
 80042be:	fa01 f202 	lsl.w	r2, r1, r2
 80042c2:	4013      	ands	r3, r2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d180      	bne.n	80041ca <HAL_RCC_OscConfig+0xf1a>
 80042c8:	e027      	b.n	800431a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	69db      	ldr	r3, [r3, #28]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d101      	bne.n	80042de <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e01e      	b.n	800431c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80042de:	4b12      	ldr	r3, [pc, #72]	; (8004328 <HAL_RCC_OscConfig+0x1078>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80042e6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80042ea:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80042ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d10b      	bne.n	8004316 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80042fe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004302:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004306:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800430a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004312:	429a      	cmp	r2, r3
 8004314:	d001      	beq.n	800431a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e000      	b.n	800431c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	40021000 	.word	0x40021000

0800432c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b09e      	sub	sp, #120	; 0x78
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004336:	2300      	movs	r3, #0
 8004338:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d101      	bne.n	8004344 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e162      	b.n	800460a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004344:	4b90      	ldr	r3, [pc, #576]	; (8004588 <HAL_RCC_ClockConfig+0x25c>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0307 	and.w	r3, r3, #7
 800434c:	683a      	ldr	r2, [r7, #0]
 800434e:	429a      	cmp	r2, r3
 8004350:	d910      	bls.n	8004374 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004352:	4b8d      	ldr	r3, [pc, #564]	; (8004588 <HAL_RCC_ClockConfig+0x25c>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f023 0207 	bic.w	r2, r3, #7
 800435a:	498b      	ldr	r1, [pc, #556]	; (8004588 <HAL_RCC_ClockConfig+0x25c>)
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	4313      	orrs	r3, r2
 8004360:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004362:	4b89      	ldr	r3, [pc, #548]	; (8004588 <HAL_RCC_ClockConfig+0x25c>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0307 	and.w	r3, r3, #7
 800436a:	683a      	ldr	r2, [r7, #0]
 800436c:	429a      	cmp	r2, r3
 800436e:	d001      	beq.n	8004374 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e14a      	b.n	800460a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0302 	and.w	r3, r3, #2
 800437c:	2b00      	cmp	r3, #0
 800437e:	d008      	beq.n	8004392 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004380:	4b82      	ldr	r3, [pc, #520]	; (800458c <HAL_RCC_ClockConfig+0x260>)
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	497f      	ldr	r1, [pc, #508]	; (800458c <HAL_RCC_ClockConfig+0x260>)
 800438e:	4313      	orrs	r3, r2
 8004390:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0301 	and.w	r3, r3, #1
 800439a:	2b00      	cmp	r3, #0
 800439c:	f000 80dc 	beq.w	8004558 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d13c      	bne.n	8004422 <HAL_RCC_ClockConfig+0xf6>
 80043a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043ac:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043b0:	fa93 f3a3 	rbit	r3, r3
 80043b4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80043b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043b8:	fab3 f383 	clz	r3, r3
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	095b      	lsrs	r3, r3, #5
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	f043 0301 	orr.w	r3, r3, #1
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d102      	bne.n	80043d2 <HAL_RCC_ClockConfig+0xa6>
 80043cc:	4b6f      	ldr	r3, [pc, #444]	; (800458c <HAL_RCC_ClockConfig+0x260>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	e00f      	b.n	80043f2 <HAL_RCC_ClockConfig+0xc6>
 80043d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043d6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043da:	fa93 f3a3 	rbit	r3, r3
 80043de:	667b      	str	r3, [r7, #100]	; 0x64
 80043e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043e4:	663b      	str	r3, [r7, #96]	; 0x60
 80043e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043e8:	fa93 f3a3 	rbit	r3, r3
 80043ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043ee:	4b67      	ldr	r3, [pc, #412]	; (800458c <HAL_RCC_ClockConfig+0x260>)
 80043f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80043f6:	65ba      	str	r2, [r7, #88]	; 0x58
 80043f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80043fa:	fa92 f2a2 	rbit	r2, r2
 80043fe:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004400:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004402:	fab2 f282 	clz	r2, r2
 8004406:	b2d2      	uxtb	r2, r2
 8004408:	f042 0220 	orr.w	r2, r2, #32
 800440c:	b2d2      	uxtb	r2, r2
 800440e:	f002 021f 	and.w	r2, r2, #31
 8004412:	2101      	movs	r1, #1
 8004414:	fa01 f202 	lsl.w	r2, r1, r2
 8004418:	4013      	ands	r3, r2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d17b      	bne.n	8004516 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e0f3      	b.n	800460a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	2b02      	cmp	r3, #2
 8004428:	d13c      	bne.n	80044a4 <HAL_RCC_ClockConfig+0x178>
 800442a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800442e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004430:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004432:	fa93 f3a3 	rbit	r3, r3
 8004436:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004438:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800443a:	fab3 f383 	clz	r3, r3
 800443e:	b2db      	uxtb	r3, r3
 8004440:	095b      	lsrs	r3, r3, #5
 8004442:	b2db      	uxtb	r3, r3
 8004444:	f043 0301 	orr.w	r3, r3, #1
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b01      	cmp	r3, #1
 800444c:	d102      	bne.n	8004454 <HAL_RCC_ClockConfig+0x128>
 800444e:	4b4f      	ldr	r3, [pc, #316]	; (800458c <HAL_RCC_ClockConfig+0x260>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	e00f      	b.n	8004474 <HAL_RCC_ClockConfig+0x148>
 8004454:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004458:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800445a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800445c:	fa93 f3a3 	rbit	r3, r3
 8004460:	647b      	str	r3, [r7, #68]	; 0x44
 8004462:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004466:	643b      	str	r3, [r7, #64]	; 0x40
 8004468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800446a:	fa93 f3a3 	rbit	r3, r3
 800446e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004470:	4b46      	ldr	r3, [pc, #280]	; (800458c <HAL_RCC_ClockConfig+0x260>)
 8004472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004474:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004478:	63ba      	str	r2, [r7, #56]	; 0x38
 800447a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800447c:	fa92 f2a2 	rbit	r2, r2
 8004480:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004482:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004484:	fab2 f282 	clz	r2, r2
 8004488:	b2d2      	uxtb	r2, r2
 800448a:	f042 0220 	orr.w	r2, r2, #32
 800448e:	b2d2      	uxtb	r2, r2
 8004490:	f002 021f 	and.w	r2, r2, #31
 8004494:	2101      	movs	r1, #1
 8004496:	fa01 f202 	lsl.w	r2, r1, r2
 800449a:	4013      	ands	r3, r2
 800449c:	2b00      	cmp	r3, #0
 800449e:	d13a      	bne.n	8004516 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e0b2      	b.n	800460a <HAL_RCC_ClockConfig+0x2de>
 80044a4:	2302      	movs	r3, #2
 80044a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044aa:	fa93 f3a3 	rbit	r3, r3
 80044ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80044b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044b2:	fab3 f383 	clz	r3, r3
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	095b      	lsrs	r3, r3, #5
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	f043 0301 	orr.w	r3, r3, #1
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d102      	bne.n	80044cc <HAL_RCC_ClockConfig+0x1a0>
 80044c6:	4b31      	ldr	r3, [pc, #196]	; (800458c <HAL_RCC_ClockConfig+0x260>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	e00d      	b.n	80044e8 <HAL_RCC_ClockConfig+0x1bc>
 80044cc:	2302      	movs	r3, #2
 80044ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d2:	fa93 f3a3 	rbit	r3, r3
 80044d6:	627b      	str	r3, [r7, #36]	; 0x24
 80044d8:	2302      	movs	r3, #2
 80044da:	623b      	str	r3, [r7, #32]
 80044dc:	6a3b      	ldr	r3, [r7, #32]
 80044de:	fa93 f3a3 	rbit	r3, r3
 80044e2:	61fb      	str	r3, [r7, #28]
 80044e4:	4b29      	ldr	r3, [pc, #164]	; (800458c <HAL_RCC_ClockConfig+0x260>)
 80044e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e8:	2202      	movs	r2, #2
 80044ea:	61ba      	str	r2, [r7, #24]
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	fa92 f2a2 	rbit	r2, r2
 80044f2:	617a      	str	r2, [r7, #20]
  return result;
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	fab2 f282 	clz	r2, r2
 80044fa:	b2d2      	uxtb	r2, r2
 80044fc:	f042 0220 	orr.w	r2, r2, #32
 8004500:	b2d2      	uxtb	r2, r2
 8004502:	f002 021f 	and.w	r2, r2, #31
 8004506:	2101      	movs	r1, #1
 8004508:	fa01 f202 	lsl.w	r2, r1, r2
 800450c:	4013      	ands	r3, r2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e079      	b.n	800460a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004516:	4b1d      	ldr	r3, [pc, #116]	; (800458c <HAL_RCC_ClockConfig+0x260>)
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f023 0203 	bic.w	r2, r3, #3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	491a      	ldr	r1, [pc, #104]	; (800458c <HAL_RCC_ClockConfig+0x260>)
 8004524:	4313      	orrs	r3, r2
 8004526:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004528:	f7fc fda8 	bl	800107c <HAL_GetTick>
 800452c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800452e:	e00a      	b.n	8004546 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004530:	f7fc fda4 	bl	800107c <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	f241 3288 	movw	r2, #5000	; 0x1388
 800453e:	4293      	cmp	r3, r2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e061      	b.n	800460a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004546:	4b11      	ldr	r3, [pc, #68]	; (800458c <HAL_RCC_ClockConfig+0x260>)
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f003 020c 	and.w	r2, r3, #12
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	429a      	cmp	r2, r3
 8004556:	d1eb      	bne.n	8004530 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004558:	4b0b      	ldr	r3, [pc, #44]	; (8004588 <HAL_RCC_ClockConfig+0x25c>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0307 	and.w	r3, r3, #7
 8004560:	683a      	ldr	r2, [r7, #0]
 8004562:	429a      	cmp	r2, r3
 8004564:	d214      	bcs.n	8004590 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004566:	4b08      	ldr	r3, [pc, #32]	; (8004588 <HAL_RCC_ClockConfig+0x25c>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f023 0207 	bic.w	r2, r3, #7
 800456e:	4906      	ldr	r1, [pc, #24]	; (8004588 <HAL_RCC_ClockConfig+0x25c>)
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	4313      	orrs	r3, r2
 8004574:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004576:	4b04      	ldr	r3, [pc, #16]	; (8004588 <HAL_RCC_ClockConfig+0x25c>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0307 	and.w	r3, r3, #7
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	429a      	cmp	r2, r3
 8004582:	d005      	beq.n	8004590 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e040      	b.n	800460a <HAL_RCC_ClockConfig+0x2de>
 8004588:	40022000 	.word	0x40022000
 800458c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0304 	and.w	r3, r3, #4
 8004598:	2b00      	cmp	r3, #0
 800459a:	d008      	beq.n	80045ae <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800459c:	4b1d      	ldr	r3, [pc, #116]	; (8004614 <HAL_RCC_ClockConfig+0x2e8>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	491a      	ldr	r1, [pc, #104]	; (8004614 <HAL_RCC_ClockConfig+0x2e8>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0308 	and.w	r3, r3, #8
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d009      	beq.n	80045ce <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045ba:	4b16      	ldr	r3, [pc, #88]	; (8004614 <HAL_RCC_ClockConfig+0x2e8>)
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	00db      	lsls	r3, r3, #3
 80045c8:	4912      	ldr	r1, [pc, #72]	; (8004614 <HAL_RCC_ClockConfig+0x2e8>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80045ce:	f000 f829 	bl	8004624 <HAL_RCC_GetSysClockFreq>
 80045d2:	4601      	mov	r1, r0
 80045d4:	4b0f      	ldr	r3, [pc, #60]	; (8004614 <HAL_RCC_ClockConfig+0x2e8>)
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045dc:	22f0      	movs	r2, #240	; 0xf0
 80045de:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	fa92 f2a2 	rbit	r2, r2
 80045e6:	60fa      	str	r2, [r7, #12]
  return result;
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	fab2 f282 	clz	r2, r2
 80045ee:	b2d2      	uxtb	r2, r2
 80045f0:	40d3      	lsrs	r3, r2
 80045f2:	4a09      	ldr	r2, [pc, #36]	; (8004618 <HAL_RCC_ClockConfig+0x2ec>)
 80045f4:	5cd3      	ldrb	r3, [r2, r3]
 80045f6:	fa21 f303 	lsr.w	r3, r1, r3
 80045fa:	4a08      	ldr	r2, [pc, #32]	; (800461c <HAL_RCC_ClockConfig+0x2f0>)
 80045fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80045fe:	4b08      	ldr	r3, [pc, #32]	; (8004620 <HAL_RCC_ClockConfig+0x2f4>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4618      	mov	r0, r3
 8004604:	f7fc fcf6 	bl	8000ff4 <HAL_InitTick>
  
  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3778      	adds	r7, #120	; 0x78
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	40021000 	.word	0x40021000
 8004618:	08005d10 	.word	0x08005d10
 800461c:	20000008 	.word	0x20000008
 8004620:	2000000c 	.word	0x2000000c

08004624 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004624:	b480      	push	{r7}
 8004626:	b08b      	sub	sp, #44	; 0x2c
 8004628:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800462a:	2300      	movs	r3, #0
 800462c:	61fb      	str	r3, [r7, #28]
 800462e:	2300      	movs	r3, #0
 8004630:	61bb      	str	r3, [r7, #24]
 8004632:	2300      	movs	r3, #0
 8004634:	627b      	str	r3, [r7, #36]	; 0x24
 8004636:	2300      	movs	r3, #0
 8004638:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800463a:	2300      	movs	r3, #0
 800463c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800463e:	4b29      	ldr	r3, [pc, #164]	; (80046e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	f003 030c 	and.w	r3, r3, #12
 800464a:	2b04      	cmp	r3, #4
 800464c:	d002      	beq.n	8004654 <HAL_RCC_GetSysClockFreq+0x30>
 800464e:	2b08      	cmp	r3, #8
 8004650:	d003      	beq.n	800465a <HAL_RCC_GetSysClockFreq+0x36>
 8004652:	e03c      	b.n	80046ce <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004654:	4b24      	ldr	r3, [pc, #144]	; (80046e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004656:	623b      	str	r3, [r7, #32]
      break;
 8004658:	e03c      	b.n	80046d4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004660:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004664:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004666:	68ba      	ldr	r2, [r7, #8]
 8004668:	fa92 f2a2 	rbit	r2, r2
 800466c:	607a      	str	r2, [r7, #4]
  return result;
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	fab2 f282 	clz	r2, r2
 8004674:	b2d2      	uxtb	r2, r2
 8004676:	40d3      	lsrs	r3, r2
 8004678:	4a1c      	ldr	r2, [pc, #112]	; (80046ec <HAL_RCC_GetSysClockFreq+0xc8>)
 800467a:	5cd3      	ldrb	r3, [r2, r3]
 800467c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800467e:	4b19      	ldr	r3, [pc, #100]	; (80046e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004682:	f003 030f 	and.w	r3, r3, #15
 8004686:	220f      	movs	r2, #15
 8004688:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	fa92 f2a2 	rbit	r2, r2
 8004690:	60fa      	str	r2, [r7, #12]
  return result;
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	fab2 f282 	clz	r2, r2
 8004698:	b2d2      	uxtb	r2, r2
 800469a:	40d3      	lsrs	r3, r2
 800469c:	4a14      	ldr	r2, [pc, #80]	; (80046f0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800469e:	5cd3      	ldrb	r3, [r2, r3]
 80046a0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d008      	beq.n	80046be <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80046ac:	4a0e      	ldr	r2, [pc, #56]	; (80046e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	fb02 f303 	mul.w	r3, r2, r3
 80046ba:	627b      	str	r3, [r7, #36]	; 0x24
 80046bc:	e004      	b.n	80046c8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	4a0c      	ldr	r2, [pc, #48]	; (80046f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 80046c2:	fb02 f303 	mul.w	r3, r2, r3
 80046c6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80046c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ca:	623b      	str	r3, [r7, #32]
      break;
 80046cc:	e002      	b.n	80046d4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80046ce:	4b06      	ldr	r3, [pc, #24]	; (80046e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80046d0:	623b      	str	r3, [r7, #32]
      break;
 80046d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046d4:	6a3b      	ldr	r3, [r7, #32]
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	372c      	adds	r7, #44	; 0x2c
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	40021000 	.word	0x40021000
 80046e8:	007a1200 	.word	0x007a1200
 80046ec:	08005d20 	.word	0x08005d20
 80046f0:	08005d30 	.word	0x08005d30
 80046f4:	003d0900 	.word	0x003d0900

080046f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b092      	sub	sp, #72	; 0x48
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004700:	2300      	movs	r3, #0
 8004702:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004704:	2300      	movs	r3, #0
 8004706:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004708:	2300      	movs	r3, #0
 800470a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004716:	2b00      	cmp	r3, #0
 8004718:	f000 80d4 	beq.w	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800471c:	4b4e      	ldr	r3, [pc, #312]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800471e:	69db      	ldr	r3, [r3, #28]
 8004720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d10e      	bne.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004728:	4b4b      	ldr	r3, [pc, #300]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800472a:	69db      	ldr	r3, [r3, #28]
 800472c:	4a4a      	ldr	r2, [pc, #296]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800472e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004732:	61d3      	str	r3, [r2, #28]
 8004734:	4b48      	ldr	r3, [pc, #288]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004736:	69db      	ldr	r3, [r3, #28]
 8004738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800473c:	60bb      	str	r3, [r7, #8]
 800473e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004740:	2301      	movs	r3, #1
 8004742:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004746:	4b45      	ldr	r3, [pc, #276]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800474e:	2b00      	cmp	r3, #0
 8004750:	d118      	bne.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004752:	4b42      	ldr	r3, [pc, #264]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a41      	ldr	r2, [pc, #260]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800475c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800475e:	f7fc fc8d 	bl	800107c <HAL_GetTick>
 8004762:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004764:	e008      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004766:	f7fc fc89 	bl	800107c <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	2b64      	cmp	r3, #100	; 0x64
 8004772:	d901      	bls.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e169      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004778:	4b38      	ldr	r3, [pc, #224]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004780:	2b00      	cmp	r3, #0
 8004782:	d0f0      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004784:	4b34      	ldr	r3, [pc, #208]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004786:	6a1b      	ldr	r3, [r3, #32]
 8004788:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800478c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800478e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004790:	2b00      	cmp	r3, #0
 8004792:	f000 8084 	beq.w	800489e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800479e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d07c      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047a4:	4b2c      	ldr	r3, [pc, #176]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047a6:	6a1b      	ldr	r3, [r3, #32]
 80047a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80047b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b6:	fa93 f3a3 	rbit	r3, r3
 80047ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80047bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047be:	fab3 f383 	clz	r3, r3
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	461a      	mov	r2, r3
 80047c6:	4b26      	ldr	r3, [pc, #152]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80047c8:	4413      	add	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	461a      	mov	r2, r3
 80047ce:	2301      	movs	r3, #1
 80047d0:	6013      	str	r3, [r2, #0]
 80047d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80047d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047da:	fa93 f3a3 	rbit	r3, r3
 80047de:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80047e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047e2:	fab3 f383 	clz	r3, r3
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	461a      	mov	r2, r3
 80047ea:	4b1d      	ldr	r3, [pc, #116]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80047ec:	4413      	add	r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	461a      	mov	r2, r3
 80047f2:	2300      	movs	r3, #0
 80047f4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80047f6:	4a18      	ldr	r2, [pc, #96]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047fa:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80047fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b00      	cmp	r3, #0
 8004804:	d04b      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004806:	f7fc fc39 	bl	800107c <HAL_GetTick>
 800480a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800480c:	e00a      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800480e:	f7fc fc35 	bl	800107c <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	f241 3288 	movw	r2, #5000	; 0x1388
 800481c:	4293      	cmp	r3, r2
 800481e:	d901      	bls.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e113      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004824:	2302      	movs	r3, #2
 8004826:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482a:	fa93 f3a3 	rbit	r3, r3
 800482e:	627b      	str	r3, [r7, #36]	; 0x24
 8004830:	2302      	movs	r3, #2
 8004832:	623b      	str	r3, [r7, #32]
 8004834:	6a3b      	ldr	r3, [r7, #32]
 8004836:	fa93 f3a3 	rbit	r3, r3
 800483a:	61fb      	str	r3, [r7, #28]
  return result;
 800483c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800483e:	fab3 f383 	clz	r3, r3
 8004842:	b2db      	uxtb	r3, r3
 8004844:	095b      	lsrs	r3, r3, #5
 8004846:	b2db      	uxtb	r3, r3
 8004848:	f043 0302 	orr.w	r3, r3, #2
 800484c:	b2db      	uxtb	r3, r3
 800484e:	2b02      	cmp	r3, #2
 8004850:	d108      	bne.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004852:	4b01      	ldr	r3, [pc, #4]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004854:	6a1b      	ldr	r3, [r3, #32]
 8004856:	e00d      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004858:	40021000 	.word	0x40021000
 800485c:	40007000 	.word	0x40007000
 8004860:	10908100 	.word	0x10908100
 8004864:	2302      	movs	r3, #2
 8004866:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	fa93 f3a3 	rbit	r3, r3
 800486e:	617b      	str	r3, [r7, #20]
 8004870:	4b78      	ldr	r3, [pc, #480]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004874:	2202      	movs	r2, #2
 8004876:	613a      	str	r2, [r7, #16]
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	fa92 f2a2 	rbit	r2, r2
 800487e:	60fa      	str	r2, [r7, #12]
  return result;
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	fab2 f282 	clz	r2, r2
 8004886:	b2d2      	uxtb	r2, r2
 8004888:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800488c:	b2d2      	uxtb	r2, r2
 800488e:	f002 021f 	and.w	r2, r2, #31
 8004892:	2101      	movs	r1, #1
 8004894:	fa01 f202 	lsl.w	r2, r1, r2
 8004898:	4013      	ands	r3, r2
 800489a:	2b00      	cmp	r3, #0
 800489c:	d0b7      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800489e:	4b6d      	ldr	r3, [pc, #436]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	496a      	ldr	r1, [pc, #424]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80048b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d105      	bne.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048b8:	4b66      	ldr	r3, [pc, #408]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048ba:	69db      	ldr	r3, [r3, #28]
 80048bc:	4a65      	ldr	r2, [pc, #404]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048c2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0301 	and.w	r3, r3, #1
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d008      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048d0:	4b60      	ldr	r3, [pc, #384]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d4:	f023 0203 	bic.w	r2, r3, #3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	495d      	ldr	r1, [pc, #372]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d008      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048ee:	4b59      	ldr	r3, [pc, #356]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	4956      	ldr	r1, [pc, #344]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0304 	and.w	r3, r3, #4
 8004908:	2b00      	cmp	r3, #0
 800490a:	d008      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800490c:	4b51      	ldr	r3, [pc, #324]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800490e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004910:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	494e      	ldr	r1, [pc, #312]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800491a:	4313      	orrs	r3, r2
 800491c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0320 	and.w	r3, r3, #32
 8004926:	2b00      	cmp	r3, #0
 8004928:	d008      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800492a:	4b4a      	ldr	r3, [pc, #296]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800492c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492e:	f023 0210 	bic.w	r2, r3, #16
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	4947      	ldr	r1, [pc, #284]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004938:	4313      	orrs	r3, r2
 800493a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d008      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004948:	4b42      	ldr	r3, [pc, #264]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004954:	493f      	ldr	r1, [pc, #252]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004956:	4313      	orrs	r3, r2
 8004958:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004962:	2b00      	cmp	r3, #0
 8004964:	d008      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004966:	4b3b      	ldr	r3, [pc, #236]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496a:	f023 0220 	bic.w	r2, r3, #32
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	4938      	ldr	r1, [pc, #224]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004974:	4313      	orrs	r3, r2
 8004976:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0308 	and.w	r3, r3, #8
 8004980:	2b00      	cmp	r3, #0
 8004982:	d008      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004984:	4b33      	ldr	r3, [pc, #204]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004988:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	695b      	ldr	r3, [r3, #20]
 8004990:	4930      	ldr	r1, [pc, #192]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004992:	4313      	orrs	r3, r2
 8004994:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0310 	and.w	r3, r3, #16
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d008      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80049a2:	4b2c      	ldr	r3, [pc, #176]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	4929      	ldr	r1, [pc, #164]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d008      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80049c0:	4b24      	ldr	r3, [pc, #144]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049cc:	4921      	ldr	r1, [pc, #132]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d008      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80049de:	4b1d      	ldr	r3, [pc, #116]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ea:	491a      	ldr	r1, [pc, #104]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d008      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80049fc:	4b15      	ldr	r3, [pc, #84]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a00:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a08:	4912      	ldr	r1, [pc, #72]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d008      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004a1a:	4b0e      	ldr	r3, [pc, #56]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a26:	490b      	ldr	r1, [pc, #44]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d008      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004a38:	4b06      	ldr	r3, [pc, #24]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a44:	4903      	ldr	r1, [pc, #12]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3748      	adds	r7, #72	; 0x48
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	40021000 	.word	0x40021000

08004a58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d101      	bne.n	8004a6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e09d      	b.n	8004ba6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d108      	bne.n	8004a84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a7a:	d009      	beq.n	8004a90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	61da      	str	r2, [r3, #28]
 8004a82:	e005      	b.n	8004a90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d106      	bne.n	8004ab0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7fc f930 	bl	8000d10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ac6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ad0:	d902      	bls.n	8004ad8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	60fb      	str	r3, [r7, #12]
 8004ad6:	e002      	b.n	8004ade <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004ad8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004adc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004ae6:	d007      	beq.n	8004af8 <HAL_SPI_Init+0xa0>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004af0:	d002      	beq.n	8004af8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b08:	431a      	orrs	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	431a      	orrs	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	695b      	ldr	r3, [r3, #20]
 8004b18:	f003 0301 	and.w	r3, r3, #1
 8004b1c:	431a      	orrs	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b26:	431a      	orrs	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	69db      	ldr	r3, [r3, #28]
 8004b2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b30:	431a      	orrs	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b3a:	ea42 0103 	orr.w	r1, r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b42:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	699b      	ldr	r3, [r3, #24]
 8004b52:	0c1b      	lsrs	r3, r3, #16
 8004b54:	f003 0204 	and.w	r2, r3, #4
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5c:	f003 0310 	and.w	r3, r3, #16
 8004b60:	431a      	orrs	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b66:	f003 0308 	and.w	r3, r3, #8
 8004b6a:	431a      	orrs	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004b74:	ea42 0103 	orr.w	r1, r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	430a      	orrs	r2, r1
 8004b84:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	69da      	ldr	r2, [r3, #28]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b94:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3710      	adds	r7, #16
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}

08004bae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b082      	sub	sp, #8
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d101      	bne.n	8004bc0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e049      	b.n	8004c54 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d106      	bne.n	8004bda <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f7fc f8dd 	bl	8000d94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2202      	movs	r2, #2
 8004bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	3304      	adds	r3, #4
 8004bea:	4619      	mov	r1, r3
 8004bec:	4610      	mov	r0, r2
 8004bee:	f000 fb75 	bl	80052dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2201      	movs	r2, #1
 8004c26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2201      	movs	r2, #1
 8004c36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3708      	adds	r7, #8
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d101      	bne.n	8004c6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e049      	b.n	8004d02 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d106      	bne.n	8004c88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 f841 	bl	8004d0a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	3304      	adds	r3, #4
 8004c98:	4619      	mov	r1, r3
 8004c9a:	4610      	mov	r0, r2
 8004c9c:	f000 fb1e 	bl	80052dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b083      	sub	sp, #12
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d12:	bf00      	nop
 8004d14:	370c      	adds	r7, #12
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
	...

08004d20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d109      	bne.n	8004d44 <HAL_TIM_PWM_Start+0x24>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	bf14      	ite	ne
 8004d3c:	2301      	movne	r3, #1
 8004d3e:	2300      	moveq	r3, #0
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	e03c      	b.n	8004dbe <HAL_TIM_PWM_Start+0x9e>
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	2b04      	cmp	r3, #4
 8004d48:	d109      	bne.n	8004d5e <HAL_TIM_PWM_Start+0x3e>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	bf14      	ite	ne
 8004d56:	2301      	movne	r3, #1
 8004d58:	2300      	moveq	r3, #0
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	e02f      	b.n	8004dbe <HAL_TIM_PWM_Start+0x9e>
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	2b08      	cmp	r3, #8
 8004d62:	d109      	bne.n	8004d78 <HAL_TIM_PWM_Start+0x58>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	bf14      	ite	ne
 8004d70:	2301      	movne	r3, #1
 8004d72:	2300      	moveq	r3, #0
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	e022      	b.n	8004dbe <HAL_TIM_PWM_Start+0x9e>
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	2b0c      	cmp	r3, #12
 8004d7c:	d109      	bne.n	8004d92 <HAL_TIM_PWM_Start+0x72>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	bf14      	ite	ne
 8004d8a:	2301      	movne	r3, #1
 8004d8c:	2300      	moveq	r3, #0
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	e015      	b.n	8004dbe <HAL_TIM_PWM_Start+0x9e>
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	2b10      	cmp	r3, #16
 8004d96:	d109      	bne.n	8004dac <HAL_TIM_PWM_Start+0x8c>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	bf14      	ite	ne
 8004da4:	2301      	movne	r3, #1
 8004da6:	2300      	moveq	r3, #0
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	e008      	b.n	8004dbe <HAL_TIM_PWM_Start+0x9e>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	bf14      	ite	ne
 8004db8:	2301      	movne	r3, #1
 8004dba:	2300      	moveq	r3, #0
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d001      	beq.n	8004dc6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e097      	b.n	8004ef6 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d104      	bne.n	8004dd6 <HAL_TIM_PWM_Start+0xb6>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2202      	movs	r2, #2
 8004dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dd4:	e023      	b.n	8004e1e <HAL_TIM_PWM_Start+0xfe>
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	2b04      	cmp	r3, #4
 8004dda:	d104      	bne.n	8004de6 <HAL_TIM_PWM_Start+0xc6>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2202      	movs	r2, #2
 8004de0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004de4:	e01b      	b.n	8004e1e <HAL_TIM_PWM_Start+0xfe>
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	2b08      	cmp	r3, #8
 8004dea:	d104      	bne.n	8004df6 <HAL_TIM_PWM_Start+0xd6>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2202      	movs	r2, #2
 8004df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004df4:	e013      	b.n	8004e1e <HAL_TIM_PWM_Start+0xfe>
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	2b0c      	cmp	r3, #12
 8004dfa:	d104      	bne.n	8004e06 <HAL_TIM_PWM_Start+0xe6>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2202      	movs	r2, #2
 8004e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e04:	e00b      	b.n	8004e1e <HAL_TIM_PWM_Start+0xfe>
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	2b10      	cmp	r3, #16
 8004e0a:	d104      	bne.n	8004e16 <HAL_TIM_PWM_Start+0xf6>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2202      	movs	r2, #2
 8004e10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e14:	e003      	b.n	8004e1e <HAL_TIM_PWM_Start+0xfe>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2202      	movs	r2, #2
 8004e1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2201      	movs	r2, #1
 8004e24:	6839      	ldr	r1, [r7, #0]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f000 fe58 	bl	8005adc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a33      	ldr	r2, [pc, #204]	; (8004f00 <HAL_TIM_PWM_Start+0x1e0>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d013      	beq.n	8004e5e <HAL_TIM_PWM_Start+0x13e>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a32      	ldr	r2, [pc, #200]	; (8004f04 <HAL_TIM_PWM_Start+0x1e4>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d00e      	beq.n	8004e5e <HAL_TIM_PWM_Start+0x13e>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a30      	ldr	r2, [pc, #192]	; (8004f08 <HAL_TIM_PWM_Start+0x1e8>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d009      	beq.n	8004e5e <HAL_TIM_PWM_Start+0x13e>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a2f      	ldr	r2, [pc, #188]	; (8004f0c <HAL_TIM_PWM_Start+0x1ec>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d004      	beq.n	8004e5e <HAL_TIM_PWM_Start+0x13e>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a2d      	ldr	r2, [pc, #180]	; (8004f10 <HAL_TIM_PWM_Start+0x1f0>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d101      	bne.n	8004e62 <HAL_TIM_PWM_Start+0x142>
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e000      	b.n	8004e64 <HAL_TIM_PWM_Start+0x144>
 8004e62:	2300      	movs	r3, #0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d007      	beq.n	8004e78 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e76:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a20      	ldr	r2, [pc, #128]	; (8004f00 <HAL_TIM_PWM_Start+0x1e0>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d018      	beq.n	8004eb4 <HAL_TIM_PWM_Start+0x194>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e8a:	d013      	beq.n	8004eb4 <HAL_TIM_PWM_Start+0x194>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a20      	ldr	r2, [pc, #128]	; (8004f14 <HAL_TIM_PWM_Start+0x1f4>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d00e      	beq.n	8004eb4 <HAL_TIM_PWM_Start+0x194>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a1f      	ldr	r2, [pc, #124]	; (8004f18 <HAL_TIM_PWM_Start+0x1f8>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d009      	beq.n	8004eb4 <HAL_TIM_PWM_Start+0x194>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a17      	ldr	r2, [pc, #92]	; (8004f04 <HAL_TIM_PWM_Start+0x1e4>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d004      	beq.n	8004eb4 <HAL_TIM_PWM_Start+0x194>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a16      	ldr	r2, [pc, #88]	; (8004f08 <HAL_TIM_PWM_Start+0x1e8>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d115      	bne.n	8004ee0 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	689a      	ldr	r2, [r3, #8]
 8004eba:	4b18      	ldr	r3, [pc, #96]	; (8004f1c <HAL_TIM_PWM_Start+0x1fc>)
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2b06      	cmp	r3, #6
 8004ec4:	d015      	beq.n	8004ef2 <HAL_TIM_PWM_Start+0x1d2>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ecc:	d011      	beq.n	8004ef2 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f042 0201 	orr.w	r2, r2, #1
 8004edc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ede:	e008      	b.n	8004ef2 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f042 0201 	orr.w	r2, r2, #1
 8004eee:	601a      	str	r2, [r3, #0]
 8004ef0:	e000      	b.n	8004ef4 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ef2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	40012c00 	.word	0x40012c00
 8004f04:	40013400 	.word	0x40013400
 8004f08:	40014000 	.word	0x40014000
 8004f0c:	40014400 	.word	0x40014400
 8004f10:	40014800 	.word	0x40014800
 8004f14:	40000400 	.word	0x40000400
 8004f18:	40000800 	.word	0x40000800
 8004f1c:	00010007 	.word	0x00010007

08004f20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b086      	sub	sp, #24
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d101      	bne.n	8004f3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f3a:	2302      	movs	r3, #2
 8004f3c:	e0ff      	b.n	800513e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2b14      	cmp	r3, #20
 8004f4a:	f200 80f0 	bhi.w	800512e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004f4e:	a201      	add	r2, pc, #4	; (adr r2, 8004f54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f54:	08004fa9 	.word	0x08004fa9
 8004f58:	0800512f 	.word	0x0800512f
 8004f5c:	0800512f 	.word	0x0800512f
 8004f60:	0800512f 	.word	0x0800512f
 8004f64:	08004fe9 	.word	0x08004fe9
 8004f68:	0800512f 	.word	0x0800512f
 8004f6c:	0800512f 	.word	0x0800512f
 8004f70:	0800512f 	.word	0x0800512f
 8004f74:	0800502b 	.word	0x0800502b
 8004f78:	0800512f 	.word	0x0800512f
 8004f7c:	0800512f 	.word	0x0800512f
 8004f80:	0800512f 	.word	0x0800512f
 8004f84:	0800506b 	.word	0x0800506b
 8004f88:	0800512f 	.word	0x0800512f
 8004f8c:	0800512f 	.word	0x0800512f
 8004f90:	0800512f 	.word	0x0800512f
 8004f94:	080050ad 	.word	0x080050ad
 8004f98:	0800512f 	.word	0x0800512f
 8004f9c:	0800512f 	.word	0x0800512f
 8004fa0:	0800512f 	.word	0x0800512f
 8004fa4:	080050ed 	.word	0x080050ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68b9      	ldr	r1, [r7, #8]
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f000 fa24 	bl	80053fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	699a      	ldr	r2, [r3, #24]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f042 0208 	orr.w	r2, r2, #8
 8004fc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	699a      	ldr	r2, [r3, #24]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f022 0204 	bic.w	r2, r2, #4
 8004fd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	6999      	ldr	r1, [r3, #24]
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	691a      	ldr	r2, [r3, #16]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	619a      	str	r2, [r3, #24]
      break;
 8004fe6:	e0a5      	b.n	8005134 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68b9      	ldr	r1, [r7, #8]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f000 fa94 	bl	800551c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	699a      	ldr	r2, [r3, #24]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005002:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	699a      	ldr	r2, [r3, #24]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005012:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	6999      	ldr	r1, [r3, #24]
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	021a      	lsls	r2, r3, #8
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	430a      	orrs	r2, r1
 8005026:	619a      	str	r2, [r3, #24]
      break;
 8005028:	e084      	b.n	8005134 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68b9      	ldr	r1, [r7, #8]
 8005030:	4618      	mov	r0, r3
 8005032:	f000 fafd 	bl	8005630 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	69da      	ldr	r2, [r3, #28]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f042 0208 	orr.w	r2, r2, #8
 8005044:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	69da      	ldr	r2, [r3, #28]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f022 0204 	bic.w	r2, r2, #4
 8005054:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	69d9      	ldr	r1, [r3, #28]
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	691a      	ldr	r2, [r3, #16]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	430a      	orrs	r2, r1
 8005066:	61da      	str	r2, [r3, #28]
      break;
 8005068:	e064      	b.n	8005134 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68b9      	ldr	r1, [r7, #8]
 8005070:	4618      	mov	r0, r3
 8005072:	f000 fb65 	bl	8005740 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	69da      	ldr	r2, [r3, #28]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005084:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	69da      	ldr	r2, [r3, #28]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005094:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	69d9      	ldr	r1, [r3, #28]
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	021a      	lsls	r2, r3, #8
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	430a      	orrs	r2, r1
 80050a8:	61da      	str	r2, [r3, #28]
      break;
 80050aa:	e043      	b.n	8005134 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68b9      	ldr	r1, [r7, #8]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f000 fbae 	bl	8005814 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f042 0208 	orr.w	r2, r2, #8
 80050c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f022 0204 	bic.w	r2, r2, #4
 80050d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	691a      	ldr	r2, [r3, #16]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	430a      	orrs	r2, r1
 80050e8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80050ea:	e023      	b.n	8005134 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68b9      	ldr	r1, [r7, #8]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f000 fbf2 	bl	80058dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005106:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005116:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	021a      	lsls	r2, r3, #8
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	430a      	orrs	r2, r1
 800512a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800512c:	e002      	b.n	8005134 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	75fb      	strb	r3, [r7, #23]
      break;
 8005132:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800513c:	7dfb      	ldrb	r3, [r7, #23]
}
 800513e:	4618      	mov	r0, r3
 8005140:	3718      	adds	r7, #24
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop

08005148 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005152:	2300      	movs	r3, #0
 8005154:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800515c:	2b01      	cmp	r3, #1
 800515e:	d101      	bne.n	8005164 <HAL_TIM_ConfigClockSource+0x1c>
 8005160:	2302      	movs	r3, #2
 8005162:	e0b6      	b.n	80052d2 <HAL_TIM_ConfigClockSource+0x18a>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2202      	movs	r2, #2
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005182:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005186:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800518e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68ba      	ldr	r2, [r7, #8]
 8005196:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051a0:	d03e      	beq.n	8005220 <HAL_TIM_ConfigClockSource+0xd8>
 80051a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051a6:	f200 8087 	bhi.w	80052b8 <HAL_TIM_ConfigClockSource+0x170>
 80051aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ae:	f000 8086 	beq.w	80052be <HAL_TIM_ConfigClockSource+0x176>
 80051b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051b6:	d87f      	bhi.n	80052b8 <HAL_TIM_ConfigClockSource+0x170>
 80051b8:	2b70      	cmp	r3, #112	; 0x70
 80051ba:	d01a      	beq.n	80051f2 <HAL_TIM_ConfigClockSource+0xaa>
 80051bc:	2b70      	cmp	r3, #112	; 0x70
 80051be:	d87b      	bhi.n	80052b8 <HAL_TIM_ConfigClockSource+0x170>
 80051c0:	2b60      	cmp	r3, #96	; 0x60
 80051c2:	d050      	beq.n	8005266 <HAL_TIM_ConfigClockSource+0x11e>
 80051c4:	2b60      	cmp	r3, #96	; 0x60
 80051c6:	d877      	bhi.n	80052b8 <HAL_TIM_ConfigClockSource+0x170>
 80051c8:	2b50      	cmp	r3, #80	; 0x50
 80051ca:	d03c      	beq.n	8005246 <HAL_TIM_ConfigClockSource+0xfe>
 80051cc:	2b50      	cmp	r3, #80	; 0x50
 80051ce:	d873      	bhi.n	80052b8 <HAL_TIM_ConfigClockSource+0x170>
 80051d0:	2b40      	cmp	r3, #64	; 0x40
 80051d2:	d058      	beq.n	8005286 <HAL_TIM_ConfigClockSource+0x13e>
 80051d4:	2b40      	cmp	r3, #64	; 0x40
 80051d6:	d86f      	bhi.n	80052b8 <HAL_TIM_ConfigClockSource+0x170>
 80051d8:	2b30      	cmp	r3, #48	; 0x30
 80051da:	d064      	beq.n	80052a6 <HAL_TIM_ConfigClockSource+0x15e>
 80051dc:	2b30      	cmp	r3, #48	; 0x30
 80051de:	d86b      	bhi.n	80052b8 <HAL_TIM_ConfigClockSource+0x170>
 80051e0:	2b20      	cmp	r3, #32
 80051e2:	d060      	beq.n	80052a6 <HAL_TIM_ConfigClockSource+0x15e>
 80051e4:	2b20      	cmp	r3, #32
 80051e6:	d867      	bhi.n	80052b8 <HAL_TIM_ConfigClockSource+0x170>
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d05c      	beq.n	80052a6 <HAL_TIM_ConfigClockSource+0x15e>
 80051ec:	2b10      	cmp	r3, #16
 80051ee:	d05a      	beq.n	80052a6 <HAL_TIM_ConfigClockSource+0x15e>
 80051f0:	e062      	b.n	80052b8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005202:	f000 fc4b 	bl	8005a9c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005214:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68ba      	ldr	r2, [r7, #8]
 800521c:	609a      	str	r2, [r3, #8]
      break;
 800521e:	e04f      	b.n	80052c0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005230:	f000 fc34 	bl	8005a9c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	689a      	ldr	r2, [r3, #8]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005242:	609a      	str	r2, [r3, #8]
      break;
 8005244:	e03c      	b.n	80052c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005252:	461a      	mov	r2, r3
 8005254:	f000 fba8 	bl	80059a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2150      	movs	r1, #80	; 0x50
 800525e:	4618      	mov	r0, r3
 8005260:	f000 fc01 	bl	8005a66 <TIM_ITRx_SetConfig>
      break;
 8005264:	e02c      	b.n	80052c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005272:	461a      	mov	r2, r3
 8005274:	f000 fbc7 	bl	8005a06 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2160      	movs	r1, #96	; 0x60
 800527e:	4618      	mov	r0, r3
 8005280:	f000 fbf1 	bl	8005a66 <TIM_ITRx_SetConfig>
      break;
 8005284:	e01c      	b.n	80052c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005292:	461a      	mov	r2, r3
 8005294:	f000 fb88 	bl	80059a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2140      	movs	r1, #64	; 0x40
 800529e:	4618      	mov	r0, r3
 80052a0:	f000 fbe1 	bl	8005a66 <TIM_ITRx_SetConfig>
      break;
 80052a4:	e00c      	b.n	80052c0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4619      	mov	r1, r3
 80052b0:	4610      	mov	r0, r2
 80052b2:	f000 fbd8 	bl	8005a66 <TIM_ITRx_SetConfig>
      break;
 80052b6:	e003      	b.n	80052c0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	73fb      	strb	r3, [r7, #15]
      break;
 80052bc:	e000      	b.n	80052c0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80052be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3710      	adds	r7, #16
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
	...

080052dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052dc:	b480      	push	{r7}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a3c      	ldr	r2, [pc, #240]	; (80053e0 <TIM_Base_SetConfig+0x104>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d00f      	beq.n	8005314 <TIM_Base_SetConfig+0x38>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052fa:	d00b      	beq.n	8005314 <TIM_Base_SetConfig+0x38>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a39      	ldr	r2, [pc, #228]	; (80053e4 <TIM_Base_SetConfig+0x108>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d007      	beq.n	8005314 <TIM_Base_SetConfig+0x38>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a38      	ldr	r2, [pc, #224]	; (80053e8 <TIM_Base_SetConfig+0x10c>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d003      	beq.n	8005314 <TIM_Base_SetConfig+0x38>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a37      	ldr	r2, [pc, #220]	; (80053ec <TIM_Base_SetConfig+0x110>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d108      	bne.n	8005326 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800531a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	4313      	orrs	r3, r2
 8005324:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a2d      	ldr	r2, [pc, #180]	; (80053e0 <TIM_Base_SetConfig+0x104>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d01b      	beq.n	8005366 <TIM_Base_SetConfig+0x8a>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005334:	d017      	beq.n	8005366 <TIM_Base_SetConfig+0x8a>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a2a      	ldr	r2, [pc, #168]	; (80053e4 <TIM_Base_SetConfig+0x108>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d013      	beq.n	8005366 <TIM_Base_SetConfig+0x8a>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a29      	ldr	r2, [pc, #164]	; (80053e8 <TIM_Base_SetConfig+0x10c>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d00f      	beq.n	8005366 <TIM_Base_SetConfig+0x8a>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a28      	ldr	r2, [pc, #160]	; (80053ec <TIM_Base_SetConfig+0x110>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d00b      	beq.n	8005366 <TIM_Base_SetConfig+0x8a>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a27      	ldr	r2, [pc, #156]	; (80053f0 <TIM_Base_SetConfig+0x114>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d007      	beq.n	8005366 <TIM_Base_SetConfig+0x8a>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a26      	ldr	r2, [pc, #152]	; (80053f4 <TIM_Base_SetConfig+0x118>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d003      	beq.n	8005366 <TIM_Base_SetConfig+0x8a>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a25      	ldr	r2, [pc, #148]	; (80053f8 <TIM_Base_SetConfig+0x11c>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d108      	bne.n	8005378 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800536c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	4313      	orrs	r3, r2
 8005376:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	4313      	orrs	r3, r2
 8005384:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	689a      	ldr	r2, [r3, #8]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a10      	ldr	r2, [pc, #64]	; (80053e0 <TIM_Base_SetConfig+0x104>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d00f      	beq.n	80053c4 <TIM_Base_SetConfig+0xe8>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a11      	ldr	r2, [pc, #68]	; (80053ec <TIM_Base_SetConfig+0x110>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d00b      	beq.n	80053c4 <TIM_Base_SetConfig+0xe8>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a10      	ldr	r2, [pc, #64]	; (80053f0 <TIM_Base_SetConfig+0x114>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d007      	beq.n	80053c4 <TIM_Base_SetConfig+0xe8>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a0f      	ldr	r2, [pc, #60]	; (80053f4 <TIM_Base_SetConfig+0x118>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d003      	beq.n	80053c4 <TIM_Base_SetConfig+0xe8>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a0e      	ldr	r2, [pc, #56]	; (80053f8 <TIM_Base_SetConfig+0x11c>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d103      	bne.n	80053cc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	691a      	ldr	r2, [r3, #16]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	615a      	str	r2, [r3, #20]
}
 80053d2:	bf00      	nop
 80053d4:	3714      	adds	r7, #20
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	40012c00 	.word	0x40012c00
 80053e4:	40000400 	.word	0x40000400
 80053e8:	40000800 	.word	0x40000800
 80053ec:	40013400 	.word	0x40013400
 80053f0:	40014000 	.word	0x40014000
 80053f4:	40014400 	.word	0x40014400
 80053f8:	40014800 	.word	0x40014800

080053fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b087      	sub	sp, #28
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	f023 0201 	bic.w	r2, r3, #1
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800542a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800542e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f023 0303 	bic.w	r3, r3, #3
 8005436:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	4313      	orrs	r3, r2
 8005440:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	f023 0302 	bic.w	r3, r3, #2
 8005448:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	4313      	orrs	r3, r2
 8005452:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a2c      	ldr	r2, [pc, #176]	; (8005508 <TIM_OC1_SetConfig+0x10c>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d00f      	beq.n	800547c <TIM_OC1_SetConfig+0x80>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a2b      	ldr	r2, [pc, #172]	; (800550c <TIM_OC1_SetConfig+0x110>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d00b      	beq.n	800547c <TIM_OC1_SetConfig+0x80>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a2a      	ldr	r2, [pc, #168]	; (8005510 <TIM_OC1_SetConfig+0x114>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d007      	beq.n	800547c <TIM_OC1_SetConfig+0x80>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a29      	ldr	r2, [pc, #164]	; (8005514 <TIM_OC1_SetConfig+0x118>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d003      	beq.n	800547c <TIM_OC1_SetConfig+0x80>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a28      	ldr	r2, [pc, #160]	; (8005518 <TIM_OC1_SetConfig+0x11c>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d10c      	bne.n	8005496 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	f023 0308 	bic.w	r3, r3, #8
 8005482:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	697a      	ldr	r2, [r7, #20]
 800548a:	4313      	orrs	r3, r2
 800548c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	f023 0304 	bic.w	r3, r3, #4
 8005494:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a1b      	ldr	r2, [pc, #108]	; (8005508 <TIM_OC1_SetConfig+0x10c>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d00f      	beq.n	80054be <TIM_OC1_SetConfig+0xc2>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a1a      	ldr	r2, [pc, #104]	; (800550c <TIM_OC1_SetConfig+0x110>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d00b      	beq.n	80054be <TIM_OC1_SetConfig+0xc2>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a19      	ldr	r2, [pc, #100]	; (8005510 <TIM_OC1_SetConfig+0x114>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d007      	beq.n	80054be <TIM_OC1_SetConfig+0xc2>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a18      	ldr	r2, [pc, #96]	; (8005514 <TIM_OC1_SetConfig+0x118>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d003      	beq.n	80054be <TIM_OC1_SetConfig+0xc2>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a17      	ldr	r2, [pc, #92]	; (8005518 <TIM_OC1_SetConfig+0x11c>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d111      	bne.n	80054e2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	693a      	ldr	r2, [r7, #16]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	4313      	orrs	r3, r2
 80054e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	685a      	ldr	r2, [r3, #4]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	697a      	ldr	r2, [r7, #20]
 80054fa:	621a      	str	r2, [r3, #32]
}
 80054fc:	bf00      	nop
 80054fe:	371c      	adds	r7, #28
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr
 8005508:	40012c00 	.word	0x40012c00
 800550c:	40013400 	.word	0x40013400
 8005510:	40014000 	.word	0x40014000
 8005514:	40014400 	.word	0x40014400
 8005518:	40014800 	.word	0x40014800

0800551c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800551c:	b480      	push	{r7}
 800551e:	b087      	sub	sp, #28
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a1b      	ldr	r3, [r3, #32]
 800552a:	f023 0210 	bic.w	r2, r3, #16
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	699b      	ldr	r3, [r3, #24]
 8005542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800554a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800554e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005556:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	021b      	lsls	r3, r3, #8
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	4313      	orrs	r3, r2
 8005562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	f023 0320 	bic.w	r3, r3, #32
 800556a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	011b      	lsls	r3, r3, #4
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	4313      	orrs	r3, r2
 8005576:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a28      	ldr	r2, [pc, #160]	; (800561c <TIM_OC2_SetConfig+0x100>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d003      	beq.n	8005588 <TIM_OC2_SetConfig+0x6c>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a27      	ldr	r2, [pc, #156]	; (8005620 <TIM_OC2_SetConfig+0x104>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d10d      	bne.n	80055a4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800558e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	011b      	lsls	r3, r3, #4
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	4313      	orrs	r3, r2
 800559a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a1d      	ldr	r2, [pc, #116]	; (800561c <TIM_OC2_SetConfig+0x100>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d00f      	beq.n	80055cc <TIM_OC2_SetConfig+0xb0>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a1c      	ldr	r2, [pc, #112]	; (8005620 <TIM_OC2_SetConfig+0x104>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d00b      	beq.n	80055cc <TIM_OC2_SetConfig+0xb0>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a1b      	ldr	r2, [pc, #108]	; (8005624 <TIM_OC2_SetConfig+0x108>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d007      	beq.n	80055cc <TIM_OC2_SetConfig+0xb0>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a1a      	ldr	r2, [pc, #104]	; (8005628 <TIM_OC2_SetConfig+0x10c>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d003      	beq.n	80055cc <TIM_OC2_SetConfig+0xb0>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a19      	ldr	r2, [pc, #100]	; (800562c <TIM_OC2_SetConfig+0x110>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d113      	bne.n	80055f4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055d2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055da:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	695b      	ldr	r3, [r3, #20]
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	693a      	ldr	r2, [r7, #16]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	693a      	ldr	r2, [r7, #16]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	685a      	ldr	r2, [r3, #4]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	621a      	str	r2, [r3, #32]
}
 800560e:	bf00      	nop
 8005610:	371c      	adds	r7, #28
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	40012c00 	.word	0x40012c00
 8005620:	40013400 	.word	0x40013400
 8005624:	40014000 	.word	0x40014000
 8005628:	40014400 	.word	0x40014400
 800562c:	40014800 	.word	0x40014800

08005630 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005630:	b480      	push	{r7}
 8005632:	b087      	sub	sp, #28
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a1b      	ldr	r3, [r3, #32]
 800563e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a1b      	ldr	r3, [r3, #32]
 800564a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	69db      	ldr	r3, [r3, #28]
 8005656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800565e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f023 0303 	bic.w	r3, r3, #3
 800566a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	4313      	orrs	r3, r2
 8005674:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800567c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	021b      	lsls	r3, r3, #8
 8005684:	697a      	ldr	r2, [r7, #20]
 8005686:	4313      	orrs	r3, r2
 8005688:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a27      	ldr	r2, [pc, #156]	; (800572c <TIM_OC3_SetConfig+0xfc>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d003      	beq.n	800569a <TIM_OC3_SetConfig+0x6a>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a26      	ldr	r2, [pc, #152]	; (8005730 <TIM_OC3_SetConfig+0x100>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d10d      	bne.n	80056b6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	021b      	lsls	r3, r3, #8
 80056a8:	697a      	ldr	r2, [r7, #20]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056b4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a1c      	ldr	r2, [pc, #112]	; (800572c <TIM_OC3_SetConfig+0xfc>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d00f      	beq.n	80056de <TIM_OC3_SetConfig+0xae>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a1b      	ldr	r2, [pc, #108]	; (8005730 <TIM_OC3_SetConfig+0x100>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d00b      	beq.n	80056de <TIM_OC3_SetConfig+0xae>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a1a      	ldr	r2, [pc, #104]	; (8005734 <TIM_OC3_SetConfig+0x104>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d007      	beq.n	80056de <TIM_OC3_SetConfig+0xae>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a19      	ldr	r2, [pc, #100]	; (8005738 <TIM_OC3_SetConfig+0x108>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d003      	beq.n	80056de <TIM_OC3_SetConfig+0xae>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a18      	ldr	r2, [pc, #96]	; (800573c <TIM_OC3_SetConfig+0x10c>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d113      	bne.n	8005706 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	011b      	lsls	r3, r3, #4
 80056f4:	693a      	ldr	r2, [r7, #16]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	011b      	lsls	r3, r3, #4
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	4313      	orrs	r3, r2
 8005704:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	693a      	ldr	r2, [r7, #16]
 800570a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	685a      	ldr	r2, [r3, #4]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	697a      	ldr	r2, [r7, #20]
 800571e:	621a      	str	r2, [r3, #32]
}
 8005720:	bf00      	nop
 8005722:	371c      	adds	r7, #28
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr
 800572c:	40012c00 	.word	0x40012c00
 8005730:	40013400 	.word	0x40013400
 8005734:	40014000 	.word	0x40014000
 8005738:	40014400 	.word	0x40014400
 800573c:	40014800 	.word	0x40014800

08005740 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005740:	b480      	push	{r7}
 8005742:	b087      	sub	sp, #28
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	69db      	ldr	r3, [r3, #28]
 8005766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800576e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800577a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	021b      	lsls	r3, r3, #8
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	4313      	orrs	r3, r2
 8005786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800578e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	031b      	lsls	r3, r3, #12
 8005796:	693a      	ldr	r2, [r7, #16]
 8005798:	4313      	orrs	r3, r2
 800579a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a18      	ldr	r2, [pc, #96]	; (8005800 <TIM_OC4_SetConfig+0xc0>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d00f      	beq.n	80057c4 <TIM_OC4_SetConfig+0x84>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a17      	ldr	r2, [pc, #92]	; (8005804 <TIM_OC4_SetConfig+0xc4>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d00b      	beq.n	80057c4 <TIM_OC4_SetConfig+0x84>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a16      	ldr	r2, [pc, #88]	; (8005808 <TIM_OC4_SetConfig+0xc8>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d007      	beq.n	80057c4 <TIM_OC4_SetConfig+0x84>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a15      	ldr	r2, [pc, #84]	; (800580c <TIM_OC4_SetConfig+0xcc>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d003      	beq.n	80057c4 <TIM_OC4_SetConfig+0x84>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a14      	ldr	r2, [pc, #80]	; (8005810 <TIM_OC4_SetConfig+0xd0>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d109      	bne.n	80057d8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	695b      	ldr	r3, [r3, #20]
 80057d0:	019b      	lsls	r3, r3, #6
 80057d2:	697a      	ldr	r2, [r7, #20]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	685a      	ldr	r2, [r3, #4]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	693a      	ldr	r2, [r7, #16]
 80057f0:	621a      	str	r2, [r3, #32]
}
 80057f2:	bf00      	nop
 80057f4:	371c      	adds	r7, #28
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop
 8005800:	40012c00 	.word	0x40012c00
 8005804:	40013400 	.word	0x40013400
 8005808:	40014000 	.word	0x40014000
 800580c:	40014400 	.word	0x40014400
 8005810:	40014800 	.word	0x40014800

08005814 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005814:	b480      	push	{r7}
 8005816:	b087      	sub	sp, #28
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a1b      	ldr	r3, [r3, #32]
 800582e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800583a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005846:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	4313      	orrs	r3, r2
 8005850:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005858:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	041b      	lsls	r3, r3, #16
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	4313      	orrs	r3, r2
 8005864:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a17      	ldr	r2, [pc, #92]	; (80058c8 <TIM_OC5_SetConfig+0xb4>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d00f      	beq.n	800588e <TIM_OC5_SetConfig+0x7a>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a16      	ldr	r2, [pc, #88]	; (80058cc <TIM_OC5_SetConfig+0xb8>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d00b      	beq.n	800588e <TIM_OC5_SetConfig+0x7a>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a15      	ldr	r2, [pc, #84]	; (80058d0 <TIM_OC5_SetConfig+0xbc>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d007      	beq.n	800588e <TIM_OC5_SetConfig+0x7a>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a14      	ldr	r2, [pc, #80]	; (80058d4 <TIM_OC5_SetConfig+0xc0>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d003      	beq.n	800588e <TIM_OC5_SetConfig+0x7a>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a13      	ldr	r2, [pc, #76]	; (80058d8 <TIM_OC5_SetConfig+0xc4>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d109      	bne.n	80058a2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005894:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	695b      	ldr	r3, [r3, #20]
 800589a:	021b      	lsls	r3, r3, #8
 800589c:	697a      	ldr	r2, [r7, #20]
 800589e:	4313      	orrs	r3, r2
 80058a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	697a      	ldr	r2, [r7, #20]
 80058a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	685a      	ldr	r2, [r3, #4]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	621a      	str	r2, [r3, #32]
}
 80058bc:	bf00      	nop
 80058be:	371c      	adds	r7, #28
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr
 80058c8:	40012c00 	.word	0x40012c00
 80058cc:	40013400 	.word	0x40013400
 80058d0:	40014000 	.word	0x40014000
 80058d4:	40014400 	.word	0x40014400
 80058d8:	40014800 	.word	0x40014800

080058dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80058dc:	b480      	push	{r7}
 80058de:	b087      	sub	sp, #28
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a1b      	ldr	r3, [r3, #32]
 80058ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a1b      	ldr	r3, [r3, #32]
 80058f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800590a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800590e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	021b      	lsls	r3, r3, #8
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	4313      	orrs	r3, r2
 800591a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005922:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	051b      	lsls	r3, r3, #20
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	4313      	orrs	r3, r2
 800592e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a18      	ldr	r2, [pc, #96]	; (8005994 <TIM_OC6_SetConfig+0xb8>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d00f      	beq.n	8005958 <TIM_OC6_SetConfig+0x7c>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a17      	ldr	r2, [pc, #92]	; (8005998 <TIM_OC6_SetConfig+0xbc>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d00b      	beq.n	8005958 <TIM_OC6_SetConfig+0x7c>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a16      	ldr	r2, [pc, #88]	; (800599c <TIM_OC6_SetConfig+0xc0>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d007      	beq.n	8005958 <TIM_OC6_SetConfig+0x7c>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a15      	ldr	r2, [pc, #84]	; (80059a0 <TIM_OC6_SetConfig+0xc4>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d003      	beq.n	8005958 <TIM_OC6_SetConfig+0x7c>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a14      	ldr	r2, [pc, #80]	; (80059a4 <TIM_OC6_SetConfig+0xc8>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d109      	bne.n	800596c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800595e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	695b      	ldr	r3, [r3, #20]
 8005964:	029b      	lsls	r3, r3, #10
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	4313      	orrs	r3, r2
 800596a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	685a      	ldr	r2, [r3, #4]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	693a      	ldr	r2, [r7, #16]
 8005984:	621a      	str	r2, [r3, #32]
}
 8005986:	bf00      	nop
 8005988:	371c      	adds	r7, #28
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	40012c00 	.word	0x40012c00
 8005998:	40013400 	.word	0x40013400
 800599c:	40014000 	.word	0x40014000
 80059a0:	40014400 	.word	0x40014400
 80059a4:	40014800 	.word	0x40014800

080059a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b087      	sub	sp, #28
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6a1b      	ldr	r3, [r3, #32]
 80059b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6a1b      	ldr	r3, [r3, #32]
 80059be:	f023 0201 	bic.w	r2, r3, #1
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	011b      	lsls	r3, r3, #4
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	4313      	orrs	r3, r2
 80059dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	f023 030a 	bic.w	r3, r3, #10
 80059e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	693a      	ldr	r2, [r7, #16]
 80059f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	697a      	ldr	r2, [r7, #20]
 80059f8:	621a      	str	r2, [r3, #32]
}
 80059fa:	bf00      	nop
 80059fc:	371c      	adds	r7, #28
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr

08005a06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a06:	b480      	push	{r7}
 8005a08:	b087      	sub	sp, #28
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	60f8      	str	r0, [r7, #12]
 8005a0e:	60b9      	str	r1, [r7, #8]
 8005a10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6a1b      	ldr	r3, [r3, #32]
 8005a16:	f023 0210 	bic.w	r2, r3, #16
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6a1b      	ldr	r3, [r3, #32]
 8005a28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	031b      	lsls	r3, r3, #12
 8005a36:	697a      	ldr	r2, [r7, #20]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	011b      	lsls	r3, r3, #4
 8005a48:	693a      	ldr	r2, [r7, #16]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	697a      	ldr	r2, [r7, #20]
 8005a52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	693a      	ldr	r2, [r7, #16]
 8005a58:	621a      	str	r2, [r3, #32]
}
 8005a5a:	bf00      	nop
 8005a5c:	371c      	adds	r7, #28
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr

08005a66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a66:	b480      	push	{r7}
 8005a68:	b085      	sub	sp, #20
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
 8005a6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a7e:	683a      	ldr	r2, [r7, #0]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	f043 0307 	orr.w	r3, r3, #7
 8005a88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	609a      	str	r2, [r3, #8]
}
 8005a90:	bf00      	nop
 8005a92:	3714      	adds	r7, #20
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b087      	sub	sp, #28
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	607a      	str	r2, [r7, #4]
 8005aa8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ab6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	021a      	lsls	r2, r3, #8
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	431a      	orrs	r2, r3
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	697a      	ldr	r2, [r7, #20]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	697a      	ldr	r2, [r7, #20]
 8005ace:	609a      	str	r2, [r3, #8]
}
 8005ad0:	bf00      	nop
 8005ad2:	371c      	adds	r7, #28
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b087      	sub	sp, #28
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	f003 031f 	and.w	r3, r3, #31
 8005aee:	2201      	movs	r2, #1
 8005af0:	fa02 f303 	lsl.w	r3, r2, r3
 8005af4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6a1a      	ldr	r2, [r3, #32]
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	43db      	mvns	r3, r3
 8005afe:	401a      	ands	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6a1a      	ldr	r2, [r3, #32]
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	f003 031f 	and.w	r3, r3, #31
 8005b0e:	6879      	ldr	r1, [r7, #4]
 8005b10:	fa01 f303 	lsl.w	r3, r1, r3
 8005b14:	431a      	orrs	r2, r3
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	621a      	str	r2, [r3, #32]
}
 8005b1a:	bf00      	nop
 8005b1c:	371c      	adds	r7, #28
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
	...

08005b28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d101      	bne.n	8005b40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b3c:	2302      	movs	r3, #2
 8005b3e:	e063      	b.n	8005c08 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2202      	movs	r2, #2
 8005b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a2b      	ldr	r2, [pc, #172]	; (8005c14 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d004      	beq.n	8005b74 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a2a      	ldr	r2, [pc, #168]	; (8005c18 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d108      	bne.n	8005b86 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005b7a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b8c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a1b      	ldr	r2, [pc, #108]	; (8005c14 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d018      	beq.n	8005bdc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bb2:	d013      	beq.n	8005bdc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a18      	ldr	r2, [pc, #96]	; (8005c1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d00e      	beq.n	8005bdc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a17      	ldr	r2, [pc, #92]	; (8005c20 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d009      	beq.n	8005bdc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a12      	ldr	r2, [pc, #72]	; (8005c18 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d004      	beq.n	8005bdc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a13      	ldr	r2, [pc, #76]	; (8005c24 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d10c      	bne.n	8005bf6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005be2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	68ba      	ldr	r2, [r7, #8]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68ba      	ldr	r2, [r7, #8]
 8005bf4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3714      	adds	r7, #20
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr
 8005c14:	40012c00 	.word	0x40012c00
 8005c18:	40013400 	.word	0x40013400
 8005c1c:	40000400 	.word	0x40000400
 8005c20:	40000800 	.word	0x40000800
 8005c24:	40014000 	.word	0x40014000

08005c28 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b085      	sub	sp, #20
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005c30:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005c34:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	43db      	mvns	r3, r3
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	4013      	ands	r3, r2
 8005c48:	b29a      	uxth	r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3714      	adds	r7, #20
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr

08005c5e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005c5e:	b084      	sub	sp, #16
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	f107 0014 	add.w	r0, r7, #20
 8005c6c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	370c      	adds	r7, #12
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	b004      	add	sp, #16
 8005c9e:	4770      	bx	lr

08005ca0 <memset>:
 8005ca0:	4402      	add	r2, r0
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d100      	bne.n	8005caa <memset+0xa>
 8005ca8:	4770      	bx	lr
 8005caa:	f803 1b01 	strb.w	r1, [r3], #1
 8005cae:	e7f9      	b.n	8005ca4 <memset+0x4>

08005cb0 <__libc_init_array>:
 8005cb0:	b570      	push	{r4, r5, r6, lr}
 8005cb2:	4d0d      	ldr	r5, [pc, #52]	; (8005ce8 <__libc_init_array+0x38>)
 8005cb4:	4c0d      	ldr	r4, [pc, #52]	; (8005cec <__libc_init_array+0x3c>)
 8005cb6:	1b64      	subs	r4, r4, r5
 8005cb8:	10a4      	asrs	r4, r4, #2
 8005cba:	2600      	movs	r6, #0
 8005cbc:	42a6      	cmp	r6, r4
 8005cbe:	d109      	bne.n	8005cd4 <__libc_init_array+0x24>
 8005cc0:	4d0b      	ldr	r5, [pc, #44]	; (8005cf0 <__libc_init_array+0x40>)
 8005cc2:	4c0c      	ldr	r4, [pc, #48]	; (8005cf4 <__libc_init_array+0x44>)
 8005cc4:	f000 f818 	bl	8005cf8 <_init>
 8005cc8:	1b64      	subs	r4, r4, r5
 8005cca:	10a4      	asrs	r4, r4, #2
 8005ccc:	2600      	movs	r6, #0
 8005cce:	42a6      	cmp	r6, r4
 8005cd0:	d105      	bne.n	8005cde <__libc_init_array+0x2e>
 8005cd2:	bd70      	pop	{r4, r5, r6, pc}
 8005cd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cd8:	4798      	blx	r3
 8005cda:	3601      	adds	r6, #1
 8005cdc:	e7ee      	b.n	8005cbc <__libc_init_array+0xc>
 8005cde:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ce2:	4798      	blx	r3
 8005ce4:	3601      	adds	r6, #1
 8005ce6:	e7f2      	b.n	8005cce <__libc_init_array+0x1e>
 8005ce8:	08005d40 	.word	0x08005d40
 8005cec:	08005d40 	.word	0x08005d40
 8005cf0:	08005d40 	.word	0x08005d40
 8005cf4:	08005d44 	.word	0x08005d44

08005cf8 <_init>:
 8005cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cfa:	bf00      	nop
 8005cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cfe:	bc08      	pop	{r3}
 8005d00:	469e      	mov	lr, r3
 8005d02:	4770      	bx	lr

08005d04 <_fini>:
 8005d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d06:	bf00      	nop
 8005d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d0a:	bc08      	pop	{r3}
 8005d0c:	469e      	mov	lr, r3
 8005d0e:	4770      	bx	lr
